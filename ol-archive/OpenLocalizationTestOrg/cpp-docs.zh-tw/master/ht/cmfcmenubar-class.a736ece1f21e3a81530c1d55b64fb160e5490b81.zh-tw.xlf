<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2505bfa7f67ea3d8d973daf4bbf65898e464613e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cmfcmenubar-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">83374973e8bea98f0d4fbb70d097f984d8124eee</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d304e87ac32acf87305a16b639a764d6d395e5d0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A menu bar that implements docking.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::AdjustLocations</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>(Overrides <ph id="ph1">`CMFCToolBar::AdjustLocations`</ph>.)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::AllowChangeTextLabels</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Specifies whether text labels can be shown under images on the toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBar::AllowChangeTextLabels<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__allowchangetextlabels)</ept>.)</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::AllowShowOnPaneMenu</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>(Overrides <ph id="ph1">`CPane::AllowShowOnPaneMenu`</ph>.)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CalcFixedLayout</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Calculates the horizontal size of the toolbar.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBar::CalcFixedLayout<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__calcfixedlayout)</ept>.)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CalcLayout</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>(Overrides <ph id="ph1">`CMFCToolBar::CalcLayout`</ph>.)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CalcMaxButtonHeight</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Calculates the maximum height of buttons in the toolbar.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBar::CalcMaxButtonHeight<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__calcmaxbuttonheight)</ept>.)</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CanBeClosed</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Specifies whether a user can close the toolbar.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBar::CanBeClosed<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__canbeclosed)</ept>.)</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CanBeRestored</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Determines whether the system can restore a toolbar to its original state after customization.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBar::CanBeRestored<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__canberestored)</ept>.)</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::Create</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Creates a menu control and attaches it to a <ph id="ph1">`CMFCMenuBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CreateEx</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`CMFCMenuBar`</ph> object with additional style options.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CreateFromMenu</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Initializes a <ph id="ph1">`CMFCMenuBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Accepts a <ph id="ph1">`HMENU`</ph> parameter that acts as a template for a populated <ph id="ph2">`CMFCMenuBar`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::EnableHelpCombobox</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Enables a <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> combo box that is located on the right side of the menu bar.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::EnableMenuShadows</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Specifies whether to display shadows for pop-up menus.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetAvailableExpandSize</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CPane::GetAvailableExpandSize<ept id="p1">](../../mfc/reference/cpane-class.md#cpane__getavailableexpandsize)</ept>.)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetColumnWidth</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Returns the width of the toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBar::GetColumnWidth<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getcolumnwidth)</ept>.)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetDefaultMenu</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Returns a handle to the original menu in the resource file.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetDefaultMenuResId</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Returns the resource identifier for the original menu in the resource file.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetFloatPopupDirection</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetForceDownArrows</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetHelpCombobox</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> combo box.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetHMenu</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Returns the handle to the menu that is attached to the <ph id="ph1">`CMFCMenuBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetMenuFont</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns the current global font for menu objects.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetMenuItem</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Returns the toolbar button associated with the provided item index.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetRowHeight</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Returns the height of toolbar buttons.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBar::GetRowHeight<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getrowheight)</ept>.)</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetSystemButton</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetSystemButtonsCount</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetSystemMenu</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::HighlightDisabledItems</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Indicates whether disabled menu items are highlighted.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::IsButtonExtraSizeAvailable</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Determines whether the toolbar can display buttons that have extended borders.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBar::IsButtonExtraSizeAvailable<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__isbuttonextrasizeavailable)</ept>.)</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::IsHighlightDisabledItems</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Indicates whether disabled items are highlighted.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::IsMenuShadows</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Indicates whether shadows are drawn for pop-up menus.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::IsRecentlyUsedMenus</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Indicates whether recently used menu commands are displayed on the menu bar.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::IsShowAllCommands</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Indicates whether pop-up menus display all commands.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::IsShowAllCommandsDelay</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Indicates whether menus display all the commands after a short delay.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::LoadState</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Loads the state of the <ph id="ph1">`CMFCMenuBar`</ph> object from the registry.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::OnChangeHot</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Called by the framework when a user selects a button on the toolbar.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>(Overrides <bpt id="p1">[</bpt>CMFCToolBar::OnChangeHot<ept id="p1">](../../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__onchangehot)</ept>.)</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::OnDefaultMenuLoaded</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Called by the framework when a frame window loads the default menu from the resource file.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::OnSendCommand</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>(Overrides <ph id="ph1">`CMFCToolBar::OnSendCommand`</ph>.)</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::OnSetDefaultButtonText</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Called by the framework when a menu is in customization mode and the user changes a menu item's text.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::OnToolHitTest</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>(Overrides <ph id="ph1">`CMFCToolBar::OnToolHitTest`</ph>.)</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::PreTranslateMessage</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>(Overrides <ph id="ph1">`CMFCToolBar::PreTranslateMessage`</ph>.)</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::RestoreOriginalstate</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Called by the framework when a menu is in customization mode and the user selects <bpt id="p1">**</bpt>Reset<ept id="p1">**</ept> for a menu bar.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SaveState</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Saves the state of the <ph id="ph1">`CMFCMenuBar`</ph> object to the registry.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetDefaultMenuResId</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Sets the original menu in the resource file.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetForceDownArrows</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetMaximizeMode</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Called by the framework when an MDI child window changes its display mode.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If the MDI child window is newly maximized or is no longer maximized, this method updates the menu bar.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetMenuButtonRTC</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Sets the runtime class information that is generated when the user dynamically creates menu buttons.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetMenuFont</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Sets the font for all menus in the application.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetRecentlyUsedMenus</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Specifies whether a menu bar displays recently used menu commands.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetShowAllCommands</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Specifies whether the menu bar shows all commands.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CMFCMenuBar`</ph> class is a menu bar that implements docking functionality.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>It resembles a toolbar, although it cannot be closed - it is always displayed.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>supports the option of displaying recently used menu item objects.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If this option is enabled, the <ph id="ph1">`CMFCMenuBar`</ph> displays only a subset of the available commands on first viewing.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Thereafter, recently used commands are displayed together with the original subset of commands.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>In addition, the user can always expand the menu to view all available commands.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Thus, each available command is configured to display constantly, or to display only if it has been recently selected.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>To use a <ph id="ph1">`CMFCMenuBar`</ph> object, embed it in the main window frame object.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>When processing the <ph id="ph1">`WM_CREATE`</ph> message, call <ph id="ph2">`CMFCMenuBar::Create`</ph> or <ph id="ph3">`CMFCMenuBar::CreateEx`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Regardless of which create function you use, pass in a pointer to the main frame window.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Then enable docking by calling <bpt id="p1">[</bpt>CFrameWndEx::EnableDocking<ept id="p1">](../../mfc/reference/cframewndex-class.md#cframewndex__enabledocking)</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Dock this menu by calling <bpt id="p1">[</bpt>CFrameWndEx::DockPane<ept id="p1">](../../mfc/reference/cframewndex-class.md#cframewndex__dockpane)</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use various methods in the <ph id="ph1">`CMFCMenuBar`</ph> class.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The example shows how to set the style of the pane, enable the customize button, enable a Help box, enable shadows for pop-up menus, and update the menu bar.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>IE Demo sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#1</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#3</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>CWnd</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CBasePane</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>CPane</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>CMFCBaseToolBar</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>CMFCToolBar</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxmenubar.h</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::AdjustLocations</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Adjusts the positions of the menu items on the menu bar.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::AllowChangeTextLabels</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Determines whether text labels are allowed under images in the menu bar.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`TRUE`</ph> if the user can choose to show text labels under images.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::AllowShowOnPaneMenu</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CalcFixedLayout</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CalcLayout</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CalcMaxButtonHeight</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CanBeClosed</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CanBeRestored</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::Create</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Creates a menu control and attaches it to a <bpt id="p1">[</bpt>CMFCMenuBar<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Pointer to the parent window for the new <ph id="ph1">`CMFCMenuBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The style of the new menu bar.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The ID for the child window of the menu bar.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>if successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>After you construct a <ph id="ph1">`CMFCMenuBar`</ph> object, you must call <ph id="ph2">`Create`</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>This method creates the <ph id="ph1">`CMFCMenuBar`</ph> control and attaches it to the <ph id="ph2">`CMFCMenuBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>For more information about toolbar styles, see <bpt id="p1">[</bpt>CBasePane::SetPaneStyle<ept id="p1">](../../mfc/reference/cbasepane-class.md#cbasepane__setpanestyle)</ept>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CreateEx</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Creates a <bpt id="p1">[</bpt>CMFCMenuBar<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept> object with specified extended styles.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Pointer to the parent window of the new <ph id="ph1">`CMFCMenuBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Additional styles for the new menu bar.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>The main style of the new menu bar.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CRect`</ph> parameter that specifies the sizes for the borders of the <ph id="ph2">`CMFCMenuBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The ID for the child window of the menu bar.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Nonzero if the method is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>You should use this function instead of <bpt id="p1">[</bpt>CMFCMenuBar::Create<ept id="p1">](#cmfcmenubar__create)</ept> when you want to specify styles in addition to the toolbar style.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Some frequently used additional styles are <ph id="ph1">`TBSTYLE_TRANSPARENT`</ph> and <ph id="ph2">`CBRS_TOP`</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>For lists of additional styles, see <bpt id="p1">[</bpt>Toolbar Control and Button Styles<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb760439)</ept>, <bpt id="p2">[</bpt>common control styles<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/bb775498)</ept>, and <bpt id="p3">[</bpt>common window styles<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms632600)</ept>.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use the <ph id="ph1">`CreateEx`</ph> method of the <ph id="ph2">`CMFCMenuBar`</ph> class.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>This code snippet is part of the <bpt id="p1">[</bpt>IE Demo sample<ept id="p1">](../../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#1</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>NVC_MFC_IEDemo#2</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::CreateFromMenu</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Initializes a <bpt id="p1">[</bpt>CMFCMenuBar<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>This method models the <ph id="ph1">`CMFCMenuBar`</ph> object after a <ph id="ph2">`HMENU`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>A handle to a menu resource.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>uses this resource as a template for the <ph id="ph1">`CMFCMenuBar`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>A Boolean that indicates whether the new menu is the default menu.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>A Boolean that indicates whether this method forces a menu update.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Use this method if you want a menu control to have the same menu items as a menu resource.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>You call this method after you call either <bpt id="p1">[</bpt>CMFCMenuBar::Create<ept id="p1">](#cmfcmenubar__create)</ept> or <bpt id="p2">[</bpt>CMFCMenuBar::CreateEx<ept id="p2">](#cmfcmenubar__createex)</ept>.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::EnableHelpCombobox</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Enables a <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> combo box that is located on the right side of the menu bar.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The command ID for the button of the <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> combo box.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>A string that contains the text that the framework displays in the combo box if it is empty and not active.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>For example, "Enter the text here".</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The width of the button for the combo box in pixels.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> combo box resembles the <bpt id="p2">**</bpt>Help<ept id="p2">**</ept> combo box in the menu bar of <ph id="ph1">[!INCLUDE[ofprword](../../mfc/reference/includes/ofprword_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>When you call this method with <ph id="ph1">`uiID`</ph> set to 0, this method hides the combo box.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Otherwise, this method displays the combo box automatically on the right side of your menu bar.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>After you call this method, call <bpt id="p1">[</bpt>CMFCMenuBar::GetHelpCombobox<ept id="p1">](#cmfcmenubar__gethelpcombobox)</ept> to obtain a pointer to the inserted <bpt id="p2">[</bpt>CMFCToolBarComboBoxButton<ept id="p2">](../../mfc/reference/cmfctoolbarcomboboxbutton-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::EnableMenuShadows</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Enables shadows for pop-up menus.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A Boolean parameter that indicates whether shadows should be enabled for pop-up menus.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The algorithm that this method uses is complex and may decrease the performance of your application on slower systems.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetAvailableExpandSize</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetColumnWidth</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetDefaultMenu</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Retrieves a handle to the original menu.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The framework loads the original menu from the resource file.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>A handle to a menu resource.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>If your application customizes a menu, you can use this method to retrieve a handle to the original menu.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetDefaultMenuResId</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Retrieves the resource identifier for the default menu.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>A menu resource identifier.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The framework loads the default menu for the <bpt id="p1">[</bpt>CMFCMenuBar<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept> object from the resource file.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetFloatPopupDirection</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetForceDownArrows</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetHelpCombobox</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> combo box.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> combo box.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>if the <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> combo box is hidden or not enabled.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Help<ept id="p1">**</ept> combo box is located on the right side of the menu bar.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Call the method <bpt id="p1">[</bpt>CMFCMenuBar::EnableHelpCombobox<ept id="p1">](#cmfcmenubar__enablehelpcombobox)</ept> to enable this combo box.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetHMenu</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Retrieves the handle to the menu attached to the <bpt id="p1">[</bpt>CMFCMenuBar<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetMenuFont</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Retrieves the current menu font.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>A Boolean parameter that specifies whether to return the horizontal or vertical font.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>indicates the horizontal font.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>CFont<ept id="p1">](../../mfc/reference/cfont-class.md)</ept> parameter that contains the current menu bar font.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The returned font is a global parameter for the application.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Two global fonts are maintained for all <ph id="ph1">`CMFCMenuBar`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>These separate fonts are used for horizontal and vertical menu bars.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetMenuItem</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Retrieves a <bpt id="p1">[</bpt>CMFCToolBarButton<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object on a menu bar based on the item index.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The index of the menu item to return.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">`CMFCToolBarButton`</ph> object that matches the index specified by <ph id="ph2">`iItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>if the index is invalid.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetRowHeight</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetSystemButton</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetSystemButtonsCount</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::GetSystemMenu</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::HighlightDisabledItems</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Controls whether the framework highlights disabled menu items.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>A Boolean parameter that indicates whether the framework highlights unavailable menu items.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>By default, the framework does not highlight unavailable menu items when the user positions the mouse pointer over them.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::IsButtonExtraSizeAvailable</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::IsHighlightDisabledItems</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Indicates whether the framework highlights unavailable menu items.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>if unavailable menu items are highlighted; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>By default, the framework does not highlight unavailable menu items when the user positions the mouse pointer over them.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCMenuBar::HighlightDisabledItems<ept id="p1">](#cmfcmenubar__highlightdisableditems)</ept> method to enable this feature.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::IsMenuShadows</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Indicates whether the framework draws shadows for pop-up menus.</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>if the framework draws menu shadows; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCMenuBar::EnableMenuShadows<ept id="p1">](#cmfcmenubar__enablemenushadows)</ept> method to enable or disable this feature.</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::IsRecentlyUsedMenus</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Indicates whether recently used menu commands are displayed on the menu bar.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Nonzero if the <bpt id="p1">[</bpt>CMFCMenuBar<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept> object shows recently used menu commands; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Use the function <bpt id="p1">[</bpt>CMFCMenuBar::SetRecentlyUsedMenus<ept id="p1">](#cmfcmenubar__setrecentlyusedmenus)</ept> to control whether the menu bar shows recently used menu commands.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::IsShowAllCommands</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Indicates whether menus display all commands.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Nonzero if the <bpt id="p1">[</bpt>CMFCMenuBar<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept> displays all commands; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CMFCMenuBar`</ph> object can be configured to either show all commands or show only a subset of commands.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>For more information about this feature, see <bpt id="p1">[</bpt>CMFCMenuBar Class<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>will tell you how this feature is configured for the <ph id="ph1">`CMFCMenuBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>To control which menu commands are shown, use the methods <bpt id="p1">[</bpt>CMFCMenuBar::SetShowAllCommands<ept id="p1">](#cmfcmenubar__setshowallcommands)</ept> and <bpt id="p2">[</bpt>CMFCMenuBar::SetRecentlyUsedMenus<ept id="p2">](#cmfcmenubar__setrecentlyusedmenus)</ept>.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::IsShowAllCommandsDelay</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>Indicates whether the <bpt id="p1">[</bpt>CMFCMenuBar<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept> object displays all the commands after a short delay.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Nonzero if the menu bar displays full menus after a short delay; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>When you configure a menu bar to display recently used items, the menu bar displays the full menu in one of two ways:</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Display the full menu after a programmed delay from when the user hovers the cursor over the arrow at the bottom of the menu.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Display the full menu after the user clicks the arrow at the bottom of the menu.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>By default, all <ph id="ph1">`CMFCMenuBar`</ph> objects use the option to display the full menu after a short delay.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>This option cannot be changed programmatically in the <ph id="ph1">`CMFCMenuBar`</ph> class.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>However, a user can change the behavior during toolbar customization by using the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box..</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::LoadState</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Loads the state of the menu bar from the Windows registry.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>A string that contains the path of a Windows registry key.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>The control ID for the menu bar.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>A reserved value.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>if the method was successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCMenuBar::SaveState<ept id="p1">](#cmfcmenubar__savestate)</ept> method to save the state of the menu bar to the registry.</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>The saved information includes the menu items, the dock state, and the position of the menu bar.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>In most cases your application does not call <ph id="ph1">`LoadState`</ph>.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>The framework calls this method when it initializes the workspace.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::OnChangeHot</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::OnDefaultMenuLoaded</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The framework calls this method when it loads the menu resource from the resource file.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>The handle for the menu attached to the <bpt id="p1">[</bpt>CMFCMenuBar<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>The default implementation of this function does nothing.</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Override this function to execute custom code after the framework loads a menu resource from the resource file.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::OnSendCommand</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::OnSetDefaultButtonText</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the user changes the text of an item on the menu bar.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>CMFCToolBarButton<ept id="p1">](../../mfc/reference/cmfctoolbarbutton-class.md)</ept> object that the user wants to customize.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>if the framework applies the user changes to the menu bar; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>The default implementation for this method changes the text of the button to the text that the user provides.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::OnToolHitTest</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::PreTranslateMessage</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::RestoreOriginalstate</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user selects <bpt id="p1">**</bpt>Reset<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Nonzero if the method is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>This method is called when the user selects <bpt id="p1">**</bpt>Reset<ept id="p1">**</ept> from the customization menu.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>You can also manually call this method to programmatically reset the state of the menu bar.</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>This method loads the original state from the resource file.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Override this method if you want to do any processing when the user selects the <bpt id="p1">**</bpt>Reset<ept id="p1">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SaveState</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Saves the state of the <bpt id="p1">[</bpt>CMFCMenuBar<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept> object to the Windows registry.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>A string that contains the path of a Windows registry key.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>The control ID for the menu bar.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>A reserved value.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>if successful; otherwise <ph id="ph1">`FALSE`</ph>;</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Usually, your application does not call <ph id="ph1">`SaveState`</ph>.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>The framework calls this method when the workspace is serialized.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CWinAppEx::SaveState<ept id="p1">](../../mfc/reference/cwinappex-class.md#cwinappex__savestate)</ept>.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The saved information includes the menu items, the dock state, and the position of the menu bar.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetDefaultMenuResId</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Sets the default menu for a <bpt id="p1">[</bpt>CMFCMenuBar<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept> object based on the resource ID.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The resource ID for the new default menu.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCMenuBar::RestoreOriginalstate<ept id="p1">](#cmfcmenubar__restoreoriginalstate)</ept> method restores the default menu from the resource file.</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>CMFCMenuBar::GetDefaultMenuResId<ept id="p1">](#cmfcmenubar__getdefaultmenuresid)</ept> method to retrieve the default menu without restoring it.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetForceDownArrows</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetMaximizeMode</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>The framework calls this method when a MDI changes its display mode and the menu bar must be updated.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>A Boolean that specifies the mode.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>See the Remarks section for more information.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>A pointer to the MDI child window that is changing.</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>A Boolean that specifies whether the layout of the menu bar should be recalculated immediately.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>When an MDI child window is maximized, a menu bar attached to the MDI main frame window displays the system menu and the <bpt id="p1">**</bpt>Minimize<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Maximize<ept id="p2">**</ept> and <bpt id="p3">**</bpt>Close<ept id="p3">**</ept> buttons.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`bMax`</ph> is <ph id="ph2">`TRUE`</ph> and <ph id="ph3">`pWnd`</ph> is not <ph id="ph4">`NULL`</ph>, the MDI child window is maximized and the menu bar must incorporate the extra controls.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Otherwise, the menu bar returns to its regular state.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetMenuButtonRTC</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Sets the runtime class information that the framework uses when the user creates menu buttons.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CRuntimeClass<ept id="p1">](../../mfc/reference/cruntimeclass-structure.md)</ept> information for a class derived from the <bpt id="p2">[</bpt>CMFCMenuButton Class<ept id="p2">](../../mfc/reference/cmfcmenubutton-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>When a user adds new buttons to the menu bar, the framework creates the buttons dynamically.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>By default, it creates <ph id="ph1">`CMFCMenuButton`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Override this method to change the type of button objects that the framework creates.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetMenuFont</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>Sets the font for all menu bars in your application.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>LOGFONT<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb773327)</ept> structure that defines the font to set.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>TRUE if you want the <ph id="ph1">`lpLogFont`</ph> parameter to be used for the vertical font, FALSE if you want it to be used for horizontal font.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>if the method was successful; otherwise <ph id="ph1">`FALSE`</ph>.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Two fonts are used for all <bpt id="p1">[</bpt>CMFCMenuBar<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>These separate fonts are used for horizontal and vertical menu bars.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>The font settings are global variables and affect all <ph id="ph1">`CMFCMenuBar`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetRecentlyUsedMenus</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Controls whether a menu bar displays recently used menu commands.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>A Boolean that controls whether recently used menu commands are displayed.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>CMFCMenuBar::SetShowAllCommands</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>Controls whether a menu shows all the available commands.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>A Boolean parameter that specifies whether the pop-up menu shows all the menu commands.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>If a menu does not display all the menu commands, it hides the commands that are rarely used.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>For more information about displaying menu commands, see <bpt id="p1">[</bpt>CMFCMenuBar Class<ept id="p1">](../../mfc/reference/cmfcmenubar-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>CMFCToolBar Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>