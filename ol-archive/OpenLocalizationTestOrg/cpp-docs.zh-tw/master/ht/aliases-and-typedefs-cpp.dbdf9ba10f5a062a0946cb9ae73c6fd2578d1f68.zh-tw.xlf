<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c834fd2a9af95d376e4088fd4dd7ee0266cced17</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\aliases-and-typedefs-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6663159f04af53e1d0e4ade24d11fd8e179e0656</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8690683ac14602e49b7613510993a485bfc4946a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Aliases and typedefs (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Aliases and typedefs (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use an <bpt id="p1">*</bpt>alias declaration<ept id="p1">*</ept> to declare a name to use as a synonym for a previously declared type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>(This mechanism is also referred to informally as a <bpt id="p1">*</bpt>type alias<ept id="p1">*</ept>).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can also use this mechanism to create an <bpt id="p1">*</bpt>alias template<ept id="p1">*</ept>, which can be particularly useful for custom allocators.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The name of the alias.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The type identifier you are creating an alias for.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An alias does not introduce a new type and cannot change the meaning of an existing type name.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The simplest form of an alias is equivalent to the <ph id="ph1">`typedef`</ph> mechanism from C++03:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Both of these enable the creation of variables of type "counter".</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Something more useful would be a type alias like this one for <ph id="ph1">`std::ios_base::fmtflags`</ph>:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Aliases also work with function pointers, but are much more readable than the equivalent typedef:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A limitation of the <ph id="ph1">`typedef`</ph> mechanism is that it doesn't work with templates.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>However, the type alias syntax in C++11 enables the creation of alias templates:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to use an alias template with a custom allocator—in this case, an integer vector type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can substitute any type for <ph id="ph1">`int`</ph> to create a convenient alias to hide the complex parameter lists in your main functional code.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>By using the custom allocator throughout your code you can improve readability and reduce the risk of introducing bugs caused by typos.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`typedef`</ph> declaration introduces a name that, within its scope, becomes a synonym for the type given by the <bpt id="p1">*</bpt>type-declaration<ept id="p1">*</ept> portion of the declaration.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You can use typedef declarations to construct shorter or more meaningful names for types already defined by the language or for types that you have declared.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Typedef names allow you to encapsulate implementation details that may change.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In contrast to the <bpt id="p1">**</bpt>class<ept id="p1">**</ept>, <ph id="ph1">`struct`</ph>, <bpt id="p2">**</bpt>union<ept id="p2">**</ept>, and <ph id="ph2">`enum`</ph> declarations, <ph id="ph3">`typedef`</ph> declarations do not introduce new types — they introduce new names for existing types.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Names declared using <ph id="ph1">`typedef`</ph> occupy the same namespace as other identifiers (except statement labels).</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Therefore, they cannot use the same identifier as a previously declared name, except in a class-type declaration.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Consider the following example:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The name-hiding rules that pertain to other identifiers also govern the visibility of names declared using <ph id="ph1">`typedef`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Therefore, the following example is legal in C++:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When declaring a local-scope identifier by the same name as a typedef, or when declaring a member of a structure or union in the same scope or in an inner scope, the type specifier must be specified.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To reuse the <ph id="ph1">`FlagType`</ph> name for an identifier, a structure member, or a union member, the type must be provided:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>It is not sufficient to say</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>because the <ph id="ph1">`FlagType`</ph> is taken to be part of the type, not an identifier that is being redeclared.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This declaration is taken to be an illegal declaration like</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can declare any type with typedef, including pointer, function, and array types.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>You can declare a typedef name for a pointer to a structure or union type before you define the structure or union type, as long as the definition has the same visibility as the declaration.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>One use of <ph id="ph1">`typedef`</ph> declarations is to make declarations more uniform and compact.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">`typedef`</ph> to specify fundamental and derived types in the same declaration, you can separate declarators with commas.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following example provides the type <ph id="ph1">`DRAWF`</ph> for a function returning no value and taking two int arguments:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>After the above <ph id="ph1">`typedef`</ph> statement, the declaration</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>would be equivalent to the declaration</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>is often combined with <ph id="ph1">`struct`</ph> to declare and name user-defined types:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Re-declaration of typedefs</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`typedef`</ph> declaration can be used to redeclare the same name to refer to the same type.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The program PROG.CPP includes two header files, both of which contain <ph id="ph1">`typedef`</ph> declarations for the name <ph id="ph2">`CHAR`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>As long as both declarations refer to the same type, such redeclaration is acceptable.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`typedef`</ph> cannot redefine a name that was previously declared as a different type.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Therefore, if FILE2.H contains</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>the compiler issues an error because of the attempt to redeclare the name <ph id="ph1">`CHAR`</ph> to refer to a different type.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>This extends to constructs such as:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>typedefs in C++ vs. C</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Use of the <ph id="ph1">`typedef`</ph> specifier with class types is supported largely because of the ANSI C practice of declaring unnamed structures in <ph id="ph2">`typedef`</ph> declarations.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For example, many C programmers use the following:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The advantage of such a declaration is that it enables declarations like:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>instead of:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>In C++, the difference between <ph id="ph1">`typedef`</ph> names and real types (declared with the <bpt id="p1">**</bpt>class<ept id="p1">**</ept>, <ph id="ph2">`struct`</ph>, <bpt id="p2">**</bpt>union<ept id="p2">**</ept>, and <ph id="ph3">`enum`</ph> keywords) is more distinct.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Although the C practice of declaring a nameless structure in a <ph id="ph1">`typedef`</ph> statement still works, it provides no notational benefits as it does in C.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The preceding example declares a class named <ph id="ph1">`POINT`</ph> using the unnamed class <ph id="ph2">`typedef`</ph> syntax.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>is treated as a class name; however, the following restrictions apply to names introduced this way:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The name (the synonym) cannot appear after a <bpt id="p1">**</bpt>class<ept id="p1">**</ept>, <ph id="ph1">`struct`</ph>, or <bpt id="p2">**</bpt>union<ept id="p2">**</ept> prefix.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The name cannot be used as constructor or destructor names within a class declaration.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In summary, this syntax does not provide any mechanism for inheritance, construction, or destruction.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>