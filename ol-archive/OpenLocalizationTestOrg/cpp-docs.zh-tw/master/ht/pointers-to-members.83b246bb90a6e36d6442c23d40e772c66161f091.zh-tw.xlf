<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1810fcdcf75587276efd99c769a77d454372457b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\pointers-to-members.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca0ab9f4288dccbc9c3c6b82615573828402f5f5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b529caa2487fd9d42730ddf4f0663e1c7c503a07</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Pointers to Members | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Pointers to Members</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declarations of pointers to members are special cases of pointer declarations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>They are declared using the following sequence:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The declaration specifier:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An optional storage class specifier.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Optional <bpt id="p1">**</bpt>const<ept id="p1">**</ept> and/or <ph id="ph1">`volatile`</ph> specifiers.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The type specifier: the name of a type.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This is the type of the member to be pointed to, not the class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The declarator:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An optional Microsoft specific modifier.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Microsoft-Specific Modifiers<ept id="p1">](../cpp/microsoft-specific-modifiers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The qualified name of the class containing the members to be pointed to.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The :: operator.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">\*</ph><ept id="p1">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Optional <bpt id="p1">**</bpt>const<ept id="p1">**</ept> and/or <ph id="ph1">`volatile`</ph> specifiers.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The identifier naming the pointer to member.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An optional initializer:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">=</ph><ept id="p1">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt><ph id="ph1">&amp;</ph><ept id="p1">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The qualified name of the class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`::`</ph> operator.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The name of a nonstatic member of the class of the appropriate type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>As always, multiple declarators (and any associated initializers) are allowed in a single declaration.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A pointer to a member of a class differs from a normal pointer because it has type information for the type of the member and for the class to which the member belongs.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A normal pointer identifies (has the address of) only a single object in memory.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A pointer to a member of a class identifies that member in any instance of the class.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following example declares a class, <ph id="ph1">`Window`</ph>, and some pointers to member data.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the preceding example, <ph id="ph1">`pwCaption`</ph> is a pointer to any member of class <ph id="ph2">`Window`</ph> that has type <bpt id="p1">**</bpt>char<ph id="ph3">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`pwCaption`</ph> is <ph id="ph2">`char * Window::*`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The next code fragment declares pointers to the <ph id="ph1">`SetCaption`</ph> and <ph id="ph2">`GetCaption`</ph> member functions.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The pointers <ph id="ph1">`pfnwGC`</ph> and <ph id="ph2">`pfnwSC`</ph> point to <ph id="ph3">`GetCaption`</ph> and <ph id="ph4">`SetCaption`</ph> of the <ph id="ph5">`Window`</ph> class, respectively.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The code copies information to the window caption directly using the pointer to member <ph id="ph1">`pwCaption`</ph>:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The difference between the <bpt id="p1">**</bpt>.<ph id="ph1">\*</ph><ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>and <bpt id="p1">**</bpt>–&gt;<ph id="ph1">\*</ph><ept id="p1">**</ept> operators (the pointer-to-member operators) is that the <bpt id="p2">**</bpt>.<ph id="ph2">\*</ph><ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>operator selects members given an object or object reference, while the <bpt id="p1">**</bpt>–&gt;<ph id="ph1">\*</ph><ept id="p1">**</ept> operator selects members through a pointer.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>(For more about these operators, see <bpt id="p1">[</bpt>Expressions with Pointer-to-Member Operators<ept id="p1">](../cpp/pointer-to-member-operators-dot-star-and-star.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The result of the pointer-to-member operators is the type of the member — in this case, <bpt id="p1">**</bpt>char <ph id="ph1">\*</ph><ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following code fragment invokes the member functions <ph id="ph1">`GetCaption`</ph> and <ph id="ph2">`SetCaption`</ph> using pointers to members:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Restrictions on Pointers to Members</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The address of a static member is not a pointer to a member.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It is a regular pointer to the one instance of the static member.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Because only one instance of a static member exists for all objects of a given class, the ordinary address-of <bpt id="p1">**</bpt>(&amp;)<ept id="p1">**</ept> and dereference <bpt id="p2">**</bpt>(<ph id="ph1">\*</ph>)<ept id="p2">**</ept> operators can be used.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Pointers to Members and Virtual Functions</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Invoking a virtual function through a pointer-to-member function works as if the function had been called directly; the correct function is looked up in the v-table and invoked.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The key to virtual functions working, as always, is invoking them through a pointer to a base class.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>(For more information about virtual functions, see <bpt id="p1">[</bpt>Virtual Functions<ept id="p1">](../cpp/virtual-functions.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The following code shows how to invoke a virtual function through a pointer-to-member function:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>C++ Abstract Declarators</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>