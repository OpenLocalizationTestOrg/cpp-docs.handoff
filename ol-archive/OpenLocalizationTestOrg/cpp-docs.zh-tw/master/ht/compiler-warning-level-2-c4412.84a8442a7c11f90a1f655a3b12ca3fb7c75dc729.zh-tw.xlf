<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44f35ea725041db880c4f87cfe5283176aaa22d7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\compiler-warnings\compiler-warning-level-2-c4412.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2893d5ef554a590489ca6dd839ff7de983d6ea49</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">061b77236bef313ed9136ce5f6dd0364063e6291</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4412 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiler Warning (level 2) C4412</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>'function' : function signature contains type 'type'; C++ objects are unsafe to pass between pure code and mixed or native.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The compiler detected a potentially unsafe situation that could result in a runtime error: a call is being made from a <bpt id="p1">**</bpt>/clr:pure<ept id="p1">**</ept> compiland to a function that was imported via dllimport and the function signature contains an unsafe type.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A type is unsafe if it contains a member function or has a data member that is an unsafe type or an indirection to an unsafe type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This is unsafe because of the difference in the default calling conventions between pure and native code (or mixed native and managed).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When importing (via <ph id="ph1">`dllimport`</ph>) a function into a <bpt id="p1">**</bpt>/clr:pure<ept id="p1">**</ept> compiland, ensure that the declarations of each type in the signature are identical to those in the compiland that exports the function (being especially careful about differences in implicit calling conventions).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A virtual member function is especially prone to give unexpected results.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>However, even a non-virtual function should be tested to ensure that you get the correct results.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you are sure that you are getting the correct results, you can ignore this warning.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information on <bpt id="p1">**</bpt>/clr:pure<ept id="p1">**</ept>, see <bpt id="p2">[</bpt>How to: Migrate to /clr:pure (C++/CLI)<ept id="p2">](../../dotnet/how-to-migrate-to-clr-pure-cpp-cli.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>C4412 is off by default.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Compiler Warnings That Are Off by Default<ept id="p1">](../../preprocessor/compiler-warnings-that-are-off-by-default.md)</ept> and <bpt id="p2">[</bpt>dllexport, dllimport<ept id="p2">](../../cpp/dllexport-dllimport.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To resolve this warning, remove all functions from the type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The following sample generates C4412.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following sample is a header file that declares two types.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Unsafe`</ph> type is unsafe because it has a member function.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This sample exports functions with the types defined in the header file.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The default calling convention in a <bpt id="p1">**</bpt>/clr:pure<ept id="p1">**</ept> compilation is different from a native compilation.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When C4412.h is included, <ph id="ph1">`Test`</ph> will be default to <ph id="ph2">`__clrcall`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If you compile and run this program (do not use <bpt id="p1">**</bpt>/c<ept id="p1">**</ept>), the program will throw an exception.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following sample generates C4412.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>