<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab3888083d4d20f57be4f2a0a9005f2ea9ac5e09</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\atl-copy-policy-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9dfbea4fa431215066f4875ba96d5ae6ca7104cc</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d94d9aed7c094c605bfa1716652cbaa7f2021b32</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ATL Copy Policy Classes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ATL Copy Policy Classes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Copy policy classes are <bpt id="p1">[</bpt>utility classes<ept id="p1">](../atl/utility-classes.md)</ept> used to initialize, copy, and delete data.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Copy policy classes allow you to define copy semantics for any type of data, and to define conversions between different data types.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>ATL uses copy policy classes in its implementations of the following templates:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>CComEnumImpl</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>IEnumOnSTLImpl</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>ICollectionOnSTLImpl</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>By encapsulating the information needed to copy or convert data in a copy policy class that can be passed as a template argument, the ATL developers have provided for extreme reusability of these classes.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For example, if you need to implement a collection using any arbitrary data type, all you need to provide is the appropriate copy policy; you never have to touch the code that implements the collection.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>By definition, a class that provides the following static functions is a copy policy class:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can replace the types <ph id="ph1">`DestinationType`</ph> and <bpt id="p1">*</bpt>SourceType<ept id="p1">*</ept> with arbitrary data types for each copy policy.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Although you can define copy policy classes for any arbitrary data types, use of the classes in ATL code should limit the types that make sense.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example, when using a copy policy class with ATL's collection or enumerator implementations, <ph id="ph1">`DestinationType`</ph> must be a type that can be used as a parameter in a COM interface method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>init<ept id="p1">**</ept> to initialize data, <bpt id="p2">**</bpt>copy<ept id="p2">**</ept> to copy data, and <bpt id="p3">**</bpt>destroy<ept id="p3">**</ept> to free the data.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The precise meaning of initialization, copying, and destruction are the domain of the copy policy class and will vary depending on the data types involved.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>There are two requirements on the use and implementation of a copy policy class:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The first parameter to <bpt id="p1">**</bpt>copy<ept id="p1">**</ept> must only receive a pointer to data that you have previously initialized using <bpt id="p2">**</bpt>init<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>destroy<ept id="p1">**</ept> must only ever receive a pointer to data that you have previously initialized using <bpt id="p2">**</bpt>init<ept id="p2">**</ept> or copied via <bpt id="p3">**</bpt>copy<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Standard Implementations</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>ATL provides two copy policy classes in the form of the <bpt id="p1">**</bpt>_Copy<ept id="p1">**</ept> and <bpt id="p2">**</bpt>_CopyInterface<ept id="p2">**</ept> template classes:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>_Copy<ept id="p1">**</ept> class allows homogeneous copying only (not conversion between data types) since it only offers a single template parameter to specify both <ph id="ph1">`DestinationType`</ph> and <bpt id="p2">*</bpt>SourceType<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The generic implementation of this template contains no initialization or destruction code and uses <ph id="ph1">`memcpy`</ph> to copy the data.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>ATL also provides specializations of <bpt id="p1">**</bpt>_Copy<ept id="p1">**</ept> for <bpt id="p2">**</bpt>VARIANT<ept id="p2">**</ept>, <ph id="ph1">`LPOLESTR`</ph>, <bpt id="p3">**</bpt>OLEVERB<ept id="p3">**</ept>, and <bpt id="p4">**</bpt>CONNECTDATA<ept id="p4">**</ept> data types.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>_CopyInterface<ept id="p1">**</ept> class provides an implementation for copying interface pointers following standard COM rules.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Once again this class allows only homogeneous copying, so it uses simple assignment and a call to <ph id="ph1">`AddRef`</ph> to perform the copy.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Custom Implementations</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Typically, you'll need to define your own copy policy classes for heterogeneous copying (that is, conversion between data types).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For some examples of custom copy policy classes, look at the files VCUE_Copy.h and VCUE_CopyString.h in the <bpt id="p1">[</bpt>ATLCollections<ept id="p1">](../visual-cpp-samples.md)</ept> sample.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>These files contain two template copy policy classes, <ph id="ph1">`GenericCopy`</ph> and <ph id="ph2">`MapCopy`</ph>, plus a number of specializations of <ph id="ph3">`GenericCopy`</ph> for different data types.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>GenericCopy</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>allows you to specify the <bpt id="p1">*</bpt>SourceType<ept id="p1">*</ept> and <ph id="ph1">`DestinationType`</ph> as template arguments.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Here's the most general form of the <ph id="ph1">`GenericCopy`</ph> class from VCUE_Copy.h:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#30</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>VCUE_Copy.h also contains the following specializations of this class: <ph id="ph1">`GenericCopy&lt;BSTR&gt;`</ph>, <ph id="ph2">`GenericCopy&lt;VARIANT, BSTR&gt;`</ph>, <ph id="ph3">`GenericCopy&lt;BSTR, VARIANT&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>VCUE_CopyString.h contains specializations for copying from <bpt id="p1">**</bpt>std::string<ept id="p1">**</ept>s: <ph id="ph1">`GenericCopy&lt;std::string&gt;`</ph>, <ph id="ph2">`GenericCopy&lt;VARIANT, std::string&gt;`</ph>, and <ph id="ph3">`GenericCopy&lt;BSTR, std::string&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You could enhance <ph id="ph1">`GenericCopy`</ph> by providing further specializations of your own.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>MapCopy</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>assumes that the data being copied is stored into an STL-style map, so it allows you to specify the type of map in which the data is stored and the destination type.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The implementation of the class just uses the typedefs supplied by the <bpt id="p1">*</bpt>MapType<ept id="p1">*</ept> class to determine the type of the source data and to call the appropriate <ph id="ph1">`GenericCopy`</ph> class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>No specializations of this class are needed.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>NVC_ATL_COM#31</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Implementing an STL-Based Collection</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>ATLCollections Sample</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>