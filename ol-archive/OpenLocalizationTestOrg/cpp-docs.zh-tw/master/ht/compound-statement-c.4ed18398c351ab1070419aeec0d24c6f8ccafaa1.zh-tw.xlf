<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbdeaf7bd6cea4bb182bacc96aa502fca9bb793b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\compound-statement-c.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fffc353496973fbec85c9fc75d148c07cc0a6510</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">666228ba23d4d1bdf11441c8a3c589b06da00987</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compound Statement (C) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compound Statement (C)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A compound statement (also called a "block") typically appears as the body of another statement, such as the <bpt id="p1">**</bpt>if<ept id="p1">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Declarations and Types<ept id="p1">](../c-language/declarations-and-types.md)</ept> describes the form and meaning of the declarations that can appear at the head of a compound statement.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>compound-statement<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>{<ept id="p1">**</ept>  <bpt id="p2">*</bpt>declaration-list<ept id="p2">*</ept> opt<bpt id="p3">*</bpt>statement-list<ept id="p3">*</ept>opt<bpt id="p4">**</bpt>}<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>declaration-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>declaration</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>declaration-list declaration</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>statement-list<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>s<bpt id="p1">*</bpt>tatement<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>statement-list statement</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If there are declarations, they must come before any statements.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The scope of each identifier declared at the beginning of a compound statement extends from its declaration point to the end of the block.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It is visible throughout the block unless a declaration of the same identifier exists in an inner block.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Identifiers in a compound statement are presumed <bpt id="p1">**</bpt>auto<ept id="p1">**</ept> unless explicitly declared otherwise with <bpt id="p2">**</bpt>register<ept id="p2">**</ept>, <bpt id="p3">**</bpt>static<ept id="p3">**</ept>, or <ph id="ph1">`extern`</ph>, except functions, which can only be <ph id="ph2">`extern`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can leave off the <ph id="ph1">`extern`</ph> specifier in function declarations and the function will still be <ph id="ph2">`extern`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Storage is not allocated and initialization is not permitted if a variable or function is declared in a compound statement with storage class <ph id="ph1">`extern`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The declaration refers to an external variable or function defined elsewhere.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Variables declared in a block with the <bpt id="p1">**</bpt>auto<ept id="p1">**</ept> or <bpt id="p2">**</bpt>register<ept id="p2">**</ept> keyword are reallocated and, if necessary, initialized each time the compound statement is entered.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These variables are not defined after the compound statement is exited.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If a variable declared inside a block has the <bpt id="p1">**</bpt>static<ept id="p1">**</ept> attribute, the variable is initialized when program execution begins and keeps its value throughout the program.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Storage Classes<ept id="p1">](../c-language/c-storage-classes.md)</ept> for information about <bpt id="p2">**</bpt>static<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This example illustrates a compound statement:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>In this example, if <ph id="ph1">`i`</ph> is greater than 0, all statements inside the compound statement are executed in order.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Statements</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>