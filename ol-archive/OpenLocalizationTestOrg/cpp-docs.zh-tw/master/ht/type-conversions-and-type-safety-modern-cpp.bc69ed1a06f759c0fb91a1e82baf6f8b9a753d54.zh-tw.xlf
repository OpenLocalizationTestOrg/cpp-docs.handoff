<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f590e44607f3e6414cb94ff9067902204d3d6d7d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\type-conversions-and-type-safety-modern-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26b5b5c62d1aceca3e0823095b359bd454a37763</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ab801874b1847f354593a5c8c6805c6bfdad552d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type Conversions and Type Safety (Modern C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type Conversions and Type Safety (Modern C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document identifies common type conversion problems and describes how you can avoid them in your C++ code.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When you write a C++ program, it's important to ensure that it's type-safe.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This means that every variable, function argument, and function return value is storing an acceptable kind of data, and that operations that involve values of different types "make sense" and don't cause data loss, incorrect interpretation of bit patterns, or memory corruption.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A program that never explicitly or implicitly converts values from one type to another is type-safe by definition.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, type conversions, even unsafe conversions, are sometimes required.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, you might have to store the result of a floating point operation in a variable of type <ph id="ph1">`int`</ph>, or you might have to pass the value in an unsigned <ph id="ph2">`int`</ph> to a function that takes a signed <ph id="ph3">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Both examples illustrate unsafe conversions because they may cause data loss or re-interpretation of a value.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>When the compiler detects an unsafe conversion, it issues either an error or a warning.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An error stops compilation; a warning allows compilation to continue but indicates a possible error in the code.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>However, even if your program compiles without warnings, it still may contain code that leads to implicit type conversions that produce incorrect results.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Type errors can also be introduced by explicit conversions, or casts, in the code.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Implicit type conversions</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When an expression contains operands of different built-in types, and no explicit casts are present, the compiler uses built-in <bpt id="p1">*</bpt>standard conversions<ept id="p1">*</ept> to convert one of the operands so that the types match.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The compiler tries the conversions in a well-defined sequence until one succeeds.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the selected conversion is a promotion, the compiler does not issue a warning.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the conversion is a narrowing, the compiler issues a warning about possible data loss.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Whether actual data loss occurs depends on the actual values involved, but we recommend that you treat this warning as an error.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If a user-defined type is involved, then the compiler tries to use the conversions that you have specified in the class definition.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If it can't find an acceptable conversion, the compiler issues an error and does not compile the program.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information about the rules that govern the standard conversions, see <bpt id="p1">[</bpt>Standard Conversions<ept id="p1">](../cpp/standard-conversions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information about user-defined conversions, see <bpt id="p1">[</bpt>User-Defined Conversions (C++/CLI)<ept id="p1">](../dotnet/user-defined-conversions-cpp-cli.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Widening conversions (promotion)</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In a widening conversion, a value in a smaller variable is assigned to a larger variable with no loss of data.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Because widening conversions are always safe, the compiler performs them silently and does not issue warnings.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following conversions are widening conversions.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>From</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Any signed or unsigned integral type except <ph id="ph1">`long long`</ph> or</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>or</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Any other built-in type</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>or</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`long`</ph>,</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Narrowing conversions (coercion)</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The compiler performs narrowing conversions implicitly, but it warns you about potential data loss.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Take these warnings very seriously.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you are certain that no data loss will occur because the values in the larger variable will always fit in the smaller variable, then add an explicit cast so that the compiler will no longer issue a warning.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If you are not sure that the conversion is safe, add to your code some kind of runtime check to handle possible data loss so that it does not cause your program to produce incorrect results.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Any conversion from a floating point type to an integral type is a narrowing conversion because the fractional portion of the floating point value is discarded and lost.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following code example shows some implicit narrowing conversions, and the warnings that the compiler issues for them.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Signed - unsigned conversions</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A signed integral type and its unsigned counterpart are always the same size, but they differ in how the bit pattern is interpreted for value transformation.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates what happens when the same bit pattern is interpreted as a signed value and as an unsigned value.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The bit pattern stored in both <ph id="ph1">`num`</ph> and <ph id="ph2">`num2`</ph> never changes from what is shown in the earlier illustration.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Notice that values are reinterpreted in both directions.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If your program produces odd results in which the sign of the value seems inverted from what you expect, look for implicit conversions between signed and unsigned integral types.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In the following example, the result of the expression ( 0 – 1) is implicitly converted from <ph id="ph1">`int`</ph> to <ph id="ph2">`unsigned int`</ph> when it's stored in <ph id="ph3">`num`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>This causes the bit pattern to be reinterpreted.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The compiler does not warn about implicit conversions between signed and unsigned integral types.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Therefore, we recommend that you avoid signed-to-unsigned conversions altogether.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If you can't avoid them, then add to your code a runtime check to detect whether the value being converted is greater than or equal to zero and less than or equal to the maximum value of the signed type.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Values in this range will transfer from signed to unsigned or from unsigned to signed without being reinterpreted.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Pointer conversions</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In many expressions, a C-style array is implicitly converted to a pointer to the first element in the array, and constant conversions can happen silently.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Although this is convenient, it's also potentially error-prone.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For example, the following badly designed code example seems nonsensical, and yet it will compile in Visual C++ and produces a result of 'p'.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>First, the "Help" string constant literal is converted to a <ph id="ph1">`char*`</ph> that points to the first element of the array; that pointer is then incremented by three elements so that it now points to the last element 'p'.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Explicit conversions (casts)</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>By using a cast operation, you can instruct the compiler to convert a value of one type to another type.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The compiler will raise an error in some cases if the two types are completely unrelated, but in other cases it will not raise an error even if the operation is not type-safe.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Use casts sparingly because any conversion from one type to another is a potential source of program error.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>However, casts are sometimes required, and not all casts are equally dangerous.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>One effective use of a cast is when your code performs a narrowing conversion and you know that the conversion is not causing your program to produce incorrect results.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>In effect, this tells the compiler that you know what you are doing and to stop bothering you with warnings about it.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Another use is to cast from a pointer-to-derived class to a pointer-to-base class.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Another use is to cast away the <ph id="ph1">`const`</ph>-ness of a variable to pass it to a function that requires a non-<ph id="ph2">`const`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Most of these cast operations involve some risk.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In C-style programming, the same C-style cast operator is used for all kinds of casts.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The C-style cast operator is identical to the call operator () and is therefore inconspicuous in code and easy to overlook.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Both are bad because they're difficult to recognize at a glance or search for, and they're disparate enough to invoke any combination of <ph id="ph1">`static`</ph>, <ph id="ph2">`const`</ph>, and <ph id="ph3">`reinterpret_cast`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Figuring out what an old-style cast actually does can be difficult and error-prone.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For all these reasons, when a cast is required, we recommend that you use one of the following C++ cast operators, which in some cases are significantly more type-safe, and which express much more explicitly the programming intent:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>, for casts that are checked at compile time only.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>returns an error if the compiler detects that you are trying to cast between types that are completely incompatible.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>You can also use it to cast between pointer-to-base and pointer-to-derived, but the compiler can't always tell whether such conversions will be safe at runtime.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>static_cast<ept id="p1">](../cpp/static-cast-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>, for safe, runtime-checked casts of pointer-to-base to pointer-to-derived.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`dynamic_cast`</ph> is safer than a <ph id="ph2">`static_cast`</ph> for downcasts, but the runtime check incurs some overhead.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>dynamic_cast<ept id="p1">](../cpp/dynamic-cast-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>, for casting away the <ph id="ph1">`const`</ph>-ness of a variable, or converting a non-<ph id="ph2">`const`</ph> variable to be <ph id="ph3">`const`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Casting away <ph id="ph1">`const`</ph>-ness by using this operator is just as error-prone as is using a C-style cast, except that with <ph id="ph2">`const-cast`</ph> you are less likely to perform the cast accidentally.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Sometimes you have to cast away the <ph id="ph1">`const`</ph>-ness of a variable, for example, to pass a <ph id="ph2">`const`</ph> variable to a function that takes a non-<ph id="ph3">`const`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The following example shows how to do this.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>const_cast<ept id="p1">](../cpp/const-cast-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>, for casts between unrelated types such as <ph id="ph1">`pointer`</ph> to <ph id="ph2">`int`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>This cast operator is not used as often as the others, and it's not guaranteed to be portable to other compilers.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following example illustrates how <ph id="ph1">`reinterpret_cast`</ph> differs from <ph id="ph2">`static_cast`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>reinterpret_cast Operator<ept id="p1">](../cpp/reinterpret-cast-operator.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>C++ Type System</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Welcome Back to C++</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>C++ Language Reference</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>