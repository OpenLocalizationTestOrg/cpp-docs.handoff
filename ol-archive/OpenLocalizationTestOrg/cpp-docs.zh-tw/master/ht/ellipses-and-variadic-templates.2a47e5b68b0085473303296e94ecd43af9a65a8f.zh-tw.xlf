<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29695b6cec273fcb4574f0c84e8b851f5d3d43d1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\ellipses-and-variadic-templates.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ce8d5c0b6c34f0e678a3efb2ee6d622ed7d24ef5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2ae66b9310ce604a97991a9310f104f8afe1892</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Ellipses and Variadic Templates | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Ellipses and Variadic Templates</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article shows how to use the ellipsis (<ph id="ph1">`...`</ph>) with C++ variadic templates.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The ellipsis has had many uses in C and C++.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These include variable argument lists for functions.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`printf()`</ph> function from the C Runtime Library is one of the most well-known examples.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>variadic template<ept id="p1">*</ept> is a class or function template that supports an arbitrary number of arguments.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This mechanism is especially useful to C++ library developers because you can apply it to both class templates and function templates, and thereby provide a wide range of type-safe and non-trivial functionality and flexibility.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An ellipsis is used in two ways by variadic templates.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To the left of the parameter name, it signifies a <bpt id="p1">*</bpt>parameter pack<ept id="p1">*</ept>, and to the right of the parameter name, it expands the parameter packs into separate names.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Here's a basic example of <bpt id="p1">*</bpt>variadic template class<ept id="p1">*</ept> definition syntax:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For both parameter packs and expansions, you can add whitespace around the ellipsis, based on your preference, as shown in these examples:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Or this:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Notice that this article uses the convention that's shown in the first example (the ellipsis is attached to <ph id="ph1">`typename`</ph>).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the preceding examples, <ph id="ph1">`Arguments`</ph> is a parameter pack.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The class <ph id="ph1">`classname`</ph> can accept a variable number of arguments, as in these examples:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>By using a variadic template class definition, you can also require at least one parameter:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Here's a basic example of <bpt id="p1">*</bpt>variadic template function<ept id="p1">*</ept> syntax:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Arguments`</ph> parameter pack is then expanded for use, as shown in the next section, <bpt id="p1">**</bpt>Understanding variadic templates<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Other forms of variadic template function syntax are possibleâ€”including, but not limited to, these examples:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Specifiers like <ph id="ph1">`const`</ph> are also allowed:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>As with variadic template class definitions, you can make functions that require at least one parameter:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Variadic templates use the <ph id="ph1">`sizeof...()`</ph> operator (unrelated to the older <ph id="ph2">`sizeof()`</ph> operator):</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>More about ellipsis placement</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Previously, this article described ellipsis placement that defines parameter packs and expansions as "to the left of the parameter name, it signifies a parameter pack, and to the right of the parameter name, it expands the parameter packs into separate names".</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This is technically true but can be confusing in translation to code.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Consider:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In a template-parameter-list (<ph id="ph1">`template &lt;parameter-list&gt;`</ph>), <ph id="ph2">`typename...`</ph> introduces a template parameter pack.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In a parameter-declaration-clause (<ph id="ph1">`func(parameter-list)`</ph>), a "top-level" ellipsis introduces a function parameter pack, and the ellipsis positioning is important:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Where the ellipsis appears immediately after a parameter name, you have a parameter pack expansion.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A good way to illustrate the variadic template function mechanism is to use it in a re-write of some of the functionality of <ph id="ph1">`printf`</ph>:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Most implementations that incorporate variadic template functions use recursion of some form, but it's slightly different from traditional recursion.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Traditional recursion involves a function calling itself by using the same signature.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>(It may be overloaded or templated, but the same signature is chosen each time.) Variadic recursion involves calling a variadic function template by using differing (almost always decreasing) numbers of arguments, and thereby stamping out a different signature every time.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A "base case" is still required, but the nature of the recursion is different.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>