<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb82b6a6eaecbeac1fd651bed3d6dbfabe2b279e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\character-sets2.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba6e94ac088831abd4036d0ef61affc783a410da</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2054ffd4c1bdc2d5c02eaaa3a0bb32509fba9e59</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Character Sets2 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Character Sets</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The text of a C++ program is stored in source files that use a particular character encoding.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The C++ standard specifies a basic source character set for source files and a basic execution character set for compiled files.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Visual C++ allows an additional set of locale-specific characters to be used in source files and compiled files.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Character sets</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The C++ standard specifies a <bpt id="p1">*</bpt>basic  source character set<ept id="p1">*</ept> that may be used in source files.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To represent characters outside of this set, additional characters can be specified by using a <bpt id="p1">*</bpt>universal character name<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When compiled, the <bpt id="p1">*</bpt>basic execution character set<ept id="p1">*</ept> and <bpt id="p2">*</bpt>basic execution wide-character set<ept id="p2">*</ept> represent the characters and strings that can appear in a program.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Visual C++ implementation allows additional characters in source code and compiled code.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Basic source character set</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>basic  source character set<ept id="p1">*</ept> consists of  96 characters that may be used in source files.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This set includes the space character, horizontal tab, vertical tab, form feed and new-line control characters, and this set of graphical characters:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Visual C++ includes the <ph id="ph1">`$`</ph> character as a member of the basic source character set.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Visual C++ also allows an additional set of characters to be used in source files, based on the file encoding.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>By default, Visual Studio stores source files by using the default codepage.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When source files are saved by using a locale-specific codepage or a Unicode codepage, Visual C++ allows you to use any of the characters of that code page in your source code, except for the control codes not explicitly allowed in the basic source character set.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, you can put Japanese characters in comments, identifiers, or string literals if you save the file using a Japanese codepage.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Visual C++  does not allow character sequences that cannot be translated into valid multibyte characters or Unicode code points.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Depending on compiler options, not all allowed characters may appear in identifiers.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Identifiers<ept id="p1">](../cpp/identifiers-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Universal character names</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Because C++ programs can use many more characters than the ones specified in the basic source character set, you can specify these characters in a portable way by using <bpt id="p1">*</bpt>universal character names<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A universal character name consists of a sequence of characters that represent a Unicode code point.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>These take two forms.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`\UNNNNNNNN`</ph> to represent a Unicode code point of the form U+NNNNNNNN, where NNNNNNNN is the eight-digit hexadecimal code point number.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Use four-digit <ph id="ph1">`\uNNNN`</ph> to represent a Unicode code point of the form U+0000NNNN.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Universal character names can be used in identifiers and in string and character literals.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A universal character name cannot be used to represent a surrogate code point in the range 0xD800-0xDFFF.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Instead, use the desired code point; the compiler automatically generates any required surrogates.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Additional restrictions apply to the universal character names that can be used in identifiers.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Identifiers<ept id="p1">](../cpp/identifiers-cpp.md)</ept> and <bpt id="p2">[</bpt>String and Character Literals<ept id="p2">](../cpp/string-and-character-literals-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The Visual C++ compiler treats a character in universal character name form and literal form interchangeably.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For example, you can declare an identifier using universal character name form, and use it in literal form:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The format of extended characters on the Windows clipboard is specific to application locale settings.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Cutting and pasting these characters into your code from another application may introduce unexpected character encodings.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This can result in parsing errors with no visible cause in your code.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>We recommend that you set your source file encoding to a Unicode codepage before pasting extended characters.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>We also recommend that you use an IME or the Character Map app to generate extended characters.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Basic execution character set</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>basic execution character set<ept id="p1">*</ept> and the <bpt id="p2">*</bpt>basic execution wide-character set<ept id="p2">*</ept> consist of all the characters in the basic source character set, and the control characters that represent alert, backspace, carriage return, and the null character.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>execution character set<ept id="p1">*</ept> and <bpt id="p2">*</bpt>execution wide-character set<ept id="p2">*</ept> are supersets of the basic sets.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>They include the implementation-defined source characters outside the basic source character set.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The execution character set has a locale-specific representation.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>