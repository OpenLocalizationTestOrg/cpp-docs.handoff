<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c663e1d3ae57d1962840e4e83cea111bcce44949</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\how-to-create-and-use-weak-ptr-instances.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e8f66f3a25e353fa8fae81ae95f7f51968713514</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a12ba7e10360353460fe277e426532a14619cffc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Create and Use weak_ptr Instances | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create and Use weak_ptr Instances</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Sometimes an object must store a way to access the underlying object of a <ph id="ph1">`shared_ptr`</ph> without causing the reference count to be incremented.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Typically, this situation occurs when you have cyclic references between <ph id="ph1">`shared_ptr`</ph> instances.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The best design is to avoid shared ownership of pointers whenever you can.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>However, if you must have shared ownership of <ph id="ph1">`shared_ptr`</ph> instances, avoid cyclic references between them.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When cyclic references are unavoidable, or even preferable for some reason, use <ph id="ph1">`weak_ptr`</ph> to give one or more of the owners a weak reference to another <ph id="ph2">`shared_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>By using a <ph id="ph1">`weak_ptr`</ph>, you can create a <ph id="ph2">`shared_ptr`</ph> that joins to an existing set of related instances, but only if the underlying memory resource is still valid.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`weak_ptr`</ph> itself does not participate in the reference counting, and therefore, it cannot prevent the reference count from going to zero.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, you can use a <ph id="ph1">`weak_ptr`</ph> to try to obtain a new copy of the <ph id="ph2">`shared_ptr`</ph> with which it was initialized.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the memory has already been deleted, a <bpt id="p1">**</bpt>bad_weak_ptr<ept id="p1">**</ept> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the memory is still valid, the new shared pointer increments the reference count and guarantees that the memory will be valid as long as the <ph id="ph1">`shared_ptr`</ph> variable stays in scope.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following code example shows a case where <ph id="ph1">`weak_ptr`</ph> is used to ensure proper deletion of objects that have circular dependencies.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>As you examine the example, assume that it was created only after alternative solutions were considered.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Controller`</ph> objects represent some aspect of a machine process, and they operate independently.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Each controller must be able to query the status of the other controllers at any time, and each one contains a private <ph id="ph1">`vector&lt;weak_ptr&lt;Controller&gt;&gt;`</ph> for this purpose.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Each vector contains a circular reference, and therefore, <ph id="ph1">`weak_ptr`</ph> instances are used instead of <ph id="ph2">`shared_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>stl_smart_pointers#222</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>As an experiment, modify the vector <ph id="ph1">`others`</ph> to be a <ph id="ph2">`vector&lt;shared_ptr&lt;Controller&gt;&gt;`</ph>, and then in the output, notice that no destructors are invoked when <ph id="ph3">`TestRun`</ph> returns.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Smart Pointers</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>