<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-tw">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8515fc613f95ae5d6395e33b49482488bcc488d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\porting\introduction-to-visual-cpp-for-unix-users.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9ee2d77f47e192f39aedd8fb7a17d7caf8f1cdb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d16c1ce7486cf5f85a00a31bc9f1c04f97cbfa3e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Introduction to Visual C++ for UNIX Users | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Introduction to Visual C++ for UNIX Users</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic provides information for UNIX users who are new to <ph id="ph1">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph> and want to become productive with <ph id="ph2">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Getting Started on the Command Line</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph> from the command line in a similar way that you would use a UNIX command-line environment.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You compile from the command prompt with the command-line C and C++ compiler (CL.EXE) and tools, including NMAKE.EXE, the Microsoft version of the UNIX make utility.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>In UNIX, commands are installed in a common folder, such as /usr/bin.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph>, the command-line tools are installed in your installation directory at VC\bin (on a typical installation at Program Files\Microsoft Visual Studio 8\VC\bin).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To use the command-line tools, run vsvars32.bat, which is located in your installation directory at Common7\Tools.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This adds your bin directory to your path and sets up other paths that are necessary to compile Visual C++ programs from the command line.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Building on the Command Line<ept id="p1">](../build/building-on-the-command-line.md)</ept> and <bpt id="p2">[</bpt>Walkthrough: Compiling a Native C++ Program on the Command Line<ept id="p2">](../build/walkthrough-compiling-a-native-cpp-program-on-the-command-line.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you open a command prompt with the <bpt id="p1">**</bpt>Visual Studio Command Line Prompt<ept id="p1">**</ept> from the <bpt id="p2">**</bpt>Start<ept id="p2">**</ept> menu, then vsvars32.bat is run for you.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To take advantage of more powerful features, such as the Visual Studio debugger, statement completion, and so on, you need to use the development environment.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Debugging Your Code</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If you use the command line and run your applications on your development workstation, you will see that a dialog box to run the <ph id="ph1">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph> debugger is displayed when your code encounters a memory access violation, unhandled exception, or other unrecoverable errors.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you click <bpt id="p1">**</bpt>OK<ept id="p1">**</ept>, then the Visual Studio development environment is started, and the debugger will open to the point of failure.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It is possible to debug your applications this way, and, in this case, your source code would only be available if you compiled with the <bpt id="p1">[</bpt>/Z7, /Zi, /ZI (Debug Information Format)<ept id="p1">](../build/reference/z7-zi-zi-debug-information-format.md)</ept> switch.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Debugging Native Code<ept id="p1">](/visualstudio/debugger/debugging-native-code)</ept> and <bpt id="p2">[</bpt>Using the Visual Studio IDE for C++ Desktop Development<ept id="p2">](../ide/using-the-visual-studio-ide-for-cpp-desktop-development.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Using the Development Environment</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It is easier to use the development environment to edit and build your source code in a <bpt id="p1">*</bpt>project<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A project is a collection of source and related files that will be compiled into a single unit, such as a library or executable.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A project also contains information on how the files are to be built.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Information about projects is stored in a project file with the extension .prj.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>An application that consists of multiple libraries and executables, each potentially built with a different set of compiler options or even in a different language, are stored in multiple projects that are part of a single <bpt id="p1">*</bpt>solution<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A solution is an abstraction for a container to group multiple projects together.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Information about solutions is stored in a solution file with the extension .sln.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Solutions and Projects in Visual Studio<ept id="p1">](/visualstudio/ide/solutions-and-projects-in-visual-studio)</ept> and <bpt id="p2">[</bpt>Using the Visual Studio IDE for C++ Desktop Development<ept id="p2">](../ide/using-the-visual-studio-ide-for-cpp-desktop-development.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Importing Your Existing Code</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph> to use existing code that is set up to compile with or without a makefile and put it into a <ph id="ph2">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph> project.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">**</bpt>Create Project From Existing Code Files Wizard<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Create a C++ Project from Existing Code<ept id="p1">](../ide/how-to-create-a-cpp-project-from-existing-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Creating a New Project</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>You can create new projects in the development environment.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>provides numerous templates that provide standard code for various common projects.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>You can use application wizards to generate projects with code outlines for various application types.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can start with an empty project by using the <bpt id="p1">**</bpt>Console Application (Win32) Wizard<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>Empty Project<ept id="p1">**</ept> check box.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You can then add new and existing files to the project later.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When you create a project, you must name the project.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>By default, the project name equals the name of the dynamic-link library (DLL) or executable that is build from the project.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Creating Solutions and Projects<ept id="p1">](/visualstudio/ide/creating-solutions-and-projects)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Microsoft-Specific Modifiers</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Visual C++ contains several extensions to the standard C++ programming language.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>These extensions are used to specify storage class attributes, function calling conventions, and based addressing, among other things.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For a complete list of all Visual C++ extensions, see <bpt id="p1">[</bpt>Microsoft-Specific Modifiers<ept id="p1">](../cpp/microsoft-specific-modifiers.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>You can disable all Microsoft-specific extensions to C++ by using the <bpt id="p1">**</bpt>/Za<ept id="p1">**</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This option is recommended if you want to write code to run on multiple platforms.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For more information on the <bpt id="p1">**</bpt>/Za<ept id="p1">**</ept> compiler option, see <bpt id="p2">[</bpt>/Za, /Ze (Disable Language Extensions)<ept id="p2">](../build/reference/za-ze-disable-language-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For more information on Visual C++ conformance, see <bpt id="p1">[</bpt>Nonstandard Behavior<ept id="p1">](../cpp/nonstandard-behavior.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Precompiled Headers</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The Microsoft C and C++ compilers provide options for precompiling any C or C++ code, including inline code.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Using this performance feature, you can compile a stable body of code, store the compiled state of the code in a file, and, during subsequent compilations, combine the precompiled code with code that is still under development.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Each subsequent compilation is faster because the stable code does not need to be recompiled.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>By default, all precompiled code is specified in the files <bpt id="p1">**</bpt>stdafx.h<ept id="p1">**</ept> and <bpt id="p2">**</bpt>stdafx.cpp<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> wizard will automatically create these files for you unless you deselect the <bpt id="p2">**</bpt>Precompiled header<ept id="p2">**</ept> option.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information on precompiled headers, see <bpt id="p1">[</bpt>Creating Precompiled Header Files<ept id="p1">](../build/reference/creating-precompiled-header-files.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Related Sections</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Porting from UNIX to Win32<ept id="p1">](../porting/porting-from-unix-to-win32.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Visual C++ Guided Tour</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>