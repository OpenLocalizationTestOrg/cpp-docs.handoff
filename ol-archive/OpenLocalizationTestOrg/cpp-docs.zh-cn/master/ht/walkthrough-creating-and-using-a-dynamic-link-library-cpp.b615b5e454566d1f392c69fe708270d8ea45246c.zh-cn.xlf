<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">14f609085f99ab00a1ede94fcc599b0aefc1f60d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\walkthrough-creating-and-using-a-dynamic-link-library-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e648fe787e6803907006ff56e56434e0e6132192</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5f2f2ef6c43836a90cbc55bff48a2a9b9477bc62</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating and Using a Dynamic Link Library (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Creating and Using a Dynamic Link Library (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This step-by-step walkthrough shows how to create a dynamic link library (DLL) for use with a C++ app.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using a library is a great way to reuse code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Rather than re-implementing the same routines in every program that you create, you write them one time and then reference them from apps that require the functionality.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>By putting code in the DLL, you save space in every app that references it, and you can update the DLL without recompiling all of the apps that use it.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about DLLs, see <bpt id="p1">[</bpt>DLLs in Visual C++<ept id="p1">](../build/dlls-in-visual-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This walkthrough covers these tasks:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Create a DLL project.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Add a class to the DLL that exports static functions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Create a console app project.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Use the functions exported by the DLL in the console app.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Run the completed app.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This walkthrough creates a DLL that can be called from apps that use C++ calling conventions.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This requires both the DLL and the client app to be built by using the same compiler toolset, so that the internal naming conventions match.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It's also possible to create DLLs that can be called from apps written in other languages and built using other compilers by using the C calling convention.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information about specifying C linkage, see <bpt id="p1">[</bpt>Exporting C++ Functions for Use in C-Language Executables<ept id="p1">](../build/exporting-cpp-functions-for-use-in-c-language-executables.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For information about how to create DLLs for use with other languages, see <bpt id="p1">[</bpt>Calling DLL Functions from Visual Basic Applications<ept id="p1">](../build/calling-dll-functions-from-visual-basic-applications.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This simple walkthrough uses a combined solution that contains both the DLL and the client app, and uses implicit linking at load-time to import the DLLs functions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A more common situation involves third-party DLLs that are not built as part of your solution, or that use explicit linkage to load the DLLs at run-time rather than at load-time.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For more information about implicit linking and explicit linking, see <bpt id="p1">[</bpt>Determining Which Linking Method to Use<ept id="p1">](../build/determining-which-linking-method-to-use.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This topic assumes that you understand the fundamentals of the C++ language and the basics of using the Visual Studio IDE.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The Visual C++ components must be installed in Visual Studio to use this walkthrough.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To create a dynamic link library (DLL) project</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the left pane of the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog box, expand <bpt id="p2">**</bpt>Installed<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Templates<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Visual C++<ept id="p4">**</ept>, and then select <bpt id="p5">**</bpt>Win32<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In the center pane, select <bpt id="p1">**</bpt>Win32 Console Application<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Specify a name for the project—for example, <bpt id="p1">**</bpt>MathLibrary<ept id="p1">**</ept>—in the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Specify a name for the solution—for example, <bpt id="p1">**</bpt>MathLibraryAndClient<ept id="p1">**</ept>—in the <bpt id="p2">**</bpt>Solution name<ept id="p2">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Overview<ept id="p1">**</ept> page of the <bpt id="p2">**</bpt>Win32 Application Wizard<ept id="p2">**</ept> dialog box, choose the <bpt id="p3">**</bpt>Next<ept id="p3">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Application Settings<ept id="p1">**</ept> page, under <bpt id="p2">**</bpt>Application type<ept id="p2">**</ept>, select <bpt id="p3">**</bpt>DLL<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept> button to create the project.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To add a class to the dynamic link library</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>To create a header file for a new class, on the menu bar, choose <bpt id="p1">**</bpt>Project<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Add New Item<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog box, in the left pane, select <bpt id="p2">**</bpt>Visual C++<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the center pane, select <bpt id="p1">**</bpt>Header File (.h)<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Specify a name for the header file—for example, <bpt id="p1">**</bpt>MathLibrary.h<ept id="p1">**</ept>—and then choose the <bpt id="p2">**</bpt>Add<ept id="p2">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A blank header file is displayed.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Replace the contents of the header file with this code:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This code declares a namespace, <bpt id="p1">**</bpt>MathLibrary<ept id="p1">**</ept>,  that contains a class named <bpt id="p2">**</bpt>Functions<ept id="p2">**</ept> that contains member functions to perform some mathematical operations.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Notice the preprocessor statements at the top of the file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>By default, the New Project template for a DLL adds <ph id="ph1">`PROJECTNAME`</ph>_EXPORTS to the defined preprocessor symbols for the DLL project.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In this example, <bpt id="p1">**</bpt>MATHLIBRARY_EXPORTS<ept id="p1">**</ept> is defined when your <bpt id="p2">**</bpt>MathLibrary<ept id="p2">**</ept> DLL project is built.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When the <bpt id="p1">**</bpt>MATHLIBRARY_EXPORTS<ept id="p1">**</ept> symbol is defined, the <bpt id="p2">**</bpt>MATHLIBRARY_API<ept id="p2">**</ept> symbol sets the <ph id="ph1">`__declspec(dllexport)`</ph> modifier on the member function declarations in this code.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This modifier tells the compiler and linker to export the function or variable from the DLL so that it can be used by other applications.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>MATHLIBRARY_EXPORTS<ept id="p1">**</ept> is undefined—for example, when the header file is included by a client application—<bpt id="p2">**</bpt>MATHLIBRARY_API<ept id="p2">**</ept> defines the <ph id="ph1">`__declspec(dllimport)`</ph> modifier on the member function declarations.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>This modifier optimizes the import of the function in an application.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>dllexport, dllimport<ept id="p1">](../cpp/dllexport-dllimport.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If you are building the DLL project on the command line, use the <bpt id="p1">**</bpt>/D<ept id="p1">**</ept> compiler option to define the <bpt id="p2">**</bpt>MATHLIBRARY_EXPORTS<ept id="p2">**</ept> symbol.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>MathLibrary<ept id="p1">**</ept> project in <bpt id="p2">**</bpt>Solution Explorer<ept id="p2">**</ept>, in the <bpt id="p3">**</bpt>Source Files<ept id="p3">**</ept> folder, open <bpt id="p4">**</bpt>MathLibrary.cpp<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Implement the members of the <bpt id="p1">**</bpt>Functions<ept id="p1">**</ept> class in the source file.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Replace the contents of the <bpt id="p1">**</bpt>MathLibrary.cpp<ept id="p1">**</ept> file with the following code:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To verify that everything is working so far, compile the dynamic link library by choosing <bpt id="p1">**</bpt>Build<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept> on the menu bar.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The output should look something like this:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If you are using an Express edition that does not display a <bpt id="p1">**</bpt>Build<ept id="p1">**</ept> menu, on the menu bar, choose <bpt id="p2">**</bpt>Tools<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Settings<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Expert Settings<ept id="p4">**</ept> to enable it, and then choose <bpt id="p5">**</bpt>Build<ept id="p5">**</ept>, <bpt id="p6">**</bpt>Build Solution<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If you are building a project on the command line, use the <bpt id="p1">**</bpt>/D<ept id="p1">**</ept> compiler option to define your project's <ph id="ph1">`PROJECTNAME`</ph>_EXPORTS preprocessor symbol.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>/LD<ept id="p1">**</ept> compiler option to specify that the output file is to be a DLL.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/MD, /MT, /LD (Use Run-Time Library)<ept id="p1">](../build/reference/md-mt-ld-use-run-time-library.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">**</bpt>/EHsc<ept id="p1">**</ept> compiler option to enable C++ exception handling.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>/EH (Exception Handling Model)<ept id="p1">](../build/reference/eh-exception-handling-model.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Congratulations, you've created a DLL using Visual C++!</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Next, you'll create a client app that uses the functions exported by the DLL.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>To create an app that references the DLL</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>To create a C++ app that uses the DLL that you just created, on the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>In the left pane of the <bpt id="p1">**</bpt>New Project<ept id="p1">**</ept> dialog, expand <bpt id="p2">**</bpt>Installed<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Templates<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Visual C++<ept id="p4">**</ept>, and then select <bpt id="p5">**</bpt>Win32<ept id="p5">**</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In the center pane, select <bpt id="p1">**</bpt>Win32 Console Application<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Specify a name for the project—for example, <bpt id="p1">**</bpt>MathClient<ept id="p1">**</ept>—in the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> box.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Choose the drop-down button at the end of the <bpt id="p1">**</bpt>Solution<ept id="p1">**</ept> control, and then select <bpt id="p2">**</bpt>Add to Solution<ept id="p2">**</ept> from the drop-down list.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This adds the new project to the same solution that contains the DLL.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>OK<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Overview<ept id="p1">**</ept> page of the <bpt id="p2">**</bpt>Win32 Application Wizard<ept id="p2">**</ept> dialog box, choose the <bpt id="p3">**</bpt>Next<ept id="p3">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Application Settings<ept id="p1">**</ept> page, under <bpt id="p2">**</bpt>Application type<ept id="p2">**</ept>, select <bpt id="p3">**</bpt>Console application<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept> button to create the project.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>To use the functionality from the class library in the app</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>When the Win32 Application Wizard finishes, a minimal console application project is created for you.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The name for the main source file is the same as the project name that you chose earlier.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>In this example, it is named <bpt id="p1">**</bpt>MathClient.cpp<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To use the math routines that you created in the DLL, you must reference the DLL in your app.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To do this, under the <bpt id="p1">**</bpt>MathClient<ept id="p1">**</ept> project in <bpt id="p2">**</bpt>Solution Explorer<ept id="p2">**</ept>, select the <bpt id="p3">**</bpt>References<ept id="p3">**</ept> item.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>Project<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Add Reference<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>In older versions of Visual Studio, references are added to your project in a different way.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Select the <bpt id="p1">**</bpt>MathClient<ept id="p1">**</ept> project in <bpt id="p2">**</bpt>Solution Explorer<ept id="p2">**</ept>, and then on the menu bar, choose <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>, <bpt id="p4">**</bpt>References<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog box, expand the <bpt id="p2">**</bpt>Common Properties<ept id="p2">**</ept> node, select <bpt id="p3">**</bpt>Framework and References<ept id="p3">**</ept>, and then choose the <bpt id="p4">**</bpt>Add New Reference<ept id="p4">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For more information about the <bpt id="p1">**</bpt>References<ept id="p1">**</ept> dialog box, see <bpt id="p2">[</bpt>Adding references<ept id="p2">](../ide/adding-references-in-visual-cpp-projects.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Add Reference<ept id="p1">**</ept> dialog box lists the libraries that you can reference.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Projects<ept id="p1">**</ept> tab lists the projects in the current solution and any libraries that they contain.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Projects<ept id="p1">**</ept> tab, select the check box next to <bpt id="p2">**</bpt>MathLibrary<ept id="p2">**</ept>, and then choose the <bpt id="p3">**</bpt>OK<ept id="p3">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>You need the definitions in the MathLibrary.h file to call the DLLs functions from your app.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You could copy the header file into your client app project, but that might lead to changes in one copy that are not reflected in the other.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>To avoid this issue when you reference the header files of the DLL, you can change the included directories path in your project to include the original header.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>To do this, open the <bpt id="p1">**</bpt>Property Pages<ept id="p1">**</ept> dialog box for the <bpt id="p2">**</bpt>MathClient<ept id="p2">**</ept> project.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>In the left pane, expand <bpt id="p1">**</bpt>Configuration Properties<ept id="p1">**</ept>, <bpt id="p2">**</bpt>C/C++<ept id="p2">**</ept> node, and then select <bpt id="p3">**</bpt>General<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>In the center pane, select the drop-down control next to the <bpt id="p1">**</bpt>Additional Include Directories<ept id="p1">**</ept> edit box, and then choose <bpt id="p2">**</bpt><ph id="ph1">\&lt;</ph>Edit...&gt;<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Select the top pane of the <bpt id="p1">**</bpt>Additional Include Directories<ept id="p1">**</ept> dialog box to enable an edit control.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>In the edit control, specify the path to the location of the <bpt id="p1">**</bpt>MathLibrary.h<ept id="p1">**</ept> header file.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Because typing the complete path may be difficult, you can use the browse control (<bpt id="p1">**</bpt>...<ept id="p1">**</ept>) at the end of the edit box to bring up a <bpt id="p2">**</bpt>Select Directory<ept id="p2">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>In the dialog, navigate up one folder level to the <bpt id="p1">**</bpt>MathLibraryAndClient<ept id="p1">**</ept> folder, then select the <bpt id="p2">**</bpt>MathLibrary<ept id="p2">**</ept> folder, and then choose the <bpt id="p3">**</bpt>Select Folder<ept id="p3">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Once you've entered the path to the header file in the <bpt id="p1">**</bpt>Additional Include Directories<ept id="p1">**</ept> dialog box, choose the <bpt id="p2">**</bpt>OK<ept id="p2">**</ept> button to go back to the <bpt id="p3">**</bpt>Property Pages<ept id="p3">**</ept> dialog box, and then choose the <bpt id="p4">**</bpt>OK<ept id="p4">**</ept> button to save your changes.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>You can now include the <bpt id="p1">**</bpt>MathLibrary.h<ept id="p1">**</ept> file and use the <bpt id="p2">**</bpt>Functions<ept id="p2">**</ept> class in your client application.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Replace the contents of <bpt id="p1">**</bpt>MathClient.cpp<ept id="p1">**</ept> by using the following code:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Build the application by choosing <bpt id="p1">**</bpt>Build<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Build Solution<ept id="p2">**</ept> on the menu bar.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The Output window in Visual Studio might contain something like this:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Congratulations, you've created an application that calls functions in a DLL.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Next, you'll run your application to see what it does.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>To run the application</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Since you can't run a DLL, make sure that <bpt id="p1">**</bpt>MathClient<ept id="p1">**</ept> is selected as the default project.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>This is the project that Visual Studio runs when you choose the <bpt id="p1">**</bpt>Start Debugging<ept id="p1">**</ept> or <bpt id="p2">**</bpt>Start Without Debugging<ept id="p2">**</ept> commands.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>MathClient<ept id="p2">**</ept>, and then on the menu bar, choose <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Set As StartUp Project<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>To run the <bpt id="p1">**</bpt>MathClient<ept id="p1">**</ept> project, on the menu bar, choose <bpt id="p2">**</bpt>Debug<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Start Without Debugging<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Visual Studio opens a command window for the program to run in.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The output should resemble this:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>You can press any key to dismiss the command window.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Now that you've created a DLL and a client application, you can experiment.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Try setting breakpoints in the code of the client app or in the library, and run the app in the debugger.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Add other members to the Functions class, or add a new class.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Visual C++ Guided Tour</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>DLLs in Visual C++</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Deploying Desktop Applications</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Walkthrough: Deploying Your Program (C++)</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Calling DLL Functions from Visual Basic Applications</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>