<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a74ff262a413b8d3023d0a93f705a42f095d4de</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\conditional-expression-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4548c3286a1182e095612f9abca4a38eb1d25927</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cac2e8eb949bda942b0bc2329bb5e6ce98ff037a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Conditional-Expression Operator | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Conditional-Expression Operator</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>C has one ternary operator: the conditional-expression operator (<bpt id="p1">**</bpt>? :<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>conditional-expression<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>logical-OR-expression</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>logical-OR expression<ept id="p1">*</ept>  <bpt id="p2">**</bpt>?<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expression<ept id="p1">*</ept>  <bpt id="p2">**</bpt>:<ept id="p2">**</ept>  <bpt id="p3">*</bpt>conditional-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>logical-OR-expression<ept id="p1">*</ept> must have integral, floating, or pointer type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It is evaluated in terms of its equivalence to 0.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A sequence point follows <bpt id="p1">*</bpt>logical-OR-expression<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Evaluation of the operands proceeds as follows:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>logical-OR-expression<ept id="p1">*</ept> is not equal to 0, <bpt id="p2">*</bpt>expression<ept id="p2">*</ept> is evaluated.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The result of evaluating the expression is given by the nonterminal <bpt id="p1">*</bpt>expression<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>(This means <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> is evaluated only if <bpt id="p2">*</bpt>logical-OR-expression<ept id="p2">*</ept> is true.)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>logical-OR-expression<ept id="p1">*</ept> equals 0, <bpt id="p2">*</bpt>conditional-expression<ept id="p2">*</ept> is evaluated.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The result of the expression is the value of <bpt id="p1">*</bpt>conditional-expression<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>(This means <bpt id="p1">*</bpt>conditional-expression<ept id="p1">*</ept> is evaluated only if <bpt id="p2">*</bpt>logical-OR-expression<ept id="p2">*</ept> is false.)</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Note that either <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> or <bpt id="p2">*</bpt>conditional-expression<ept id="p2">*</ept> is evaluated, but not both.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The type of the result of a conditional operation depends on the type of the <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> or <bpt id="p2">*</bpt>conditional-expression<ept id="p2">*</ept> operand, as follows:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> or <bpt id="p2">*</bpt>conditional-expression<ept id="p2">*</ept> has integral or floating type (their types can be different), the operator performs the usual arithmetic conversions.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The type of the result is the type of the operands after conversion.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If both <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> and <bpt id="p2">*</bpt>conditional-expression<ept id="p2">*</ept> have the same structure, union, or pointer type, the type of the result is the same structure, union, or pointer type.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If both operands have type <ph id="ph1">`void`</ph>, the result has type <ph id="ph2">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If either operand is a pointer to an object of any type, and the other operand is a pointer to <ph id="ph1">`void`</ph>, the pointer to the object is converted to a pointer to <ph id="ph2">`void`</ph> and the result is a pointer to <ph id="ph3">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If either <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> or <bpt id="p2">*</bpt>conditional-expression<ept id="p2">*</ept> is a pointer and the other operand is a constant expression with the value 0, the type of the result is the pointer type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In the type comparison for pointers, any type qualifiers (<bpt id="p1">**</bpt>const<ept id="p1">**</ept> or <ph id="ph1">`volatile`</ph>) in the type to which the pointer points are insignificant, but the result type inherits the qualifiers from both components of the conditional.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following examples show uses of the conditional operator:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This example assigns the absolute value of <ph id="ph1">`i`</ph> to <ph id="ph2">`j`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`i`</ph> is less than 0, <ph id="ph2">`-i`</ph> is assigned to <ph id="ph3">`j`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`i`</ph> is greater than or equal to 0, <ph id="ph2">`i`</ph> is assigned to <ph id="ph3">`j`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In this example, two functions, <ph id="ph1">`f1`</ph> and <ph id="ph2">`f2`</ph>, and two variables, <ph id="ph3">`x`</ph> and <ph id="ph4">`y`</ph>, are declared.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Later in the program, if the two variables have the same value, the function <ph id="ph1">`f1`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`f2`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Conditional Operator: ?</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>