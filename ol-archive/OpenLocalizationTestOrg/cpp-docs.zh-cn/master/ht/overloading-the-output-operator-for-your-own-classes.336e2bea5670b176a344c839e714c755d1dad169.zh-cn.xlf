<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">22eb3fbef373c2e80989c49887cfa8b3c9eadc61</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\overloading-the-output-operator-for-your-own-classes.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">76a0d8ab53f2cf697e2970a72d3acd1b0c45d752</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3af68600d887d3a1da9dc24af58f8803d8eea2b1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Overloading the <ph id="ph1">&amp;lt;&amp;lt;</ph> Operator for Your Own Classes | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Overloading the <ph id="ph1">&amp;lt;&amp;lt;</ph> Operator for Your Own Classes</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Output streams use the insertion (<ph id="ph1">`&lt;&lt;`</ph>) operator for standard types.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You can also overload the <ph id="ph1">`&lt;&lt;`</ph> operator for your own classes.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`write`</ph> function example showed the use of a <ph id="ph2">`Date`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A date is an ideal candidate for a C++ class in which the data members (month, day, and year) are hidden from view.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An output stream is the logical destination for displaying such a structure.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This code displays a date using the <ph id="ph1">`cout`</ph> object:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To get <ph id="ph1">`cout`</ph> to accept a <ph id="ph2">`Date`</ph> object after the insertion operator, overload the insertion operator to recognize an <ph id="ph3">`ostream`</ph> object on the left and a <ph id="ph4">`Date`</ph> on the right.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The overloaded <ph id="ph1">`&lt;&lt;`</ph> operator function must then be declared as a friend of class <ph id="ph2">`Date`</ph> so it can access the private data within a <ph id="ph3">`Date`</ph> object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The overloaded operator returns a reference to the original <ph id="ph1">`ostream`</ph> object, which means you can combine insertions:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Output Streams</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>