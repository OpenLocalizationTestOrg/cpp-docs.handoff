<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f1fd47b22c11b7de3f4644942ea5dcba8b9424b3</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\file-system-navigation.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bd29496d5fe7af480e74fee863fc73e878fb9db0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2ff3eaeb4ef01492b9319503972f652e12864ee</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>File System Navigation | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>File System Navigation</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">\&lt;</ph>filesystem&gt; header implements the C++ File System Technical Specification ISO/IEC TS 18822:2015 (Final draft: <bpt id="p1">[</bpt>ISO/IEC JTC 1/SC 22/WG 21 N4100<ept id="p1">](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4100.pdf)</ept>) and has types and functions that enable you to write platform-independent code for navigating the file system.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Because it is cross-platform, it contains APIs that are not relevant for Windows systems.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For example, this means that <ph id="ph1">`is_fifo(const path&amp;)`</ph> always returns <ph id="ph2">`false`</ph> on Windows.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The header is based on a draft Technical Specification that was not voted into the C++17 standard as of Visual Studio 2015 RTM.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Its members are found in the <ph id="ph1">`std::experimental::filesystem`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Overview</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">\&lt;</ph>filesystem&gt; APIs for the following tasks:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>iterate over files and directories under a specified path</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>get information about files including the time created, size, extension, and root directory</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>compose, decompose, and compare paths</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>create, copy and delete directories</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>copy and delete files</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about File IO using the Standard Library, see <bpt id="p1">[</bpt>iostream Programming<ept id="p1">](../standard-library/iostream-programming.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Paths</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Constructing and composing paths</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Paths in Windows (since XP) are stored natively in Unicode.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>path<ept id="p1">](../standard-library/path-class.md)</ept> class automatically performs all necessary string conversions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>It accepts arguments of both wide and narrow character arrays, as well as <ph id="ph1">`std::string`</ph> and <ph id="ph2">`std::wstring`</ph> types formatted as UTF8 or UTF16.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`path`</ph> class also automatically normalizes path separators.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can use a single forward slash as a directory separator in constructor arguments.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This enables you to use the same strings to store paths in both Windows and UNIX environments:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To concatenate two paths, you can use the overloaded <ph id="ph1">`/`</ph> and <ph id="ph2">`/=`</ph> operators, which are analogous to the <ph id="ph3">`+`</ph> and <ph id="ph4">`+=`</ph> operators on <ph id="ph5">`std::string`</ph> and <ph id="ph6">`std::wstring`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`path`</ph> object will conveniently supply the separators if you donâ€™t.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Examining paths</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The path class has several methods that return information about various parts of the path itself, as distinct from the file system entity it might refer to.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can get the root, the relative path, the file name, the file extension, and more.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can iterate over a path object to examine all the folders in the hierarchy.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following example shows how to iterate over a path (not the directory it refers to), and to retrieve information about its parts.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The code produces this output:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Comparing paths</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`path`</ph> class overloads the same comparison operators as <ph id="ph2">`std::string`</ph> and <ph id="ph3">`std::wstring`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When you compare two paths, you are performing a string comparison after the separators have been normalized.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If a trailing slash (or backslash) is missing it is not added and affects the comparison.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how path values compare:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>To run this code, paste it into the full example above and uncomment the line that calls it in main.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Converting between path and string types</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`path`</ph> object is implicitly convertible to <ph id="ph2">`std::wstring`</ph> or <ph id="ph3">`std::string`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This means you can pass a path to functions such as <bpt id="p1">[</bpt>wofstream::open<ept id="p1">](../standard-library/basic-ofstream-class.md#basic_ofstream__open)</ept>, as shown in this example:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Iterating directories and files</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">\&lt;</ph>filesystem&gt; header provides the <bpt id="p1">[</bpt>directory_iterator<ept id="p1">](../standard-library/directory-iterator-class.md)</ept> type to iterate over single directories, and the <bpt id="p2">[</bpt>recursive_directory_iterator<ept id="p2">](../standard-library/recursive-directory-iterator-class.md)</ept> class to iterate recursively over a directory and its subdirectories.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>After you construct an iterator by passing it a <ph id="ph1">`path`</ph> object, the iterator points to the first directory_entry in the path.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Create the end iterator by calling the default constructor.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When iterating through a directory, there are several kinds of items you might encounter, including but not limited to directories, files, symbolic links, and socket files.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`directory_iterator`</ph> returns its items as <bpt id="p1">[</bpt>directory_entry<ept id="p1">](../standard-library/directory-entry-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>