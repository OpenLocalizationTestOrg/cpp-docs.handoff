<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4c7c3d26da8f8fc12f634242c1ce18a7c7d527a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\implementing-a-dual-interface.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a73a25e0f6e18d89b66c6a1a1d93b9eb7f9806c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">effcfea9806eb1cec4c7ba44fc9ccef137f940ec</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implementing a Dual Interface | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Implementing a Dual Interface</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can implement a dual interface using the <bpt id="p1">[</bpt>IDispatchImpl<ept id="p1">](../atl/reference/idispatchimpl-class.md)</ept> class, which provides a default implementation of the <ph id="ph1">`IDispatch`</ph> methods in a dual interface.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing the IDispatch Interface<ept id="p1">](http://msdn.microsoft.com/en-us/0e171f7f-0022-4e9b-ac8e-98192828e945)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To use this class:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Define your dual interface in a type library.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Derive your class from a specialization of <ph id="ph1">`IDispatchImpl`</ph> (pass information about the interface and type library as the template arguments).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Add an entry (or entries) to the COM map to expose the dual interface through <ph id="ph1">`QueryInterface`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Implement the vtable part of the interface in your class.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Ensure that the type library containing the interface definition is available to your objects at run time.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>ATL Simple Object Wizard</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If you want to create a new interface and a new class to implement it, you can use the <bpt id="p1">[</bpt>ATL Add Class dialog box<ept id="p1">](../ide/add-class-dialog-box.md)</ept>, and then the <bpt id="p2">[</bpt>ATL Simple Object Wizard<ept id="p2">](../atl/reference/atl-simple-object-wizard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Implement Interface Wizard</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you have an existing interface, you can use the <bpt id="p1">[</bpt>Implement Interface Wizard<ept id="p1">](../atl/reference/adding-a-new-interface-in-an-atl-project.md)</ept> to add the necessary base class, COM map entries, and skeleton method implementations to an existing class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>You may need to adjust the generated base class so that the major and minor version numbers of the type library are passed as template arguments to your <ph id="ph1">`IDispatchImpl`</ph> base class.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The Implement Interface Wizard doesn't check the type library version number for you.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Implementing IDispatch</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>You can use an <ph id="ph1">`IDispatchImpl`</ph> base class to provide an implementation of a dispinterface just by specifying the appropriate entry in the COM map (using the <bpt id="p1">[</bpt>COM_INTERFACE_ENTRY2<ept id="p1">](http://msdn.microsoft.com/library/3d48c53b-827b-42cc-9e22-594f7ea2bf0b)</ept> or <bpt id="p2">[</bpt>COM_INTERFACE_ENTRY_IID<ept id="p2">](http://msdn.microsoft.com/library/1bb69549-2099-4e20-ad5e-4c5a32f44e4b)</ept> macro) as long as you have a type library describing a corresponding dual interface.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>It is quite common to implement the <ph id="ph1">`IDispatch`</ph> interface this way, for example.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The ATL Simple Object Wizard and Implement Interface Wizard both assume that you intend to implement <ph id="ph1">`IDispatch`</ph> in this way, so they will add the appropriate entry to the map.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>ATL offers the <bpt id="p1">[</bpt>IDispEventImpl<ept id="p1">](../atl/reference/idispeventimpl-class.md)</ept> and <bpt id="p2">[</bpt>IDispEventSimpleImpl<ept id="p2">](../atl/reference/idispeventsimpleimpl-class.md)</ept> classes to help you implement dispinterfaces without requiring a type library containing the definition of a compatible dual interface.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Dual Interfaces and ATL</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>