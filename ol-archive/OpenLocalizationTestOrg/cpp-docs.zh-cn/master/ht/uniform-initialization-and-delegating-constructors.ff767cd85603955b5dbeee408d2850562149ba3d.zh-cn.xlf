<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aebfc49acf22154376905760a74f12f267c310e6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\uniform-initialization-and-delegating-constructors.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48ff85f6895fd17adb05dd5d00e69e21825e57b7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0c5a68d0191af8beda6b267ebb05c74cbd01d8b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Uniform Initialization and Delegating Constructors | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Uniform Initialization and Delegating Constructors</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In modern C++, you can use <bpt id="p1">*</bpt>brace initialization<ept id="p1">*</ept> for any type, without the equals sign.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Also, you can use delegating constructors to simplify your code when you have multiple constructors that perform similar work.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Brace Initialization</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You can use brace initialization for any class, struct, or union.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If a type has a default constructor, either implicitly or explicitly declared, you can use default brace initialization (with empty braces).</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example, the following class may be initialized by using both default and non-default brace initialization:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If a class has non-default constructors, the order in which class members appear in the brace initializer is the order in which the corresponding parameters appear in the constructor, not the order in which the members are declared (as with <ph id="ph1">`class_a`</ph> in the previous example).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Otherwise, if the type has no declared constructor, the order in which the members appear in the brace initializer is the same as the order in which they are declared; in this case, you can initialize as many of the public members as you wish, but you cannot skip any member.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example shows the order that's used in brace initialization when there is no declared constructor:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the default constructor is explicitly declared but marked as deleted, default brace initialization cannot be used:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can use brace initialization anywhere you would typically do initialization—for example, as a function parameter or a return value, or with the <ph id="ph1">`new`</ph> keyword:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>initializer_list Constructors</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>initializer_list Class<ept id="p1">](../standard-library/initializer-list-class.md)</ept> represents a list of objects of a specified type that can be used in a constructor, and in other contexts.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You can construct an initializer_list by using brace initialization:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>To use this class, you must include the <bpt id="p1">[</bpt>&lt;initializer_list&gt;<ept id="p1">](../standard-library/initializer-list.md)</ept> header.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`initializer_list`</ph> can be copied.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In this case, the members of the new list are references to the members of the original list:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The standard library container classes, and also <ph id="ph1">`string`</ph>, <ph id="ph2">`wstring`</ph>, and <ph id="ph3">`regex`</ph>, have <ph id="ph4">`initializer_list`</ph> constructors.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following examples show how to do brace initialization with these constructors:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Delegating Constructors</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Many classes have multiple constructors that do similar things—for example, validate parameters:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>You could reduce the repetitive code by adding a function that does all of the validation, but the code for <ph id="ph1">`class_c`</ph> would be easier to understand and maintain if one constructor could delegate some of the work to another one.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To add delegating constructors, use the <ph id="ph1">`constructor (. . .) : constructor (. . .)`</ph> syntax:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>As you step through the previous example, notice that the constructor <ph id="ph1">`class_c(int, int, int)`</ph> first calls the constructor <ph id="ph2">`class_c(int, int)`</ph>, which in turn calls <ph id="ph3">`class_c(int)`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each of the constructors performs only the work that is not performed by the other constructors.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The first constructor that's called initializes the object so that all of its members are initialized at that point.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can’t do member initialization in a constructor that delegates to another constructor, as shown here:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The next example shows the use of non-static data-member initializers.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Notice that if a constructor also initializes a given data member, the member initializer is overridden:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The constructor delegation syntax doesn't prevent the accidental creation of constructor recursion—Constructor1 calls Constructor2 which calls Constructor1—and no errors are thrown until there is a stack overflow.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It's your responsibility to avoid cycles.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>