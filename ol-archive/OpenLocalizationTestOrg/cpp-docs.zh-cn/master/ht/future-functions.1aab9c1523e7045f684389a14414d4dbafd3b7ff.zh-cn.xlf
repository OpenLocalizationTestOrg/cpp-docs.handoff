<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">57a9e0ba45c363d126ef44dc80eeb13d72b3733d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\future-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39e1c98a8405a0fd93a0a00b5dd883c52c92f998</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">183567c6d5080c321987d961a33b33d1bd2518f9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>future<ph id="ph1">&amp;gt;</ph> functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>future<ph id="ph1">&amp;gt;</ph> functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>async</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>future_category</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>make_error_code</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>make_error_condition</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>async</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Represents an <bpt id="p1">*</bpt>asynchronous provider<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>launch<ept id="p1">](../standard-library/future-enums.md#launch_enumeration)</ept> value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Definitions of abbreviations:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>dfn</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The result of calling <ph id="ph1">`decay_copy(forward&lt;Fn&gt;(fn))`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>dargs</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The results of the calls <ph id="ph1">`decay_copy(forward&lt;ArgsTypes&gt;(args…))`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Ty</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The type <ph id="ph1">`result_of&lt;Fn(ArgTypes…)&gt;::type`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The first template function returns <ph id="ph1">`async(launch::any, fn, args…)`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The second function returns a <ph id="ph1">`future&lt;Ty&gt;`</ph> object whose <bpt id="p1">*</bpt>associated asynchronous state<ept id="p1">*</ept> holds a result together with the values of <bpt id="p2">*</bpt>dfn<ept id="p2">*</ept> and <bpt id="p3">*</bpt>dargs<ept id="p3">*</ept> and a thread object to manage a separate thread of execution.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Unless <ph id="ph1">`decay&lt;Fn&gt;::type`</ph> is a type other than launch, the second function does not participate in overload resolution.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`policy`</ph> is <ph id="ph2">`launch::any`</ph>, the function might choose <ph id="ph3">`launch::async`</ph> or <ph id="ph4">`launch::deferred`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In this implementation, the function uses <ph id="ph1">`launch::async`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`policy`</ph> is <ph id="ph2">`launch::async`</ph>, the function creates a thread that evaluates <ph id="ph3">`INVOKE(dfn, dargs..., Ty)`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The function returns after it creates the thread without waiting for results.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the system can't start a new thread, the function throws a <bpt id="p1">[</bpt>system_error<ept id="p1">](../standard-library/system-error-class.md)</ept> that has an error code of <ph id="ph1">`resource_unavailable_try_again`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`policy`</ph> is <ph id="ph2">`launch::deferred`</ph>, the function marks its associated asynchronous state as holding a <bpt id="p1">*</bpt>deferred function<ept id="p1">*</ept> and returns.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The first call to any non-timed function that waits for the associated asynchronous state to be ready in effect calls the deferred function by evaluating <ph id="ph1">`INVOKE(dfn, dargs..., Ty)`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In all cases, the associated asynchronous state of the <ph id="ph1">`future`</ph> object is not set to <bpt id="p1">*</bpt>ready<ept id="p1">*</ept> until the evaluation of <ph id="ph2">`INVOKE(dfn, dargs…, Ty)`</ph> completes, either by throwing an exception or by returning normally.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The result of the associated asynchronous state is an exception if one was thrown, or any value that's returned by the evaluation.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For a <ph id="ph1">`future`</ph>—or the last <bpt id="p1">[</bpt>shared_future<ept id="p1">](../standard-library/shared-future-class.md)</ept>—that's attached to a task started with <ph id="ph2">`std::async`</ph>, the destructor blocks if the task has not completed; that is, it blocks if this thread did not yet call <ph id="ph3">`.get()`</ph> or <ph id="ph4">`.wait()`</ph> and the task is still running.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`future`</ph> obtained from <ph id="ph2">`std::async`</ph> is moved outside the local scope, other code that uses it must be aware that its destructor may block for the shared state to become ready.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The pseudo-function <ph id="ph1">`INVOKE`</ph> is defined in <bpt id="p1">[</bpt><ph id="ph2">\&lt;</ph>functional&gt;<ept id="p1">](../standard-library/functional.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>future_category</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns a reference to the <bpt id="p1">[</bpt>error_category<ept id="p1">](../standard-library/error-category-class.md)</ept> object that characterizes errors that are associated with <ph id="ph1">`future`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>make_error_code</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Creates an <bpt id="p1">[</bpt>error_code<ept id="p1">](../standard-library/error-code-class.md)</ept> together with the <bpt id="p2">[</bpt>error_category<ept id="p2">](../standard-library/error-category-class.md)</ept> object that characterizes <bpt id="p3">[</bpt>future<ept id="p3">](../standard-library/future-class.md)</ept> errors.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>future_errc<ept id="p1">](../standard-library/future-enums.md#future_errc_enumeration)</ept> value that identifies the reported error.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>make_error_condition</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Creates an <bpt id="p1">[</bpt>error_condition<ept id="p1">](../standard-library/error-condition-class.md)</ept> together with the <bpt id="p2">[</bpt>error_category<ept id="p2">](../standard-library/error-category-class.md)</ept> object that characterizes <bpt id="p3">[</bpt>future<ept id="p3">](../standard-library/future-class.md)</ept> errors.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>future_errc<ept id="p1">](../standard-library/future-enums.md#future_errc_enumeration)</ept> value that identifies the reported error.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Exchanges the <bpt id="p1">*</bpt>associated asynchronous state<ept id="p1">*</ept> of one <ph id="ph1">`promise`</ph> object with that of another.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The left <ph id="ph1">`promise`</ph> object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The right <ph id="ph1">`promise`</ph> object.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>future&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>