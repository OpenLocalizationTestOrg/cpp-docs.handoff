<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">61c2489a34a7debde6f3d9f99df452c7e882b8da</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\tool-errors\linker-tools-warning-lnk4221.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">df658f0d6bce91b45b6cd13f27c2bb1c77c065f5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f6e86bfb5c71cf669c4c922ab39947298f8a7f92</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Linker Tools Warning LNK4221 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Linker Tools Warning LNK4221</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This object file does not define any previously undefined public symbols, so it will not be used by any link operation that consumes this library</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Consider the following two code snippets.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To compile the files and create two object files, run <bpt id="p1">**</bpt>cl /c a.cpp b.cpp<ept id="p1">**</ept> at a command prompt.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If you link the object files by running <bpt id="p1">**</bpt>link /lib /out:test.lib a.obj b.obj<ept id="p1">**</ept>, you will receive the LNK4221 warning.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>If you link the objects by running <bpt id="p1">**</bpt>link /lib /out:test.lib b.obj a.obj<ept id="p1">**</ept>, you will not receive a warning.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>No warning is issued in the second scenario because the linker operates in a last-in first-out (LIFO) manner.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In the first scenario, b.obj is processed before a.obj, and a.obj has no new symbols to add.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By instructing the linker to process a.obj first, you can avoid the warning.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A common cause of this error is when two source files specify the option <bpt id="p1">[</bpt>/Yc (Create Precompiled Header File)<ept id="p1">](../../build/reference/yc-create-precompiled-header-file.md)</ept> with the same header file name specified in the <bpt id="p2">**</bpt>Precompiled Header<ept id="p2">**</ept> field.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A common cause of this problem deals with stdafx.h since, by default, stdafx.cpp includes stdafx.h and does not add any new symbols.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If another source file includes stdafx.h with <bpt id="p1">**</bpt>/Yc<ept id="p1">**</ept> and the associated .obj file is processed before stdafx.obj, the linker will throw LNK4221.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>One way to resolve this problem is to make sure that for each precompiled header, there is only one source file that includes it with <bpt id="p1">**</bpt>/Yc<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>All other source files must use precompiled headers.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For more information about how to change this setting, see <bpt id="p1">[</bpt>/Yu (Use Precompiled Header File)<ept id="p1">](../../build/reference/yu-use-precompiled-header-file.md)</ept>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>