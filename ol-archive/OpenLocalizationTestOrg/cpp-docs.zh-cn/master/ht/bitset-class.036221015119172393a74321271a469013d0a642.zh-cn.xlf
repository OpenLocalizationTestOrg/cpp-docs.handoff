<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2ca9d77b312cae0035d05c373bd7fae2611ee0c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\bitset-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89405329d0003cc1c456b128acb59c3349f4974d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">63ae77ad5bb64bf31ac4db5918a89512e13b6647</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>bitset Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>bitset Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Describes a type of object that stores a sequence consisting of a fixed number of bits that provide a compact way of keeping flags for a set of items or conditions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The bitset class supports operations on objects of type bitset that contain a collection of bits and provide constant-time access to each bit.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>N</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Specifies the number of bits in the bitset object with a nonzero integer of type <bpt id="p1">**</bpt>size_t<ept id="p1">**</ept> that must be known at compile time.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Unlike the similar <bpt id="p1">[</bpt>vector<ph id="ph1">\&lt;</ph>bool&gt; Class<ept id="p1">](../standard-library/vector-bool-class.md)</ept>, the bitset class does not have iterators and is not an Standard Template Library container.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>It also differs from vector<ph id="ph1">\&lt;</ph>bool&gt; by being of some specific size that is fixed at compile time in accordance with the size specified by the template parameter <bpt id="p1">**</bpt>N<ept id="p1">**</ept> when the <bpt id="p2">**</bpt>bitset<ph id="ph2">\&lt;</ph>N<ph id="ph3">\&gt;</ph><ept id="p2">**</ept> is declared.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A bit is set if its value is 1 and reset if its value is 0.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>To flip or toggle a bit is to change its value from 1 to 0 or from 0 to 1.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>N<ept id="p1">**</ept> bits in a bitset are indexed by integer values from 0 to <bpt id="p2">**</bpt>N<ept id="p2">**</ept>Â -Â 1, where 0 indexes the first bit position and <bpt id="p3">**</bpt>N<ept id="p3">**</ept><bpt id="p4">*</bpt>Â<ept id="p4">*</ept> -Â 1 the final bit position.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>bitset</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Constructs an object of class <ph id="ph1">`bitset\&lt;N&gt;`</ph> and initializes the bits to zero, to some specified value, or to values obtained from characters in a string.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>element_type</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A type that is a synonym for the data type <ph id="ph1">`bool`</ph> and can be used to reference element bits in a <ph id="ph2">`bitset`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>all</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Tests all of the bits in this <ph id="ph1">`bitset`</ph> to determine whether they are all set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>any</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The member function tests whether any bit in the sequence is set to 1.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>count</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The member function returns the number of bits set in the bit sequence.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>flip</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Toggles the value of all the bits in a <ph id="ph1">`bitset`</ph> or toggles a single bit at a specified position.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>none</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Tests if no bit has been set to 1 in a <ph id="ph1">`bitset`</ph> object.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>reset</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Resets all the bits in a <ph id="ph1">`bitset`</ph> to 0 or resets a bit at a specified position to 0.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>set</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Sets all the bits in a <ph id="ph1">`bitset`</ph> to 1 or sets a bit at a specified position to 1.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>size</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Returns the number of bits in a <ph id="ph1">`bitset`</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>test</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Tests whether the bit at a specified position in a <ph id="ph1">`bitset`</ph> is set to 1.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>to_string</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Converts a <ph id="ph1">`bitset`</ph> object to a string representation.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>to_ullong</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Returns the sum of the bit values in the <ph id="ph1">`bitset`</ph> as an <ph id="ph2">`unsigned long long`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>to_ulong</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Converts a <ph id="ph1">`bitset`</ph> object to the <ph id="ph2">`unsigned long`</ph> that would generate the sequence of bits contained if used to initialize the <ph id="ph3">`bitset`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Member Classes</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>reference</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A proxy class that provides references to bits contained in a <ph id="ph1">`bitset`</ph> that is used to access and manipulate the individual bits as a helper class for the <ph id="ph2">`operator[]`</ph> of class <ph id="ph3">`bitset`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>operator!=</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Tests a target <ph id="ph1">`bitset`</ph> for inequality with a specified <ph id="ph2">`bitset`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>operator&amp;=</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Performs a bitwise combination of bitsets with the logical <ph id="ph1">`AND`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>operator&lt;&lt;</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Shifts the bits in a <ph id="ph1">`bitset`</ph> to the left a specified number of positions and returns the result to a new <ph id="ph2">`bitset`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>operator&lt;&lt;=</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Shifts the bits in a <ph id="ph1">`bitset`</ph> to the left a specified number of positions and returns the result to the targeted <ph id="ph2">`bitset`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>operator==</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Tests a target <ph id="ph1">`bitset`</ph> for equality with a specified <ph id="ph2">`bitset`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>operator&gt;&gt;</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Shifts the bits in a <ph id="ph1">`bitset`</ph> to the right a specified number of positions and returns the result to a new <ph id="ph2">`bitset`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>operator&gt;&gt;=</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Shifts the bits in a <ph id="ph1">`bitset`</ph> to the right a specified number of positions and returns the result to the targeted <ph id="ph2">`bitset`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>operator&amp;#91;&amp;#93;</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Returns a reference to a bit at a specified position in a <ph id="ph1">`bitset`</ph> if the <ph id="ph2">`bitset`</ph> is modifiable; otherwise, it returns the value of the bit at that position.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>operator^=</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Performs a bitwise combination of bitsets with the exclusive <ph id="ph1">`OR`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>operator&amp;#124;=</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Performs a bitwise combination of bitsets with the inclusive <ph id="ph1">`OR`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>operator~</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Toggles all the bits in a target <ph id="ph1">`bitset`</ph> and returns the result.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>bitset&gt;</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>bitset::all</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Tests all of the bits in this bitset to determine if they are all set to true.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Returns true if all bits in this set are true.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>false<ept id="p1">**</ept> if one or more bits are false.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>bitset::any</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Tests whether any bit in the sequence is set to 1.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if any bit in the bitset is set to 1; <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if all the bits are 0.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>bitset::bitset</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Constructs an object of class <ph id="ph1">`bitset\&lt;N&gt;`</ph> and initializes the bits to zero, or to some specified value, or to values obtained from characters in a string.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The unsigned integer whose base two representation is used to initialize the bits in the bitset being constructed.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The string of zeros and ones used to initialize the bitset bit values.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A C-style string of zeros and ones used to initialize the bitset bit values.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The position of the character in the string, counting from left to right and starting with zero, used to initialize the first bit in the bitset.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The number of characters in the string that is used to provide initial values for the bits in the bitset.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The character that is used to represent a zero.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The default is '0'.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The character that is used to represent a one.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The default is '1'.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Three constructors can be used to construct obects of class <ph id="ph1">`bitset\&lt;N&gt;`</ph>:</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The first constructor accepts no parameters, constructs an object of class <ph id="ph1">`bitset\&lt;N&gt;`</ph> and initializes all N bits to a default value of zero.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The second constructor constructs an object of class <ph id="ph1">`bitset\&lt;N&gt;`</ph> and initializes the bits by using the single <ph id="ph2">`unsigned long long`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The third constructor constructs an object of class <ph id="ph1">`bitset\&lt;N&gt;`</ph>, initializing the N bits to values that correspond to the characters provided in a c-style character string of zeros and ones.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>You call the constructor without casting the string into a string type:</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>There are also two constructor templates provided:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The first constructor template constructs an object of class <ph id="ph1">`bitset\&lt;N&gt;`</ph> and initializes bits from the characters provided in a string of zeros and ones.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If any characters of the string are other than 0 or 1, the constructor throws an object of class <bpt id="p1">[</bpt>invalid argument<ept id="p1">](../standard-library/invalid-argument-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If the position specified ( <ph id="ph1">`_Pos`</ph>) is beyond the length of the string, then the constructor throws an object of class <bpt id="p1">[</bpt>out_of_range<ept id="p1">](../standard-library/out-of-range-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The constructor sets only those bits at position <bpt id="p1">*</bpt>j<ept id="p1">*</ept> in the bitset for which the character in the string at position <ph id="ph1">`_PosÂ +Â j`</ph> is 1.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`_Pos`</ph> is 0.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The second constructor template is similar to the first, but includes an additional parameter ( <ph id="ph1">` count`</ph>) that is used to specify the number of bits to initialize.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>It also has two optional parameters, <ph id="ph1">`_Zero`</ph> and <ph id="ph2">`_One`</ph>, which indicate what character in <ph id="ph3">` str`</ph> is to be interpreted to mean a 0 bit and a 1 bit, respectively.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>bitset::count</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Returns the number of bits set in the bit sequence.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The number of bits set in the bit sequence.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of the bitset::count member function.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>bitset::element_type</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A type that is a synonym for the data type <ph id="ph1">`bool`</ph> and can be used to reference element bits in a bitset.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>bitset::flip</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Toggles the value of all the bits in a bitset or toggles a single bit at a specified position.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The position of the bit whose value is to be toggled.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A copy of the modified bitset for which the member function was invoked.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The second member function throws an <bpt id="p1">[</bpt>out_of_range<ept id="p1">](../standard-library/out-of-range-class.md)</ept> exception if the position specified as a parameter is greater than the size <bpt id="p2">*</bpt>N<ept id="p2">*</ept> of the <bpt id="p3">**</bpt>bitset<ph id="ph1">\&lt;</ph><ept id="p3">**</ept><bpt id="p4">*</bpt>N<ept id="p4">*</ept><bpt id="p5">**</bpt><ph id="ph2">&gt;</ph><ept id="p5">**</ept> whose bit was toggled.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>bitset::none</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Tests if no bit has been set to 1 in a bitset object.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if no bit in the bitset has been set to 1; <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if at least one bit has been set to 1.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>bitset::operator!=</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Tests a target bitset for inequality with a specified bitset.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The bitset that is to be compared to the target bitset for inequality.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the bitsets are different; <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if they are the same.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Bitsets must be of the same size to be tested for inequality by the member operator function.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>bitset::operator</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Performs a bitwise combination of bitsets with the logical <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> operation.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The bitset that is to be combined bitwise with the target bitset.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The modified target bitset that results from the bitwise <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> operation with the bitset specified as a parameter.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Two bits combined by the <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> operator return <bpt id="p2">**</bpt>true<ept id="p2">**</ept> if each bit is true; otherwise, their combination returns <bpt id="p3">**</bpt>false<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Bitsets must be of the same size to be combined bitwise with the <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> operator by the member operator function.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>bitset::operator</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Shifts the bits in a bitset to the left a specified number of positions and returns the result to a new bitset.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The number of positions to the left that the bits in the bitset are to be shifted.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The modified bitset with the bits shifted to the left the required number of positions.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The member operator function returns <bpt id="p1">**</bpt>bitset<ept id="p1">**</ept>( <bpt id="p2">**</bpt><ph id="ph1">\*</ph>this<ept id="p2">**</ept>) <bpt id="p3">**</bpt>&lt;&lt;= pos,<ept id="p3">**</ept> where <bpt id="p4">[</bpt><ph id="ph2">&lt;&lt;=</ph><ept id="p4">](#bitset__operator_lt__lt__eq)</ept> shifts the bits in a bitset to the left a specified number of positions and returns the result to the targeted bitset.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>bitset::operator</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Shifts the bits in a bitset to the left a specified number of positions and returns the result to the targeted bitset.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The number of positions to the left the bits in the bitset are to be shifted.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The targeted bitset modified so that the bits have been shifted to the left the required number of positions.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If no element exists to shift into the position, the function clears the bit to a value of 0.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>bitset::operator==</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Tests a target bitset for equality with a specified bitset.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The bitset that is to be compared to the target bitset for equality.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the bitsets are the same; <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if they are different.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Bitsets must be of the same size to be tested for equality by the member operator function.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>bitset::operator</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Shifts the bits in a bitset to the right a specified number of positions and returns the result to a new bitset.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The number of positions to the right the bits in the bitset are to be shifted.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>A new bitset where the bits have been shifted to the right the required number of positions relative to the targeted bitset.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>bitset::operator</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Shifts the bits in a bitset to the right a specified number of positions and returns the result to the targeted bitset.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The number of positions to the right the bits in the bitset are to be shifted.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The targeted bitset modified so that the bits have been shifted to the right the required number of positions.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>If no element exists to shift into the position, the function clears the bit to a value of 0.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>bitset::operator[]</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Returns a reference to a bit at a specified position in a bitset if the bitset is modifiable; otherwise, it returns the value of the bit at that position.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The position locating the bit within the bitset.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>When compiling with _SECURE_SCL 1, a runtime error will occur if you attempt to access an element outside the bounds of the bitset.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>bitset::operator^=</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Performs a bitwise combination of bitsets with the exclusive <ph id="ph1">`OR`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The bitset that is to be combined bitwise with the target bitset.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The modified target bitset that results from the bitwise exclusive <ph id="ph1">`OR`</ph> operation with the bitset specified as a parameter.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Two bits combined by the exclusive <bpt id="p1">**</bpt>OR<ept id="p1">**</ept> operator return <bpt id="p2">**</bpt>true<ept id="p2">**</ept> if at least one, but not both, of the bits is <bpt id="p3">**</bpt>true<ept id="p3">**</ept>; otherwise, their combination returns <bpt id="p4">**</bpt>false<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Bitsets must be of the same size to be combined bitwise with the exclusive <ph id="ph1">`OR`</ph> operator by the member operator function.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>bitset::operator&amp;#124;=</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Performs a bitwise combination of bitsets with the inclusive <ph id="ph1">`OR`</ph> operation.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The bitset that is to be combined bitwise with the target bitset.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The modified target bitset that results from the bitwise inclusive <ph id="ph1">`OR`</ph> operation with the bitset specified as a parameter.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Two bits combined by the inclusive <ph id="ph1">`OR`</ph> operator return <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if at least one of the bits is <bpt id="p2">**</bpt>true<ept id="p2">**</ept>; if both bits are <bpt id="p3">**</bpt>false<ept id="p3">**</ept>, their combination returns <bpt id="p4">**</bpt>false<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Bitsets must be of the same size to be combined bitwise with the inclusive <ph id="ph1">`OR`</ph> operator by the member operator function.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>bitset::operator~</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Toggles all the bits in a target bitset and returns the result.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>The bitset with all its bits toggled with respect to the targeted bitset.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>bitset::reference</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>A proxy class that provides references to bits contained in a bitset that is used to access and manipulate the individual bits as a helper class for the <ph id="ph1">`operator[]`</ph> of class bitset.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>class reference {</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>friend class bitset<ph id="ph1">\&lt;</ph>N&gt;;</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>public: reference&amp; operator=( bool val); reference&amp; operator=( const reference&amp; _Bitref); bool operator~() const; operator bool() const; reference&amp; flip(); };</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>The value of the object of type <ph id="ph1">`bool`</ph> to be assigned to a bit in a bitset.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>A reference of the form <bpt id="p1">*</bpt>x [ i ]<ept id="p1">*</ept> to the bit at position <bpt id="p2">*</bpt>i<ept id="p2">*</ept> in bitset <bpt id="p3">*</bpt>x<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A reference to the bit in the bitset specified by the argument position for the first, second, and fifth member functions of class reference, and <bpt id="p1">**</bpt>true<ept id="p1">**</ept> or <bpt id="p2">**</bpt>false<ept id="p2">**</ept>, to reflect the value of the modified bit in the bitset for the third and fourth member functions of class reference.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>The class reference exists only as a helper class for the bitset <ph id="ph1">`operator[]`</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>The member class describes an object that can access an individual bit within a bitset.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Let <bpt id="p1">*</bpt>b<ept id="p1">*</ept> be an object of type <ph id="ph1">`bool`</ph>, <bpt id="p2">*</bpt>x<ept id="p2">*</ept> and <bpt id="p3">*</bpt>y<ept id="p3">*</ept> objects of type <bpt id="p4">**</bpt>bitset<ph id="ph2">\&lt;</ph><ept id="p4">**</ept><bpt id="p5">*</bpt>N<ept id="p5">*</ept><bpt id="p6">**</bpt><ph id="ph3">&gt;</ph><ept id="p6">**</ept>, and <bpt id="p7">*</bpt>i<ept id="p7">*</ept> and <bpt id="p8">*</bpt>j<ept id="p8">*</ept> valid positions within such an object.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The notation <bpt id="p1">*</bpt>x [i]<ept id="p1">*</ept> references the bit at position <bpt id="p2">*</bpt>i<ept id="p2">*</ept> in bitset <bpt id="p3">*</bpt>x<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The member functions of class reference provide, in order, the following operations:</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Operation</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Definition</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept>[ <bpt id="p2">*</bpt>i<ept id="p2">*</ept>] = <bpt id="p3">*</bpt>b<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Stores <ph id="ph1">`bool`</ph> value <bpt id="p1">*</bpt>b<ept id="p1">*</ept> at bit position <bpt id="p2">*</bpt>i<ept id="p2">*</ept> in bitset <bpt id="p3">*</bpt>x<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept>[ <bpt id="p2">*</bpt>i<ept id="p2">*</ept>] = <bpt id="p3">*</bpt>y<ept id="p3">*</ept>[ <bpt id="p4">*</bpt>j<ept id="p4">*</ept>]</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Stores the value of the bit <bpt id="p1">*</bpt>y<ept id="p1">*</ept>[ <bpt id="p2">*</bpt>j<ept id="p2">*</ept>] at bit position <bpt id="p3">*</bpt>i<ept id="p3">*</ept> in bitset <bpt id="p4">*</bpt>x<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>b<ept id="p1">*</ept> = ~ <bpt id="p2">*</bpt>x<ept id="p2">*</ept>[ <bpt id="p3">*</bpt>i<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Stores the flipped value of the bit <bpt id="p1">*</bpt>x<ept id="p1">*</ept>[ <bpt id="p2">*</bpt>i<ept id="p2">*</ept>] in <ph id="ph1">`bool`</ph>Â <bpt id="p3">*</bpt>b<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>b<ept id="p1">*</ept><ph id="ph1"> = </ph><bpt id="p2">*</bpt>x<ept id="p2">*</ept>[ <bpt id="p3">*</bpt>i<ept id="p3">*</ept>]</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Stores the value of the bit <bpt id="p1">*</bpt>x<ept id="p1">*</ept>[ <bpt id="p2">*</bpt>i<ept id="p2">*</ept>] in <ph id="ph1">`bool`</ph>Â <bpt id="p3">*</bpt>b<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept>[ <bpt id="p2">*</bpt>i<ept id="p2">*</ept>].</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>( )</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Stores the flipped value of the bit <bpt id="p1">*</bpt>x<ept id="p1">*</ept>[ <bpt id="p2">*</bpt>i<ept id="p2">*</ept>] back at bit position <bpt id="p3">*</bpt>i<ept id="p3">*</ept> in <bpt id="p4">*</bpt>x<ept id="p4">*</ept>.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>bitset::reset</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Resets all the bits in a bitset to 0 or resets a bit at a specified position to 0.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>The position of the bit in the bitset to be reset to 0.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>A copy of the bitset for which the member function was invoked.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The second member function throws an <bpt id="p1">[</bpt>out_of_range<ept id="p1">](../standard-library/out-of-range-class.md)</ept> exception if the position specified is greater than the size of the bitset.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>bitset::set</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Sets all the bits in a bitset to 1 or sets a bit at a specified position to 1.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The position of the bit in the bitset to be set to assigned a value.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>The value to be assigned to the bit at the position specified.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>A copy of the bitset for which the member function was invoked.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The second member function throws an <bpt id="p1">[</bpt>out_of_range<ept id="p1">](../standard-library/out-of-range-class.md)</ept> exception if the position specified is greater than the size of the bitset.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>bitset::size</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Returns the number of bits in a bitset object.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The number of bits, <bpt id="p1">*</bpt>N<ept id="p1">*</ept>, in a <bpt id="p2">**</bpt>bitset<ph id="ph1">\&lt;</ph><ept id="p2">**</ept><bpt id="p3">*</bpt>N<ept id="p3">*</ept><bpt id="p4">**</bpt><ph id="ph2">&gt;</ph><ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of the bitset::size member function.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>bitset::test</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Tests whether the bit at a specified position in a bitset is set to 1.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The position of the bit in the bitset to be tested for its value.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the bit specified by the argument position is set to 1; otherwise, <bpt id="p2">**</bpt>false<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The member function throws an <bpt id="p1">[</bpt>out_of_range<ept id="p1">](../standard-library/out-of-range-class.md)</ept></source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>