<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">024591e923cb1ebf1b2114eff89cabbd7679b0c9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\preprocessor\intrinsic.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0009a701e8e29f4ed567b1da41e44e32e81bdc9d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e6742cb91329276d3dda2c98b2692a70887cfdb5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>intrinsic | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>intrinsic</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Specifies that calls to functions specified in the pragma's argument list are intrinsic.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>intrinsic<ept id="p1">**</ept> pragma tells the compiler that a function has known behavior.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The compiler may call the function and not replace the function call with inline instructions, if it will result in better performance.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The library functions with intrinsic forms are listed below.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Once an <bpt id="p1">**</bpt>intrinsic<ept id="p1">**</ept> pragma is seen, it takes effect at the first function definition containing a specified intrinsic function.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The effect continues to the end of the source file or to the appearance of a <bpt id="p1">**</bpt>function<ept id="p1">**</ept> pragma specifying the same intrinsic function.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>intrinsic<ept id="p1">**</ept> pragma can be used only outside of a function definition â€” at the global level.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The following functions have intrinsic forms and the intrinsic forms are used when you specify <bpt id="p1">[</bpt>/Oi<ept id="p1">](../build/reference/oi-generate-intrinsic-functions.md)</ept>:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>_disable</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>_outp</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>fabs</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>strcmp</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>_enable</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>_outpw</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>labs</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>strcpy</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>_inp</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>_rotl</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>memcmp</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>strlen</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>_inpw</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>_rotr</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>memcpy</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>_lrotl</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>_strset</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>memset</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>_lrotr</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>abs</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>strcat</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Programs that use intrinsic functions are faster because they do not have the overhead of function calls but may be larger due to the additional code generated.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>x86 Specific</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The _disable and _enable intrinsics generate kernel-mode instructions to disable/enable interrupts and could be useful in kernel-mode drivers.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Compile the following code from the command line with "cl -c -FAs sample.c" and look at sample.asm to see that they turn into x86 instructions CLI and STI:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>End x86 Specific</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The floating-point functions listed below do not have true intrinsic forms.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Instead they have versions that pass arguments directly to the floating-point chip rather than pushing them onto the program stack:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>acos</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>cosh</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>pow</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>tanh</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>asin</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>fmod</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>sinh</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The floating-point functions listed below have true intrinsic forms when you specify <bpt id="p1">[</bpt>/Oi<ept id="p1">](../build/reference/oi-generate-intrinsic-functions.md)</ept>, <bpt id="p2">[</bpt>/Og<ept id="p2">](../build/reference/og-global-optimizations.md)</ept>, and <bpt id="p3">[</bpt>/fp:fast<ept id="p3">](../build/reference/fp-specify-floating-point-behavior.md)</ept> (or any option that includes /Og: <bpt id="p4">[</bpt>/Ox<ept id="p4">](../build/reference/ox-full-optimization.md)</ept>, <bpt id="p5">[</bpt>/O1<ept id="p5">](../build/reference/o1-o2-minimize-size-maximize-speed.md)</ept>, and /O2):</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>atan</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>exp</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>log10</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>sqrt</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>atan2</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>log</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>sin</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>tan</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>cos</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">[</bpt>/fp:strict<ept id="p1">](../build/reference/fp-specify-floating-point-behavior.md)</ept> or <bpt id="p2">[</bpt>/Za<ept id="p2">](../build/reference/za-ze-disable-language-extensions.md)</ept> to override generation of true intrinsic floating-point options.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In this case, the functions are generated as library routines that pass arguments directly to the floating-point chip instead of pushing them onto the program stack.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt># pragma function<ept id="p1">](../preprocessor/function-c-cpp.md)</ept> for information and an example on how to enable/disable intrinsics for a block of source text.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Pragma Directives and the __Pragma Keyword</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Compiler Intrinsics</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>