<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b8d6abfecd04305af8a6af78ab9123b72789023c</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\main-function-and-program-execution.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7686582411c333383dd89796f8c0d1e7a89b175</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">def414c2802eced9f9d051b251d68e04f449b5b4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>main Function and Program Execution | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>main Function and Program Execution</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Every C program has a primary (main) function that must be named <bpt id="p1">**</bpt>main<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If your code adheres to the Unicode programming model, you can use the wide-character version of <bpt id="p1">**</bpt>main<ept id="p1">**</ept>, <bpt id="p2">**</bpt>wmain<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>main<ept id="p1">**</ept> function serves as the starting point for program execution.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>It usually controls program execution by directing the calls to other functions in the program.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A program usually stops executing at the end of <bpt id="p1">**</bpt>main<ept id="p1">**</ept>, although it can terminate at other points in the program for a variety of reasons.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>At times, perhaps when a certain error is detected, you may want to force the termination of a program.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>To do so, use the <bpt id="p1">**</bpt>exit<ept id="p1">**</ept> function.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">*</bpt>Run-Time Library Reference<ept id="p1">*</ept> for information on and an example using the <bpt id="p2">[</bpt>exit<ept id="p2">](../c-runtime-library/reference/exit-exit-exit.md)</ept> function.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Functions within the source program perform one or more specific tasks.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>main<ept id="p1">**</ept> function can call these functions to perform their respective tasks.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>main<ept id="p1">**</ept> calls another function, it passes execution control to the function, so that execution begins at the first statement in the function.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A function returns control to <bpt id="p1">**</bpt>main<ept id="p1">**</ept> when a <ph id="ph1">`return`</ph> statement is executed or when the end of the function is reached.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can declare any function, including <bpt id="p1">**</bpt>main<ept id="p1">**</ept>, to have parameters.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The term "parameter" or "formal parameter" refers to the identifier that receives a value passed to a function.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Parameters<ept id="p1">](../c-language/parameters.md)</ept> for information on passing arguments to parameters.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When one function calls another, the called function receives values for its parameters from the calling function.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>These values are called "arguments."</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can declare formal parameters to <bpt id="p1">**</bpt>main<ept id="p1">**</ept> so that it can receive arguments from the command line using this format:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When you want to pass information to the <bpt id="p1">**</bpt>main<ept id="p1">**</ept> function, the parameters are traditionally named <ph id="ph1">`argc`</ph> and <ph id="ph2">`argv`</ph>, although the C compiler does not require these names.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The types for <ph id="ph1">`argc`</ph> and <ph id="ph2">`argv`</ph> are defined by the C language.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Traditionally, if a third parameter is passed to <bpt id="p1">**</bpt>main<ept id="p1">**</ept>, that parameter is named <ph id="ph1">`envp`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Examples later in this section show how to use these three parameters to access command-line arguments.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following sections explain these parameters.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Using wmain<ept id="p1">](../c-language/using-wmain.md)</ept> for a description of the wide-character version of <bpt id="p2">**</bpt>main<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>main: Program Startup</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>