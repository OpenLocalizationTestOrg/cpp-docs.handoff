<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">638d29fea2d735b2a98b76fdad64401db6d9e6f7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\how-to-create-a-classic-com-component-using-wrl.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aa121409fdf5a66732c96fdaa6dd9bbd4863db45</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d77134d5ed0d160fcc872ffb62db35a7d20c527a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Create a Classic COM Component Using WRL | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create a Classic COM Component Using WRL</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">[!INCLUDE[cppwrl](../windows/includes/cppwrl_md.md)]</ph> (<ph id="ph2">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph>) to create basic classic COM components for use in desktop apps, in addition to using it for <ph id="ph3">[!INCLUDE[win8_appstore_long](../build/reference/includes/win8_appstore_long_md.md)]</ph> apps.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For the creation of COM components, the <ph id="ph1">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> may require less code than the ATL.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about the subset of COM that the <ph id="ph1">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> supports, see <bpt id="p1">[</bpt>Windows Runtime C++ Template Library (WRL)<ept id="p1">](../windows/windows-runtime-cpp-template-library-wrl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This document shows how to use the <ph id="ph1">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> to create a basic COM component.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Although you can use the deployment mechanism that best fits your needs, this document also shows a basic way to register and consume the COM component from a desktop app.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To use the <ph id="ph1">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> to create a basic classic COM component</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In Visual Studio, create a <bpt id="p1">**</bpt>Blank Solution<ept id="p1">**</ept> project.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Name the project, for example, <ph id="ph1">`WRLClassicCOM`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Add a <bpt id="p1">**</bpt>Win32 Project<ept id="p1">**</ept> to the solution.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name the project, for example, <ph id="ph1">`CalculatorComponent`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>On the <bpt id="p1">**</bpt>Application Settings<ept id="p1">**</ept> tab, select <bpt id="p2">**</bpt>DLL<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Add a <bpt id="p1">**</bpt>Midl File (.idl)<ept id="p1">**</ept> file to the project.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Name the file, for example, <ph id="ph1">`CalculatorComponent.idl`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Add this code to CalculatorComponent.idl:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>wrl-classic-com-component#1</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In CalculatorComponent.cpp, define the <ph id="ph1">`CalculatorComponent`</ph> class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CalculatorComponent`</ph> class inherits from <bpt id="p1">[</bpt>Microsoft::WRL::RuntimeClass<ept id="p1">](../windows/runtimeclass-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Microsoft::WRL::RuntimeClassFlags<ph id="ph1">\&lt;</ph>ClassicCom&gt;<ept id="p1">](../windows/runtimeclassflags-structure.md)</ept> specifies that the class derives from <bpt id="p2">[</bpt>IUnknown<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/ms680509\(v=vs.85\).aspx)</ept> and not <bpt id="p3">[</bpt>IInspectable<ept id="p3">](http://msdn.microsoft.com/library/br205821\(v=vs.85\).aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">`IInspectable`</ph> is available only to <ph id="ph2">[!INCLUDE[win8_appstore_short](../windows/includes/win8_appstore_short_md.md)]</ph> app components.) <ph id="ph3">`CoCreatableClass`</ph> creates a factory for the class that can be used with functions such as <bpt id="p1">[</bpt>CoCreateInstance<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686615\(v=vs.85\).aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>wrl-classic-com-component#2</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use the following code to replace the code in dllmain.cpp.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This file defines the DLL export functions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These functions use the <bpt id="p1">[</bpt>Microsoft::WRL::Module<ept id="p1">](../windows/module-class.md)</ept> class to manage the class factories for the module.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>wrl-classic-com-component#3</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Add a <bpt id="p1">**</bpt>Module-Definition File (.def)<ept id="p1">**</ept> file to the project.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Name the file, for example, <ph id="ph1">`CalculatorComponent.def`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This file gives the linker the names of the functions to be exported.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Add this code to CalculatorComponent.def:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Add runtimeobject.lib to the linker line.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To learn how, see <bpt id="p1">[</bpt>.Lib Files as Linker Input<ept id="p1">](../build/reference/dot-lib-files-as-linker-input.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To consume the COM component from a desktop app</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Register the COM component with the Windows Registry.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To do so, create a registration entries file, name it <ph id="ph1">`RegScript.reg`</ph>, and add the following text.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Replace <bpt id="p1">*</bpt><ph id="ph1">\&lt;</ph>dll-path&gt;<ept id="p1">*</ept> with the path of your DLLâ€”for example, <ph id="ph2">`C:\\temp\\WRLClassicCOM\\Debug\\CalculatorComponent.dll`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Run RegScript.reg or add it to your projectâ€™s <bpt id="p1">**</bpt>Post-Build Event<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Pre-build Event/Post-build Event Command Line Dialog Box<ept id="p1">](/visualstudio/ide/reference/pre-build-event-post-build-event-command-line-dialog-box)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Add a <bpt id="p1">**</bpt>Win32 Console Application<ept id="p1">**</ept> project to the solution.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Name the project, for example, <ph id="ph1">`Calculator`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Use this code to replace the contents of Calculator.cpp:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>wrl-classic-com-component#6</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>This document uses standard COM functions to demonstrate that you can use the <ph id="ph1">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> to author a COM component and make it available to any COM-enabled technology.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>You can also use <ph id="ph1">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> types such as <bpt id="p1">[</bpt>Microsoft::WRL::ComPtr<ept id="p1">](../windows/comptr-class.md)</ept> in your desktop app to manage the lifetime of COM and other objects.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following code uses the <ph id="ph1">[!INCLUDE[cppwrl_short](../windows/includes/cppwrl_short_md.md)]</ph> to manage the lifetime of the <ph id="ph2">`ICalculatorComponent`</ph> pointer.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CoInitializeWrapper`</ph> class is an RAII wrapper that guarantees that the COM library is freed and also guarantees that the lifetime of the COM library outlives the <ph id="ph2">`ComPtr`</ph> smart pointer object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>wrl-classic-com-component#7</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Windows Runtime C++ Template Library (WRL)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>