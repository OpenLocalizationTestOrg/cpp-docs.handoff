<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aced5eb2e0a2cade12acd0405a0f7e31314e0427</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\cthreadpool-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66d756898f3fa56da342cf31c4f8df9e05584154</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0d0ca51637a5e62b0859161f767992a7c1bb917</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CThreadPool Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CThreadPool Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class provides a pool of worker threads that process a queue of work items.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Worker</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The class conforming to the <bpt id="p1">[</bpt>worker archetype<ept id="p1">](../../atl/reference/worker-archetype.md)</ept> providing the code used to process work items queued on the thread pool.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The class providing the function used to create the threads in the pool.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>CThreadPool::CThreadPool</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The constructor for the thread pool.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>CThreadPool::~CThreadPool</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The destructor for the thread pool.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CThreadPool::AddRef</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Implementation of <ph id="ph1">`IUnknown::AddRef`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CThreadPool::GetNumThreads</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Call this method to get the number of threads in the pool.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CThreadPool::GetQueueHandle</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Call this method to get the handle of the IO completion port used to queue work items.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CThreadPool::GetSize</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Call this method to get the number of threads in the pool.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CThreadPool::GetTimeout</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Call this method to get the maximum time in milliseconds that the thread pool will wait for a thread to shut down.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CThreadPool::Initialize</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Call this method to initialize the thread pool.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CThreadPool::QueryInterface</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Implementation of <bpt id="p1">**</bpt>IUnknown::QueryInterface<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CThreadPool::QueueRequest</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Call this method to queue a work item to be handled by a thread in the pool.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CThreadPool::Release</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Implementation of <ph id="ph1">`IUnknown::Release`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CThreadPool::SetSize</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Call this method to set the number of threads in the pool.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CThreadPool::SetTimeout</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Call this method to set the maximum time in milliseconds that the thread pool will wait for a thread to shut down.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CThreadPool::Shutdown</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Call this method to shut down the thread pool.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Threads in the pool are created and destroyed when the pool is initialized, resized, or shut down.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An instance of class <bpt id="p1">*</bpt>Worker<ept id="p1">*</ept> will be created on the stack of each worker thread in the pool.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Each instance will live for the lifetime of the thread.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Immediately after creation of a thread, <bpt id="p1">*</bpt>Worker<ept id="p1">*</ept>:: <ph id="ph1">`Initialize`</ph> will be called on the object associated with that thread.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Immediately before destruction of a thread, <bpt id="p1">*</bpt>Worker<ept id="p1">*</ept>:: <ph id="ph1">`Terminate`</ph> will be called.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Both methods must accept a <bpt id="p1">**</bpt>void<ph id="ph1">\*</ph><ept id="p1">**</ept> argument.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The value of this argument is passed to the thread pool through the <ph id="ph1">`pvWorkerParam`</ph> parameter of <bpt id="p1">[</bpt>CThreadPool::Initialize<ept id="p1">](#cthreadpool__initialize)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>When there are work items in the queue and worker threads available for work, a worker thread will pull an item off the queue and call the <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept> method of the <bpt id="p2">*</bpt>Worker<ept id="p2">*</ept> object for that thread.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Three items are then passed to the method: the item from the queue, the same <ph id="ph1">`pvWorkerParam`</ph> passed to <bpt id="p1">*</bpt>Worker<ept id="p1">*</ept>:: <ph id="ph2">`Initialize`</ph> and <bpt id="p2">*</bpt>Worker<ept id="p2">*</ept>:: <ph id="ph3">`Terminate`</ph>, and a pointer to the <bpt id="p3">[</bpt>OVERLAPPED<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms684342)</ept> structure used for the IO completion port queue.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>Worker<ept id="p1">*</ept> class declares the type of the items that will be queued on the thread pool by providing a typedef, <bpt id="p2">*</bpt>Worker<ept id="p2">*</ept>:: <ph id="ph1">`RequestType`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This type must be capable of being cast to and from a <bpt id="p1">**</bpt>ULONG_PTR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>An example of a <bpt id="p1">*</bpt>Worker<ept id="p1">*</ept> class is <bpt id="p2">[</bpt>CNonStatelessWorker Class<ept id="p2">](../../atl/reference/cnonstatelessworker-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>IThreadPoolConfig</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlutil.h</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CThreadPool::AddRef</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Implementation of <ph id="ph1">`IUnknown::AddRef`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Always returns 1.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>This class does not implement lifetime control using reference counting.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CThreadPool::CThreadPool</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The constructor for the thread pool.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Initializes the timeout value to <bpt id="p1">[</bpt>ATLS_DEFAULT_THREADPOOLSHUTDOWNTIMEOUT<ept id="p1">](http://msdn.microsoft.com/library/c1e660a7-d490-42af-bbe1-ded76e80cc10)</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CThreadPool::~CThreadPool</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The destructor for the thread pool.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>CThreadPool::Shutdown<ept id="p1">](#cthreadpool__shutdown)</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CThreadPool::GetNumThreads</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Call this method to get the number of threads in the pool.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Returns the number of threads in the pool.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CThreadPool::GetQueueHandle</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Call this method to get the handle of the IO completion port used to queue work items.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Returns the queue handle or NULL if the thread pool has not been initialized.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CThreadPool::GetSize</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Call this method to get the number of threads in the pool.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>[out] Address of the variable that, on success, receives the number of threads in the pool.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CThreadPool::GetTimeout</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Call this method to get the maximum time in milliseconds that the thread pool will wait for a thread to shut down.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>[out] Address of the variable that, on success, receives the maximum time in milliseconds that the thread pool will wait for a thread to shut down.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>This timeout value is used by <bpt id="p1">[</bpt>CThreadPool::Shutdown<ept id="p1">](#cthreadpool__shutdown)</ept> if no other value is supplied to that method.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>CThreadPool::Initialize</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Call this method to initialize the thread pool.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The worker parameter to be passed to the worker thread object's <ph id="ph1">`Initialize`</ph>, <bpt id="p1">**</bpt>Execute<ept id="p1">**</ept>, and <ph id="ph2">`Terminate`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The requested number of threads in the pool.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nNumThreads`</ph> is negative, its absolute value will be multiplied by the number of processors in the machine to get the total number of threads.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nNumThreads`</ph> is zero, <bpt id="p1">[</bpt>ATLS_DEFAULT_THREADSPERPROC<ept id="p1">](http://msdn.microsoft.com/library/e0dcf107-72a9-4122-abb4-83c63aa7d571)</ept> will be multiplied by the number of processors in the machine to get the total number of threads.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The stack size for each thread in the pool.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>hCompletion</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The handle of an object to associate with the completion port.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CThreadPool::QueryInterface</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Implementation of <bpt id="p1">**</bpt>IUnknown::QueryInterface<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Objects of this class can be successfully queried for the <bpt id="p1">**</bpt>IUnknown<ept id="p1">**</ept> and <bpt id="p2">[</bpt>IThreadPoolConfig<ept id="p2">](../../atl/reference/ithreadpoolconfig-interface.md)</ept> interfaces.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>CThreadPool::QueueRequest</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Call this method to queue a work item to be handled by a thread in the pool.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>The request to be queued.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Returns TRUE on success, FALSE on failure.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This method adds a work item to the queue.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The threads in the pool pick items off the queue in the order in which they are received.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>CThreadPool::Release</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Implementation of <ph id="ph1">`IUnknown::Release`</ph>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Always returns 1.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>This class does not implement lifetime control using reference counting.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>CThreadPool::SetSize</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Call this method to set the number of threads in the pool.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The requested number of threads in the pool.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nNumThreads`</ph> is negative, its absolute value will be multiplied by the number of processors in the machine to get the total number of threads.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nNumThreads`</ph> is zero, <bpt id="p1">[</bpt>ATLS_DEFAULT_THREADSPERPROC<ept id="p1">](http://msdn.microsoft.com/library/e0dcf107-72a9-4122-abb4-83c63aa7d571)</ept> will be multiplied by the number of processors in the machine to get the total number of threads.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>If the number of threads specified is less than the number of threads currently in the pool, the object puts a shutdown message on the queue to be picked up by a waiting thread.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>When a waiting thread pulls the message off the queue, it notifies the thread pool and exits the thread procedure.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>This process is repeated until the number of threads in the pool reaches the specified number or until no thread has exited within the period specified by <bpt id="p1">[</bpt>GetTimeout<ept id="p1">](#cthreadpool__gettimeout)</ept><ph id="ph1">/ </ph><bpt id="p2">[</bpt>SetTimeout<ept id="p2">](#cthreadpool__settimeout)</ept>.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>In this situation the method will return an HRESULT corresponding to <bpt id="p1">**</bpt>WAIT_TIMEOUT<ept id="p1">**</ept> and the pending shutdown message is canceled.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>CThreadPool::SetTimeout</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Call this method to set the maximum time in milliseconds that the thread pool will wait for a thread to shut down.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The requested maximum time in milliseconds that the thread pool will wait for a thread to shut down.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Returns S_OK on success, or an error HRESULT on failure.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The timeout is initialized to <bpt id="p1">[</bpt>ATLS_DEFAULT_THREADPOOLSHUTDOWNTIMEOUT<ept id="p1">](http://msdn.microsoft.com/library/c1e660a7-d490-42af-bbe1-ded76e80cc10)</ept> in the constructor.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`dwMaxWait`</ph> is the time that the pool will wait for a single thread to shut down.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The maximum time that could be taken to remove multiple threads from the pool could be slightly less than <ph id="ph1">`dwMaxWait`</ph> multiplied by the number of threads.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>CThreadPool::Shutdown</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Call this method to shut down the thread pool.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The requested maximum time in milliseconds that the thread pool will wait for a thread to shut down.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>If 0 or no value is supplied, this method will use the timeout set by <bpt id="p1">[</bpt>CThreadPool::SetTimeout<ept id="p1">](#cthreadpool__settimeout)</ept>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>This method posts a shutdown request to all threads in the pool.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>If the timeout expires, this method will call <bpt id="p1">[</bpt>TerminateThread<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686717)</ept> on any thread that did not exit.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>This method is called automatically from the destructor of the class.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>IThreadPoolConfig Interface</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>DefaultThreadTraits</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>