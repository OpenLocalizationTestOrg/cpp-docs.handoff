<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6a4b602d5fa9aab3933422c84517dfbf6b0cf863</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\num-put-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbfc26fbe78001a164e1244034404d0f6abb293b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ac8e8b94887602bd1414248cc225a73441b22a38</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>um_put Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>num_put Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A template class that describes an object that can serve as a locale facet to control conversions of numeric values to sequences of type <ph id="ph1">`CharType`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The type used within a program to encode characters in a locale.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type of iterator to which the numeric put functions write their output.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>As with any locale facet, the static object ID has an initial stored value of zero.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The first attempt to access its stored value stores a unique positive value in <bpt id="p1">**</bpt>id.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>num_put</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The constructor for objects of type <ph id="ph1">`num_put`</ph>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>char_type</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A type that is used to describe a character used by a locale.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>iter_type</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A type that describes an output iterator.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>do_put</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A virtual function that is called to convert a number into a sequence of <ph id="ph1">`CharType`</ph>s that represents the number formatted for a given locale.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>put</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Converts a number into a sequence of <ph id="ph1">`CharType`</ph>s which represents the number formatted for a given locale.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>locale&gt;</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>num_put::char_type</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A type that is used to describe a character used by a locale.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>num_put::do_put</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A virtual function that is called to convert a number into a sequence of <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>s that represents the number formatted for a given locale.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>An iterator addressing the first element of the inserted string.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Specified the stream which contains locale with the numpunct facet used to punctuate the output and flags for formatting the output.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A character that is used for spacing.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The number or Boolean type that is to be output.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An output iterator the addresses the position one beyond the last element produced.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The first virtual protected member function generates sequential elements beginning at <ph id="ph1">` next`</ph> to produce an integer output field from the value of <ph id="ph2">` val`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The function returns an iterator designating the next place to insert an element beyond the generated integer output field.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The integer output field is generated by the same rules used by the print functions for generating a series of <ph id="ph1">`char`</ph> elements to a file.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Each such char element is assumed to map to an equivalent element of type <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept> by a simple, one-to-one mapping.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Where a print function pads a field with either spaces or the digit 0, however, <ph id="ph1">`do_put`</ph> instead uses <bpt id="p1">**</bpt>fill<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The equivalent print conversion specification is determined as follows:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>flags<ept id="p1">](../standard-library/ios-base-class.md#ios_base__flags)</ept><ph id="ph1"> &amp; `ios_base::basefield` == `ios_base::`</ph><bpt id="p2">[</bpt>oct<ept id="p2">](../standard-library/ios-functions.md#oct)</ept>, the conversion specification is <bpt id="p3">**</bpt>lo<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase.flags<ept id="p1">**</ept><ph id="ph1"> &amp; </ph><bpt id="p2">**</bpt>ios_base::basefield<ept id="p2">**</ept><ph id="ph2"> == `ios_base::`</ph><bpt id="p3">[</bpt>hex<ept id="p3">](../standard-library/ios-functions.md#hex)</ept>, the conversion specification is <bpt id="p4">**</bpt>lx<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Otherwise, the conversion specification is <bpt id="p1">**</bpt>ld<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>width<ept id="p1">](../standard-library/ios-base-class.md#ios_base__width)</ept> is nonzero, a field width of this value is prepended.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The function then calls <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>width<ept id="p1">**</ept>(0) to reset the field width to zero.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Padding occurs only if the minimum number of elements <bpt id="p1">*</bpt>N<ept id="p1">*</ept> required to specify the output field is less than <bpt id="p2">**</bpt>iosbase<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>width<ept id="p1">](../standard-library/ios-base-class.md#ios_base__width)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Such padding consists of a sequence of <bpt id="p1">*</bpt>N<ept id="p1">*</ept> – <bpt id="p2">**</bpt>width<ept id="p2">**</ept> copies of <bpt id="p3">**</bpt>fill<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Padding then occurs as follows:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>flags<ept id="p1">**</ept><ph id="ph1"> &amp; `ios_base::adjustfield` == `ios_base::`</ph><bpt id="p2">[</bpt>left<ept id="p2">](../standard-library/ios-functions.md#left)</ept>, the flag <bpt id="p3">**</bpt>–<ept id="p3">**</ept> is prepended.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>(Padding occurs after the generated text.)</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase.flags<ept id="p1">**</ept><ph id="ph1"> &amp; </ph><bpt id="p2">**</bpt>ios_base::adjustfield<ept id="p2">**</ept><ph id="ph2"> == `ios_base::`</ph><bpt id="p3">[</bpt>internal<ept id="p3">](../standard-library/ios-functions.md#internal)</ept>, the flag <bpt id="p4">**</bpt>0<ept id="p4">**</ept> is prepended.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>(For a numeric output field, padding occurs where the print functions pad with 0.)</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Otherwise, no additional flag is prepended.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>(Padding occurs before the generated sequence.)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Finally:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>flags<ept id="p1">**</ept><ph id="ph1"> &amp; `ios_base::`</ph><bpt id="p2">[</bpt>showpos<ept id="p2">](../standard-library/ios-functions.md#showpos)</ept> is nonzero, the flag <bpt id="p3">**</bpt><ph id="ph2">+</ph><ept id="p3">**</ept> is prepended to the conversion specification.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>flags<ept id="p1">**</ept><ph id="ph1"> &amp; </ph><bpt id="p2">**</bpt>ios_base::<ept id="p2">**</ept><bpt id="p3">[</bpt>showbase<ept id="p3">](../standard-library/ios-functions.md#showbase)</ept> is nonzero, the flag <bpt id="p4">**</bpt><ph id="ph2">#</ph><ept id="p4">**</ept> is prepended to the conversion specification.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The format of an integer output field is further determined by the <bpt id="p1">[</bpt>locale facet<ept id="p1">](../standard-library/locale-class.md#facet_class)</ept><bpt id="p2">**</bpt>fac<ept id="p2">**</ept> returned by the call <bpt id="p3">[</bpt>use_facet<ept id="p3">](../standard-library/locale-functions.md#use_facet)</ept><ph id="ph1"> &lt; </ph><bpt id="p4">[</bpt>numpunct<ept id="p4">](../standard-library/numpunct-class.md)</ept><ph id="ph2">\&lt;</ph> <bpt id="p5">**</bpt>Elem<ept id="p5">**</ept>&gt;( <bpt id="p6">**</bpt>iosbase<ept id="p6">**</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>getloc<ept id="p1">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>).</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Specifically:</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>grouping<ept id="p1">](../standard-library/numpunct-class.md#numpunct__grouping)</ept> determines how digits are grouped to the left of any decimal point</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>thousands_sep<ept id="p1">](../standard-library/numpunct-class.md#numpunct__thousands_sep)</ept> determines the sequence that separates groups of digits to the left of any decimal point</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>If no grouping constraints are imposed by <bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>grouping<ept id="p1">**</ept> (its first element has the value CHAR_MAX), then no instances of <bpt id="p2">**</bpt>fac<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>are generated in the output field.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Otherwise, separators are inserted after the print conversion occurs.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The second virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it replaces a conversion specification of <bpt id="p1">**</bpt>ld<ept id="p1">**</ept> with <bpt id="p2">**</bpt>lu<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The third virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it produces a floating-point output field from the value of <bpt id="p1">**</bpt>val<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>decimal_point<ept id="p1">](../standard-library/numpunct-class.md#numpunct__decimal_point)</ept> determines the sequence that separates the integer digits from the fraction digits.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The equivalent print conversion specification is determined as follows:</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>flags<ept id="p1">**</ept><ph id="ph1"> &amp; `ios_base::floatfield` == `ios_base::`</ph><bpt id="p2">[</bpt>fixed<ept id="p2">](../standard-library/ios-functions.md#fixed)</ept>, the conversion specification is <bpt id="p3">**</bpt>lf<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>flags<ept id="p1">**</ept><ph id="ph1"> &amp; </ph><bpt id="p2">**</bpt>ios_base::floatfield<ept id="p2">**</ept><ph id="ph2"> == `ios_base::`</ph><bpt id="p3">[</bpt>scientific<ept id="p3">](../standard-library/ios-functions.md#scientific)</ept>, the conversion specification is <ph id="ph3">`le`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>flags<ept id="p1">**</ept><ph id="ph1"> &amp; `ios_base::`</ph><bpt id="p2">[</bpt>uppercase<ept id="p2">](../standard-library/ios-functions.md#uppercase)</ept> is nonzero, <bpt id="p3">**</bpt>e<ept id="p3">**</ept> is replaced with <bpt id="p4">**</bpt>E<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Otherwise, the conversion specification is <bpt id="p1">**</bpt>lg<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>flags<ept id="p1">**</ept><ph id="ph1"> &amp; </ph><bpt id="p2">**</bpt>ios_base::uppercase<ept id="p2">**</ept> is nonzero, <bpt id="p3">**</bpt>g<ept id="p3">**</ept> is replaced with <bpt id="p4">**</bpt>G<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>flags<ept id="p1">**</ept><ph id="ph1"> &amp; </ph><bpt id="p2">**</bpt>ios_base::fixed<ept id="p2">**</ept> is nonzero or if <bpt id="p3">**</bpt>iosbase<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>precision<ept id="p1">](../standard-library/ios-base-class.md#ios_base__precision)</ept> is greater than zero, a precision with the value <bpt id="p2">**</bpt>iosbase<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>precision<ept id="p1">**</ept> is prepended to the conversion specification.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Any padding behaves the same as for an integer output field.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The padding character is <bpt id="p1">**</bpt>fill<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Finally:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>flags<ept id="p1">**</ept><ph id="ph1"> &amp; `ios_base::`</ph><bpt id="p2">[</bpt>showpos<ept id="p2">](../standard-library/ios-functions.md#showpos)</ept> is nonzero, the flag <bpt id="p3">**</bpt><ph id="ph2">+</ph><ept id="p3">**</ept> is prepended to the conversion specification.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>flags<ept id="p1">**</ept><ph id="ph1"> &amp; `ios_base::`</ph><bpt id="p2">[</bpt>showpoint<ept id="p2">](../standard-library/ios-functions.md#showpoint)</ept> is nonzero, the flag <bpt id="p3">**</bpt><ph id="ph2">#</ph><ept id="p3">**</ept> is prepended to the conversion specification.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The fourth virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>behaves the same the third, except that the qualifier <bpt id="p1">**</bpt>l<ept id="p1">**</ept> in the conversion specification is replaced with <bpt id="p2">**</bpt>L<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The fifth virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>behaves the same the first, except that the conversion specification is <ph id="ph1">`p`</ph><bpt id="p1">**</bpt>,<ept id="p1">**</ept> plus any qualifier needed to specify padding.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The sixth virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it generates a Boolean output field from <ph id="ph1">` val`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>A Boolean output field takes one of two forms.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>iosbase<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>flags<ept id="p1">**</ept><ph id="ph1"> &amp; `ios_base::`</ph><bpt id="p2">[</bpt>boolalpha<ept id="p2">](../standard-library/ios-functions.md#boolalpha)</ept> is <bpt id="p3">**</bpt>false<ept id="p3">**</ept>, the member function returns <ph id="ph2">`do_put`</ph>(_ <bpt id="p4">*</bpt>Next<ept id="p4">*</ept>, <ph id="ph3">\_</ph> <bpt id="p5">*</bpt>Iosbase<ept id="p5">*</ept>, <ph id="ph4">\_</ph> <bpt id="p6">*</bpt>Fill<ept id="p6">*</ept>, ( <bpt id="p7">**</bpt>long<ept id="p7">**</ept>) <ph id="ph5">` val`</ph>), which typically produces a generated sequence of either 0 (for <bpt id="p8">**</bpt>false<ept id="p8">**</ept>) or 1 (for <bpt id="p9">**</bpt>true<ept id="p9">**</ept>).</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Otherwise, the generated sequence is either <bpt id="p1">**</bpt>fac<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>falsename<ept id="p1">](../standard-library/numpunct-class.md#numpunct__falsename)</ept><ph id="ph1">`)`</ph> (for <bpt id="p2">**</bpt>false<ept id="p2">**</ept>), or <bpt id="p3">**</bpt>fac<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>truename<ept id="p1">](../standard-library/numpunct-class.md#numpunct__truename)</ept> (for <bpt id="p2">**</bpt>true<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The seventh virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it replaces a conversion specification of <bpt id="p1">**</bpt>ld<ept id="p1">**</ept> with <bpt id="p2">**</bpt>lld<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The eighth virtual protected member function:</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>behaves the same as the first, except that it replaces a conversion specification of <ph id="ph1">`ld`</ph> with <ph id="ph2">`llu`</ph>.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>put<ept id="p1">](#num_put__put)</ept>, which calls <ph id="ph1">`do_put`</ph>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>num_put::iter_type</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A type that describes an output iterator.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <bpt id="p1">**</bpt>OutputIterator.<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>num_put::num_put</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>The constructor for objects of type <ph id="ph1">`num_put`</ph>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Integer value used to specify the type of memory management for the object.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The possible values for the <ph id="ph1">`_Refs`</ph> parameter and their significance are:</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>0: The lifetime of the object is managed by the locales that contain it.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>1: The lifetime of the object must be manually managed.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>0: These values are not defined.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>No direct examples are possible, because the destructor is protected.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The constructor initializes its base object with <bpt id="p1">**</bpt>locale::<ept id="p1">**</ept><bpt id="p2">[</bpt>facet<ept id="p2">](../standard-library/locale-class.md#facet_class)</ept>(_ <bpt id="p3">*</bpt>Refs<ept id="p3">*</ept>).</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>num_put::put</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Converts a number into a sequence of <bpt id="p1">**</bpt>CharType<ept id="p1">**</ept>s that represents the number formatted for a given locale.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>An iterator addressing the first element of the inserted string.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Specified the stream that contains locale with the numpunct facet used to punctuate the output and flags for formatting the output.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>A character that is used for spacing.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The number or Boolean type that is to be output.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>An output iterator the addresses the position one beyond the last element produced.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>All member functions return <bpt id="p1">[</bpt>do_put<ept id="p1">](#num_put__do_put)</ept>( <ph id="ph1">` next`</ph>, <ph id="ph2">`_Iosbase`</ph>, <ph id="ph3">`_Fill`</ph>, <ph id="ph4">` val`</ph>).</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>locale&gt;</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>facet Class</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>