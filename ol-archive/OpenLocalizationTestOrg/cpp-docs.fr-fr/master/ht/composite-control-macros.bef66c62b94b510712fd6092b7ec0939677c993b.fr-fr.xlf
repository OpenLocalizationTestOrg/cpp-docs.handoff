<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89c894947e9d0a1963e399c6c30346764600be3e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\composite-control-macros.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5ade92603d6fd884193d3abe05925769cf1954d4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dca52b005f03b5873fb2cd01d5b4c2e3d35526d3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Composite Control Macros | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Composite Control Macros</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>These macros define event sink maps and entries.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>BEGIN_SINK_MAP</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Marks the beginning of the event sink map for the composite control.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>END_SINK_MAP</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Marks the end of the event sink map for the composite control.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>SINK_ENTRY</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Entry to the event sink map.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>SINK_ENTRY_EX</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Entry to the event sink map with an additional parameter.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>SINK_ENTRY_INFO</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Entry to the event sink map with manually supplied type information for use with <bpt id="p1">[</bpt>IDispEventSimpleImpl<ept id="p1">](../../atl/reference/idispeventsimpleimpl-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>BEGIN_SINK_MAP</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Declares the beginning of the event sink map for the composite control.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>[in] Specifies the control.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#104</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>END_SINK_MAP</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Declares the end of the event sink map for the composite control.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#104</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>SINK_ENTRY</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Declares the handler function ( <ph id="ph1">`fn`</ph>) for the specified event ( <ph id="ph2">`dispid`</ph>), of the control identified by <ph id="ph3">`id`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>[in] Identifies the control.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>[in] Identifies the specified event.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>[in] Name of the event handler function.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>This function must use the <bpt id="p1">**</bpt>_stdcall<ept id="p1">**</ept> calling convention and have the appropriate dispinterface-style signature.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#104</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>SINK_ENTRY_EX</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Declares the handler function ( <ph id="ph1">`fn`</ph>) for the specified event ( <ph id="ph2">`dispid`</ph>), of the dispatch interface ( <bpt id="p1">*</bpt>iid)<ept id="p1">*</ept>, for the control identified by <ph id="ph3">`id`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>[in] Identifies the control.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>[in] Identifies the dispatch interface.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>[in] Identifies the specified event.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>[in] Name of the event handler function.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This function must use the <bpt id="p1">**</bpt>_stdcall<ept id="p1">**</ept> calling convention and have the appropriate dispinterface-style signature.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#136</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>SINK_ENTRY_INFO</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`SINK_ENTRY_INFO`</ph> macro within an event sink map to provide the information needed by <bpt id="p1">[</bpt>IDispEventSimpleImpl<ept id="p1">](../../atl/reference/idispeventsimpleimpl-class.md)</ept> to route events to the relevant handler function.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>[in] Unsigned integer identifying the event source.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>This value must match the <ph id="ph1">`nID`</ph> template parameter used in the related <bpt id="p1">[</bpt>IDispEventSimpleImpl<ept id="p1">](../../atl/reference/idispeventsimpleimpl-class.md)</ept> base class.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>[in] IID identifying the dispatch interface.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>[in] DISPID identifying the specified event.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>[in] Name of the event handler function.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This function must use the <bpt id="p1">**</bpt>_stdcall<ept id="p1">**</ept> calling convention and have the appropriate dispinterface-style signature.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>[in] Type information for the event handler function.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This type information is provided in the form of a pointer to an <ph id="ph1">`_ATL_FUNC_INFO`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>is the only option supported in Windows CE for the <ph id="ph1">`CALLCONV`</ph> field of the <ph id="ph2">`_ATL_FUNC_INFO`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Any other value is unsupported thus its behavior undefined.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The first four macro parameters are the same as those for the <bpt id="p1">[</bpt>SINK_ENTRY_EX<ept id="p1">](#sink_entry_ex)</ept> macro.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The final parameter provides type information for the event.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>IDispEventSimpleImpl Class</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>This class provides implementations of the <ph id="ph1">`IDispatch`</ph> methods, without getting type information from a type library.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>This class and its members cannot be used in applications that execute in the <ph id="ph1">[!INCLUDE[wrt](../../atl/reference/includes/wrt_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A unique identifier for the source object.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`IDispEventSimpleImpl`</ph> is the base class for a composite control, use the resource ID of the desired contained control for this parameter.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>In other cases, use an arbitrary positive integer.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The user's class, which is derived from <ph id="ph1">`IDispEventSimpleImpl`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The pointer to the IID of the event dispinterface implemented by this class.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>provides a way of implementing an event dispinterface without requiring you to supply implementation code for every method/event on that interface.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>provides implementations of the <ph id="ph1">`IDispatch`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>You only need to supply implementations for the events that you are interested in handling.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>works in conjunction with the <bpt id="p1">[</bpt>event sink map<ept id="p1">](#begin_sink_map)</ept> in your class to route events to the appropriate handler function.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>To use this class:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Add a <bpt id="p1">[</bpt>SINK_ENTRY_INFO<ept id="p1">](#sink_entry_info)</ept> macro to the event sink map for each event on each object that you want to handle.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Supply type information for each event by passing a pointer to an <bpt id="p1">[</bpt>_ATL_FUNC_INFO<ept id="p1">](../../atl/reference/atl-func-info-structure.md)</ept> structure as a parameter to each entry.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>On the x86 platform, the <ph id="ph1">`_ATL_FUNC_INFO.cc`</ph> value must be CC_CDECL with the callback function calling method of __stdcall.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>DispEventAdvise<ept id="p1">](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventadvise)</ept> to establish the connection between the source object and the base class.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>DispEventUnadvise<ept id="p1">](idispeventsimpleimpl-class.md#idispeventsimpleimpl__dispeventunadvise)</ept> to break the connection.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You must derive from <ph id="ph1">`IDispEventSimpleImpl`</ph> (using a unique value for <ph id="ph2">`nID`</ph>) for each object for which you need to handle events.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>You can reuse the base class by unadvising against one source object then advising against a different source object, but the maximum number of source objects that can be handled by a single object at one time is limited by the number of <ph id="ph1">`IDispEventSimpleImpl`</ph> base classes.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>IDispEventSimplImpl<ept id="p1">**</ept> provides the same functionality as <bpt id="p2">[</bpt>IDispEventImpl<ept id="p2">](../../atl/reference/idispeventimpl-class.md)</ept>, except it does not get type information about the interface from a type library.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The wizards generate code based only on <ph id="ph1">`IDispEventImpl`</ph>, but you can use <ph id="ph2">`IDispEventSimpleImpl`</ph> by adding the code by hand.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`IDispEventSimpleImpl`</ph> when you don't have a type library describing the event interface or want to avoid the overhead associated with using the type library.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`IDispEventSimpleImpl`</ph> provide their own implementation of <bpt id="p1">**</bpt>IUnknown::QueryInterface<ept id="p1">**</ept> enabling each <ph id="ph2">`IDispEventImpl`</ph> or <ph id="ph3">`IDispEventSimpleImpl`</ph> base class to act as a separate COM identity while still allowing direct access to class members in your main COM object.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CE ATL implementation of ActiveX event sinks only supports return values of type HRESULT or void from your event handler methods; any other return value is unsupported and its behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Supporting IDispEventImpl<ept id="p1">](../../atl/supporting-idispeventimpl.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Macros</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Composite Control Global Functions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>