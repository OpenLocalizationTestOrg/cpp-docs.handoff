<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8d95a5c98c09069a6a3816368826d001dcbdd6d1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\safe-libraries-cpp-standard-library.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0381d558005153ad21808015db4f34af7dd4337e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ebcdd0e26a79f98f6b1dbfc32474050c76fe26a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Safe Libraries: C++ Standard Library | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Safe Libraries: C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Several enhancements have been made to the libraries that ship with Visual C++, including the Standard C++ Library, to make them more secure.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Several methods in the Standard C++ Library have been identified as potentially unsafe because they could lead to a buffer overrun or other code defect.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The use of these methods is discouraged, and new, more secure methods have been created to replace them.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>These new methods all end in <ph id="ph1">`_s`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Several enhancements have also been made to make iterators and algorithms more secure.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Checked Iterators<ept id="p1">](../standard-library/checked-iterators.md)</ept>, <bpt id="p2">[</bpt>Debug Iterator Support<ept id="p2">](../standard-library/debug-iterator-support.md)</ept> and <bpt id="p3">[</bpt>_ITERATOR_DEBUG_LEVEL<ept id="p3">](../standard-library/iterator-debug-level.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following table lists the Standard C++ Library methods that are potentially unsafe, as well as their safer equivalent:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Potentially unsafe method</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Safer equivalent</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>basic_string::copy</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>basic_string::_Copy_s</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>char_traits::copy</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>char_traits::_Copy_s</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you call any one of the potentially unsafe methods above, or if you use iterators incorrectly, the compiler will generate <bpt id="p1">[</bpt>Compiler Warning (level 3) C4996<ept id="p1">](../error-messages/compiler-warnings/compiler-warning-level-3-c4996.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For information on how to disable these warnings, see <bpt id="p1">[</bpt>_SCL_SECURE_NO_WARNINGS<ept id="p1">](../standard-library/scl-secure-no-warnings.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>In This Section</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>_ITERATOR_DEBUG_LEVEL</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>_SCL_SECURE_NO_WARNINGS</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Checked Iterators</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Debug Iterator Support</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>STL Overview</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>