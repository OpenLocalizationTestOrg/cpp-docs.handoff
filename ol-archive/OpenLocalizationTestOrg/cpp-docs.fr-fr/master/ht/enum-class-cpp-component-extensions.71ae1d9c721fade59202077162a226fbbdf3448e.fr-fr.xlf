<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c52f611029ad3a061649762024a2638217bbcdf</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\enum-class-cpp-component-extensions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b00472e823c99bde52ce9e6d570b2fbeff1f0cb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d2dfa82271d0e7fd50ce365ec9e847b46d771bda</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>enum class  (C++ Component Extensions) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>enum class  (C++ Component Extensions)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Declares an enumeration at namespace scope, which is a user-defined type consisting of a set of named constants called enumerators.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>All Runtimes</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>C++/CX and C++/CLI support <ph id="ph1">`public enum class`</ph> and <ph id="ph2">`private enum class`</ph> which are similar to the standard C++ <ph id="ph3">`enum class`</ph> but with the addition of the accessibility specifier.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept>, the C++11 <ph id="ph1">`enum class`</ph> type is permitted but will generate warning C4472 which is intended to ensure that you really want the ISO enum type and not the C++/CX and C++/CLI type.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about the ISO Standard C++ <ph id="ph1">`enum`</ph> keyword, see <bpt id="p1">[</bpt>Enumerations<ept id="p1">](../cpp/enumerations-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>access</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The accessibility of the enumeration, which can be <ph id="ph1">`public`</ph> or <ph id="ph2">`private`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>enumeration-identifier</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The name of the enumeration.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>underlying-type</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>(Optional) The underlying type of the enumeration.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>(Optional.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>only) The underlying type of the enumeration, which can be <ph id="ph1">`bool`</ph>, <ph id="ph2">`char`</ph>, <ph id="ph3">`char16`</ph>, <ph id="ph4">`int16`</ph>, <ph id="ph5">`uint16`</ph>, <ph id="ph6">`int`</ph>, <ph id="ph7">`uint32`</ph>, <ph id="ph8">`int64`</ph>, or <ph id="ph9">`uint64`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>enumerator-list</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A comma-delimited list of enumerator names.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The value of each enumerator is a constant expression that is either defined implicitly by the compiler, or explicitly by the notation, <bpt id="p1">*</bpt>enumerator<ept id="p1">*</ept><ph id="ph1">`=`</ph><bpt id="p2">*</bpt>constant-expression<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>By default, the value of the first enumerator is zero if it is implicitly defined.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The value of each subsequent implicitly-defined enumerator is the value of the previous enumerator + 1.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>var</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(Optional) The name of a variable of the enumeration type.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, and examples, see <bpt id="p1">[</bpt>Enums<ept id="p1">](http://msdn.microsoft.com/%20library/windows/apps/hh755820.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Note that the compiler emits error messages if the constant expression that defines the value of an enumerator cannot be represented by the <bpt id="p1">*</bpt>underlying-type<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>However, the compiler does not report an error for a value that is inappropriate for the underlying type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>underlying-type<ept id="p1">*</ept> is numeric, and an enumerator specifies the maximum value for that type, the value of the next implicitly defined enumeratoin cannot be represented.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>underlying-type<ept id="p1">*</ept> is <ph id="ph1">`bool`</ph>, and more than two enumerators are implicitly defined, the enumerators after the first two cannot be represented.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>underlying-type<ept id="p1">*</ept> is <ph id="ph1">`char16`</ph>, and the enumeration value ranges from 0xD800 through 0xDFFF, the value can be represented.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>However, the value logically incorrect because it represents half a Unicode surrogate pair and should not appear in isolation.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/ZW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The accessibility of the enum.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Can be either <bpt id="p1">**</bpt>public<ept id="p1">**</ept> or <ph id="ph1">`private`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A comma-separated list of the identifiers (enumerators) in the enumeration.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The name of the enumeration.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Anonymous managed enumerations are not allowed.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>(optional)</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The underlying type of the <bpt id="p1">*</bpt>identifiers<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This can be any scalar type, such as signed or unsigned versions of int, short, or long.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>or <ph id="ph1">`char`</ph> is also allowed.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>(optional)</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The name of a variable of the enumeration type.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>enum class<ept id="p1">**</ept> and <bpt id="p2">**</bpt>enum struct<ept id="p2">**</ept> are equivalent declarations.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>There are two types of enums: managed or C++/CX and standard.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A managed or C++/CX enum might be defined as follows,</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>and is semantically equivalent to:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A standard enum might be defined as follows:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>and is semantically equivalent to:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Managed enumerator names (<bpt id="p1">*</bpt>identifiers<ept id="p1">*</ept>) are not injected into the scope where the enumeration is defined; all references to the enumerators must be fully qualified (<bpt id="p2">*</bpt>name<ept id="p2">*</ept><ph id="ph1">`::`</ph><bpt id="p3">*</bpt>identifier<ept id="p3">*</ept>).</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For this reason, you cannot define an anonymous managed enum.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The enumerators of a standard enum are strongly injected into the enclosing scope.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>That is, if there is another symbol with the same name as an enumerator in the enclosing scope, the compiler will generate an error.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In Visual C++ 2002 and Visual C++ 2003, enumerators were weakly injected (visible in the enclosing scope unless there was another identifier with the same name).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If a standard C++ enum is defined (without <bpt id="p1">**</bpt>class<ept id="p1">**</ept> or <ph id="ph1">`struct`</ph>), compiling with <bpt id="p2">**</bpt>/clr<ept id="p2">**</ept> will cause the enumeration to be compiled as a managed enum.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The enumeration still has the semantics of an unmanaged enumeration.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Note, the compiler injects an attribute, <ph id="ph1">`Microsoft::VisualC::NativeEnumAttribute`</ph>, which the Visual C++ compiler recognizes, to identify a programmer's intent for the enum to be a native enum.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Other compilers will simply see the standard enum as a managed enum.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A named, standard enum compiled with /clr will be visible in the assembly as a managed enum, and can be consumed by any other managed compiler.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>However, an unnamed standard enum will not be publicly visible from the assembly.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>In Visual C++ 2002 and Visual C++ 2003, a standard enum used as the type in a function parameter:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>would emit the following in MSIL for the function signature:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>However, in current versions of the compiler, the standard enum is emitted as a managed enum with a [NativeEnumAttribute] and the following in MSIL for the function signature:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information about native enums, see <bpt id="p1">[</bpt>C++ Enumeration Declarations<ept id="p1">](../cpp/enumerations-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For more information on CLR enums, see:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Underlying Type of an Enum</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>desc</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Component Extensions for Runtime Platforms</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>