<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c95491aee301c91bd589563d01f3d4b349430213</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\multithreading-terminating-threads.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">96b77e316f90940ceab34ffcd6ea561068938fae</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4280a763a2aabe69744f5963a75e1a0e12a65f02</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Multithreading: Terminating Threads | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Multithreading: Terminating Threads</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Two normal situations cause a thread to terminate: the controlling function exits or the thread is not allowed to run to completion.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If a word processor used a thread for background printing, the controlling function would terminate normally if printing completed successfully.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If the user wants to cancel the printing, however, the background printing thread has to be terminated prematurely.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic explains both how to implement each situation and how to get the exit code of a thread after it terminates.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Normal Thread Termination</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Premature Thread Termination</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Retrieving the Exit Code of a Thread</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Normal Thread Termination</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For a worker thread, normal thread termination is simple: Exit the controlling function and return a value that signifies the reason for termination.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can use either the <bpt id="p1">[</bpt>AfxEndThread<ept id="p1">](http://msdn.microsoft.com/library/b8215409-7724-4159-9156-16b543443b99)</ept> function or a <ph id="ph1">`return`</ph> statement.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Typically, 0 signifies successful completion, but that is up to you.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For a user-interface thread, the process is just as simple: from within the user-interface thread, call <bpt id="p1">[</bpt>PostQuitMessage<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms644945)</ept> in the <ph id="ph1">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The only parameter that <bpt id="p1">**</bpt>PostQuitMessage<ept id="p1">**</ept> takes is the exit code of the thread.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>As for worker threads, 0 typically signifies successful completion.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Premature Thread Termination</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Terminating a thread prematurely is almost as simple: Call <bpt id="p1">[</bpt>AfxEndThread<ept id="p1">](http://msdn.microsoft.com/library/b8215409-7724-4159-9156-16b543443b99)</ept> from within the thread.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Pass the desired exit code as the only parameter.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>This stops execution of the thread, deallocates the thread's stack, detaches all DLLs attached to the thread, and deletes the thread object from memory.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>must be called from within the thread to be terminated.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you want to terminate a thread from another thread, you must set up a communication method between the two threads.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Retrieving the Exit Code of a Thread</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To get the exit code of either the worker or the user-interface thread, call the <bpt id="p1">[</bpt>GetExitCodeThread<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms683190)</ept> function.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For information about this function, see the <ph id="ph1">[!INCLUDE[winsdkshort](../atl-mfc-shared/reference/includes/winsdkshort_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This function takes the handle to the thread (stored in the <ph id="ph1">`m_hThread`</ph> data member of <ph id="ph2">`CWinThread`</ph> objects) and the address of a <ph id="ph3">`DWORD`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If the thread is still active, <bpt id="p1">**</bpt>GetExitCodeThread<ept id="p1">**</ept> places <bpt id="p2">**</bpt>STILL_ACTIVE<ept id="p2">**</ept> in the supplied <ph id="ph1">`DWORD`</ph> address; otherwise, the exit code is placed in this address.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Retrieving the exit code of <bpt id="p1">[</bpt>CWinThread<ept id="p1">](../mfc/reference/cwinthread-class.md)</ept> objects takes an extra step.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>By default, when a <ph id="ph1">`CWinThread`</ph> thread terminates, the thread object is deleted.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This means you cannot access the <ph id="ph1">`m_hThread`</ph> data member because the <ph id="ph2">`CWinThread`</ph> object no longer exists.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To avoid this situation, do one of the following:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Set the <ph id="ph1">`m_bAutoDelete`</ph> data member to <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This allows the <ph id="ph1">`CWinThread`</ph> object to survive after the thread has been terminated.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You can then access the <ph id="ph1">`m_hThread`</ph> data member after the thread has been terminated.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If you use this technique, however, you are responsible for destroying the <ph id="ph1">`CWinThread`</ph> object because the framework will not automatically delete it for you.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This is the preferred method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Store the thread's handle separately.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>After the thread is created, copy its <ph id="ph1">`m_hThread`</ph> data member (using <bpt id="p1">**</bpt>::DuplicateHandle<ept id="p1">**</ept>) to another variable and access it through that variable.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>This way the object is deleted automatically when termination occurs and you can still find out why the thread terminated.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Be careful that the thread does not terminate before you can duplicate the handle.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The safest way to do this is to pass <bpt id="p1">**</bpt>CREATE_SUSPENDED<ept id="p1">**</ept> to <bpt id="p2">[</bpt>AfxBeginThread<ept id="p2">](http://msdn.microsoft.com/library/e9e8684d-24f7-4599-8fdf-1f4f560a753b)</ept>, store the handle, and then resume the thread by calling <bpt id="p3">[</bpt>ResumeThread<ept id="p3">](../topic/../mfc/reference/cwinthread-class.md#cwinthread__resumethread)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Either method allows you to determine why a <ph id="ph1">`CWinThread`</ph> object terminated.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Multithreading with C++ and MFC</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>_endthread, _endthreadex</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>_beginthread, _beginthreadex</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>ExitThread</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>