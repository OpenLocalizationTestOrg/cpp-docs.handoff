<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">45e55a710970b0b4b56c0b0f5d115013deb3e68d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\exceptions-database-exceptions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">afc1d1e981b3cdf6ea0a0891fa4373b68fc47c37</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">80f1147e071d11febb789886a4ac652464ad48f2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Exceptions: Database Exceptions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Exceptions: Database Exceptions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article explains how to handle database exceptions.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Most of the material in this article applies whether you are working with the MFC classes for Open Database Connectivity (ODBC) or the MFC classes for Data Access Objects (DAO).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Material specific to one or the other model is explicitly marked.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Topics include:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Approaches to exception handling</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A database exception-handling example</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Approaches to Exception Handling</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The approach is the same whether you are working with DAO or ODBC.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You should always write exception handlers to handle exceptional conditions.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The most pragmatic approach to catching database exceptions is to test your application with exception scenarios.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Determine the likely exceptions that might occur for an operation in your code, and force the exception to occur.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Then examine the trace output to see what exception is thrown, or examine the returned error information in the debugger.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This lets you know which return codes you'll see for the exception scenarios you are using.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Error Codes Used for ODBC Exceptions</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In addition to return codes defined by the framework, which have names of the form <bpt id="p1">**</bpt>AFX_SQL_ERROR_XXX<ept id="p1">**</ept>, some <bpt id="p2">[</bpt>CDBExceptions<ept id="p2">](../mfc/reference/cdbexception-class.md)</ept> are based on <bpt id="p3">[</bpt>ODBC<ept id="p3">](../data/odbc/odbc-basics.md)</ept> return codes.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The return codes for such exceptions have names of the form <bpt id="p1">**</bpt>SQL_ERROR_XXX<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The return codes — both framework-defined and ODBC-defined — that the database classes can return are documented under the <bpt id="p1">[</bpt>m_nRetCode<ept id="p1">](../mfc/reference/cdbexception-class.md#cdbexception__m_nretcode)</ept> data member of class <ph id="ph1">`CDBException`</ph>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Additional information about return codes defined by ODBC is available in the ODBC SDK <bpt id="p1">*</bpt>Programmer's Reference<ept id="p1">*</ept> in the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Error Codes Used for DAO Exceptions</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For DAO exceptions, more information is typically available.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can access error information through three data members of a caught <bpt id="p1">[</bpt>CDaoException<ept id="p1">](../mfc/reference/cdaoexception-class.md)</ept> object:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>m_pErrorInfo<ept id="p1">](../mfc/reference/cdaoexception-class.md#cdaoexception__m_perrorinfo)</ept> contains a pointer to a <bpt id="p2">[</bpt>CDaoErrorInfo<ept id="p2">](../mfc/reference/cdaoerrorinfo-structure.md)</ept> object that encapsulates error information in DAO's collection of error objects associated with the database.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>m_nAfxDaoError<ept id="p1">](../mfc/reference/cdaoexception-class.md#cdaoexception__m_nafxdaoerror)</ept> contains an extended error code from the MFC DAO classes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>These error codes, which have names of the form <bpt id="p1">**</bpt>AFX_DAO_ERROR_XXX<ept id="p1">**</ept>, are documented under the data member in <ph id="ph1">`CDaoException`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>m_scode<ept id="p1">](../mfc/reference/cdaoexception-class.md#cdaoexception__m_scode)</ept> contains an OLE <ph id="ph1">`SCODE`</ph> from DAO, if applicable.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You'll seldom need to work with this error code, however.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Usually more information is available in the other two data members.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See the data member for more about <ph id="ph1">`SCODE`</ph> values.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Additional information about DAO errors, the DAO Error object type, and the DAO Errors collection is available under class <bpt id="p1">[</bpt>CDaoException<ept id="p1">](../mfc/reference/cdaoexception-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A Database Exception-Handling Example</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The following example attempts to construct a <bpt id="p1">[</bpt>CRecordset<ept id="p1">](../mfc/reference/crecordset-class.md)</ept>-derived object on the heap with the <bpt id="p2">**</bpt>new<ept id="p2">**</ept> operator, and then open the recordset (for an ODBC data source).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For a similar example for the DAO classes, see "DAO Exception Example" below.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>ODBC Exception Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>Open<ept id="p1">](../mfc/reference/crecordset-class.md#crecordset__open)</ept> member function could throw an exception (of type <bpt id="p2">[</bpt>CDBException<ept id="p2">](../mfc/reference/cdbexception-class.md)</ept> for the ODBC classes), so this code brackets the <bpt id="p3">**</bpt>Open<ept id="p3">**</ept> call with a <bpt id="p4">**</bpt>try<ept id="p4">**</ept> block.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The subsequent <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> block will catch a <ph id="ph1">`CDBException`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You could examine the exception object itself, called <ph id="ph1">`e`</ph>, but in this case it is enough to know that the attempt to create a recordset has failed.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>catch<ept id="p1">**</ept> block displays a message box and cleans up by deleting the recordset object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#36</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>DAO Exception Example</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The DAO example is similar to the example for ODBC, but you can typically retrieve more kinds of information.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The following code also attempts to open a recordset.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If that attempt throws an exception, you can examine a data member of the exception object for error information.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>As with the previous ODBC example, it is probably enough to know that the attempt to create a recordset failed.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>NVC_MFCDatabase#37</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This code gets an error message string from the <bpt id="p1">[</bpt>m_pErrorInfo<ept id="p1">](../mfc/reference/cdaoexception-class.md#cdaoexception__m_perrorinfo)</ept> member of the exception object.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>MFC fills this member when it throws the exception.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For a discussion of the error information returned by a <ph id="ph1">`CDaoException`</ph> object, see classes <bpt id="p1">[</bpt>CDaoException<ept id="p1">](../mfc/reference/cdaoexception-class.md)</ept> and <bpt id="p2">[</bpt>CDaoErrorInfo<ept id="p2">](../mfc/reference/cdaoerrorinfo-structure.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When you are working with Microsoft Jet (.mdb) databases, and in most cases when you are working with ODBC, there will be only one error object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the rare case when you are using an ODBC data source and there are multiple errors, you can loop through DAO's Errors collection based on the number of errors returned by <bpt id="p1">[</bpt>CDaoException::GetErrorCount<ept id="p1">](../mfc/reference/cdaoexception-class.md#cdaoexception__geterrorcount)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Each time through the loop, call <bpt id="p1">[</bpt>CDaoException::GetErrorInfo<ept id="p1">](../mfc/reference/cdaoexception-class.md#cdaoexception__geterrorinfo)</ept> to refill the <ph id="ph1">`m_pErrorInfo`</ph> data member.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Exception Handling</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>