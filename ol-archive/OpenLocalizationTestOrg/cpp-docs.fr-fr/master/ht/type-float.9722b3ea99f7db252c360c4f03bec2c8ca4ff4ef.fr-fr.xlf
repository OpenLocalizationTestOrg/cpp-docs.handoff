<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0cd20da28cf498e02169d08295e062e2b50c8c1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\type-float.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90f97fca4ff60375e4f26007e78535ff5e6e3e62</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e99a36c1bf448f88fe8d2a4e21e67aa7d85283a3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type float | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type float</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Floating-point numbers use the IEEE (Institute of Electrical and Electronics Engineers) format.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Single-precision values with float type have 4 bytes, consisting of a sign bit, an 8-bit excess-127 binary exponent, and a 23-bit mantissa.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The mantissa represents a number between 1.0 and 2.0.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Since the high-order bit of the mantissa is always 1, it is not stored in the number.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This representation gives a range of approximately 3.4E–38 to 3.4E+38 for type float.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can declare variables as float or double, depending on the needs of your application.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The principal differences between the two types are the significance they can represent, the storage they require, and their range.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The following table shows the relationship between significance and storage requirements.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Floating-Point Types</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Significant digits</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Number of bytes</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>6 – 7</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>15 – 16</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>8</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Floating-point variables are represented by a mantissa, which contains the value of the number, and an exponent, which contains the order of magnitude of the number.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The following table shows the number of bits allocated to the mantissa and the exponent for each floating-point type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The most significant bit of any float or double is always the sign bit.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If it is 1, the number is considered negative; otherwise, it is considered a positive number.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Lengths of Exponents and Mantissas</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Exponent length</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Mantissa length</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>8 bits</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>23 bits</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>11 bits</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>52 bits</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because exponents are stored in an unsigned form, the exponent is biased by half its possible value.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For type float, the bias is 127; for type double, it is 1023.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can compute the actual exponent value by subtracting the bias value from the exponent value.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The mantissa is stored as a binary fraction greater than or equal to 1 and less than 2.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For types float and double, there is an implied leading 1 in the mantissa in the most-significant bit position, so the mantissas are actually 24 and 53 bits long, respectively, even though the most-significant bit is never stored in memory.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Instead of the storage method just described, the floating-point package can store binary floating-point numbers as denormalized numbers.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>"Denormalized numbers" are nonzero floating-point numbers with reserved exponent values in which the most-significant bit of the mantissa is 0.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>By using the denormalized format, the range of a floating-point number can be extended at the cost of precision.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>You cannot control whether a floating-point number is represented in normalized or denormalized form; the floating-point package determines the representation.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The floating-point package never uses a denormalized form unless the exponent becomes less than the minimum that can be represented in a normalized form.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following table shows the minimum and maximum values you can store in variables of each floating-point type.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The values listed in this table apply only to normalized floating-point numbers; denormalized floating-point numbers have a smaller minimum value.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Note that numbers retained in 80<bpt id="p1">*</bpt>x<ept id="p1">*</ept>87 registers are always represented in 80-bit normalized form; numbers can only be represented in denormalized form when stored in 32-bit or 64-bit floating-point variables (variables of type float and type long).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Range of Floating-Point Types</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Type</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Minimum value</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Maximum value</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>float</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>1.175494351 E – 38</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>3.402823466 E + 38</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>double</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>2.2250738585072014 E – 308</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>1.7976931348623158 E + 308</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If precision is less of a concern than storage, consider using type float for floating-point variables.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Conversely, if precision is the most important criterion, use type double.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Floating-point variables can be promoted to a type of greater significance (from type float to type double).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Promotion often occurs when you perform arithmetic on floating-point variables.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This arithmetic is always done in as high a degree of precision as the variable with the highest degree of precision.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>For example, consider the following type declarations:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>In the preceding example, the variable <ph id="ph1">`f_short`</ph> is promoted to type double and multiplied by <ph id="ph2">`f_long`</ph>; then the result is rounded to type float before being assigned to <ph id="ph3">`f_short`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the following example (which uses the declarations from the preceding example), the arithmetic is done in float (32-bit) precision on the variables; the result is then promoted to type double:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Storage of Basic Types</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>