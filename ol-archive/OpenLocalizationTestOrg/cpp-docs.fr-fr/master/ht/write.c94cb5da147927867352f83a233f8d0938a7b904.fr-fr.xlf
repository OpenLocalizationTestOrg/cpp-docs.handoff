<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79a241b0cec8f0e36890a2d2f105cec6f54f2fc0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\write.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c4e3515b7cc4f2d227008b5ecf0bb85f47afdb2f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">343764c398a1aab6995b08b85da3746bc481cefa</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_write | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_write</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Writes data to a file.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>File descriptor of file into which data is written.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Data to be written.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Number of bytes.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If successful, <ph id="ph1">`_write`</ph> returns the number of bytes actually written.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the actual space remaining on the disk is less than the size of the buffer the function is trying to write to the disk, <ph id="ph1">`_write`</ph> fails and does not flush any of the buffer's contents to the disk.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A return value of –1 indicates an error.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If invalid parameters are passed, this function invokes the invalid parameter handler, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, the function returns -1 and <ph id="ph1">`errno`</ph> is set to one of three values: <ph id="ph2">`EBADF`</ph>, which means the file descriptor is invalid or the file is not opened for writing; <ph id="ph3">`ENOSPC`</ph>, which means there is not enough space left on the device for the operation; or <ph id="ph4">`EINVAL`</ph>, which means that <ph id="ph5">`buffer`</ph> was a null pointer or that an odd <ph id="ph6">`count`</ph> of bytes was passed to be written to a file in Unicode mode.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about these and other return codes, see <bpt id="p1">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the file is opened in text mode, each linefeed character is replaced with a carriage return – linefeed pair in the output.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The replacement does not affect the return value.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When the file is opened in Unicode translation mode—for example, if <ph id="ph1">`fd`</ph> is opened by using <ph id="ph2">`_open`</ph> or <ph id="ph3">`_sopen`</ph> and a mode parameter that includes <ph id="ph4">`_O_WTEXT`</ph>, <ph id="ph5">`_O_U16TEXT`</ph>, or <ph id="ph6">`_O_U8TEXT`</ph>, or if it is opened by using <ph id="ph7">`fopen`</ph> and a mode parameter that includes <ph id="ph8">`ccs=UNICODE`</ph>, <ph id="ph9">`ccs=UTF-16LE`</ph>, or <ph id="ph10">`ccs=UTF-8`</ph>, or if the mode is changed to a Unicode translation mode by using <ph id="ph11">`_setmode`</ph>—<ph id="ph12">`buffer`</ph> is interpreted as a pointer to an array of <ph id="ph13">`wchar_t`</ph> that contains <bpt id="p1">**</bpt>UTF-16<ept id="p1">**</ept> data.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An attempt to write an odd number of bytes in this mode causes a parameter validation error.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_write`</ph> function writes <ph id="ph2">`count`</ph> bytes from <ph id="ph3">`buffer`</ph> into the file associated with <ph id="ph4">`fd`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The write operation begins at the current position of the file pointer (if any) associated with the given file.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the file is open for appending, the operation begins at the current end of the file.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>After the write operation, the file pointer is increased by the number of bytes actually written.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When writing to files opened in text mode, <ph id="ph1">`_write`</ph> treats a CTRL+Z character as the logical end-of-file.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When writing to a device, <ph id="ph1">`_write`</ph> treats a CTRL+Z character in the buffer as an output terminator.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>io.h&gt;</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For additional compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Low-Level I/O</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>fwrite</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>_open, _wopen</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>_read</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>_setmode</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>