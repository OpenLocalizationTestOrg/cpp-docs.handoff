<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9e124356424dd1e5be3ba328b4f508e029e5a344</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\odbc\recordset-parameterizing-a-recordset-odbc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1d77a430541879a436a8616c3f7b2cbe461dc04</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe08d658b2a80fae2a225021aea142d9fff14da9</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Recordset: Parameterizing a Recordset (ODBC) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Recordset: Parameterizing a Recordset (ODBC)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic applies to the MFC ODBC classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Sometimes you might want to be able to select records at run time, using information you have calculated or obtained from your end user.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Recordset parameters let you accomplish that goal.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This topic explains:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>The purpose of a parameterized recordset<ept id="p1">](#_core_parameterized_recordsets)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>When and why you might want to parameterize a recordset<ept id="p1">](#_core_when_to_use_parameters)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to declare parameter data members in your recordset class<ept id="p1">](#_core_parameterizing_your_recordset_class)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to pass parameter information to a recordset object at run time<ept id="p1">](#_core_passing_parameter_values_at_run_time)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Parameterized Recordsets</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A parameterized recordset lets you pass parameter information at run time.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This has two valuable effects:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It might result in better execution speed.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It lets you build a query at run time, based on information not available to you at design time, such as information obtained from your user or calculated at run time.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> to run the query, the recordset uses the parameter information to complete its <bpt id="p2">**</bpt>SQL SELECT<ept id="p2">**</ept> statement.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You can parameterize any recordset.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>When to Use Parameters</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Typical uses for parameters include:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Passing run-time arguments to a predefined query.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To pass parameters to a stored procedure, you must specify a complete custom ODBC <bpt id="p1">**</bpt>CALL<ept id="p1">**</ept> statement — with parameter placeholders — when you call <bpt id="p2">**</bpt>Open<ept id="p2">**</ept>, overriding the recordset's default SQL statement.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>CRecordset::Open<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__open)</ept> in the <bpt id="p2">*</bpt>Class Library Reference<ept id="p2">*</ept> and <bpt id="p3">[</bpt>SQL: Customizing Your Recordset's SQL Statement (ODBC)<ept id="p3">](../../data/odbc/sql-customizing-your-recordsets-sql-statement-odbc.md)</ept> and <bpt id="p4">[</bpt>Recordset: Declaring a Class for a Predefined Query (ODBC)<ept id="p4">](../../data/odbc/recordset-declaring-a-class-for-a-predefined-query-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Efficiently performing numerous requeries with different parameter information.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, each time your end user looks up information for a particular student in the student registration database, you can specify the student's name or ID as a parameter obtained from the user.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Then, when you call your recordset's <bpt id="p1">**</bpt>Requery<ept id="p1">**</ept> member function, the query selects only that student's record.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Your recordset's filter string, stored in <bpt id="p1">**</bpt>m_strFilter<ept id="p1">**</ept>, might look like this:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Suppose you obtain the student ID in the variable <ph id="ph1">`strInputID`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>When you set a parameter to <ph id="ph1">`strInputID`</ph> (for example, the student ID 100) the value of the variable is bound to the parameter placeholder represented by the "?" in the filter string.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Assign the parameter value as follows:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>You would not want to set up a filter string this way:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>For a discussion of how to use quotes correctly for filter strings, see <bpt id="p1">[</bpt>Recordset: Filtering Records (ODBC)<ept id="p1">](../../data/odbc/recordset-filtering-records-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The parameter value is different each time you requery the recordset for a new student ID.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Using a parameter is more efficient than simply a filter.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For a parameterized recordset, the database must process a SQL <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement only once.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For a filtered recordset without parameters, the <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> statement must be processed each time you <bpt id="p2">**</bpt>Requery<ept id="p2">**</ept> with a new filter value.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information about filters, see <bpt id="p1">[</bpt>Recordset: Filtering Records (ODBC)<ept id="p1">](../../data/odbc/recordset-filtering-records-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Parameterizing Your Recordset Class</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This section applies to objects derived from <ph id="ph1">`CRecordset`</ph> in which bulk row fetching has not been implemented.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you are using bulk row fetching, implementing parameters is a similar process.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Recordset: Fetching Records in Bulk (ODBC)<ept id="p1">](../../data/odbc/recordset-fetching-records-in-bulk-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Before you create your recordset class, determine what parameters you need, what their data types are, and how the recordset uses them.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>To parameterize a recordset class</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Run the <bpt id="p1">[</bpt>MFC ODBC Consumer Wizard<ept id="p1">](../../mfc/reference/adding-an-mfc-odbc-consumer.md)</ept> from <bpt id="p2">**</bpt>Add Class<ept id="p2">**</ept> to create the class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Specify field data members for the recordset's columns.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>After the wizard writes the class to a file in your project, go to the .h file and manually add one or more parameter data members to the class declaration.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The addition might look something like the following example, part of a snapshot class designed to answer the query "Which students are in the senior class?"</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Add your parameter data members after the wizard-generated field data members.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The convention is to append the word "Param" to each user-defined parameter name.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Modify the <bpt id="p1">[</bpt>DoFieldExchange<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__dofieldexchange)</ept> member function definition in the .cpp file.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Add an RFX function call for each parameter data member you added to the class.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For information about writing your RFX functions, see <bpt id="p1">[</bpt>Record Field Exchange: How RFX Works<ept id="p1">](../../data/odbc/record-field-exchange-how-rfx-works.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Precede the RFX calls for the parameters with a single call to:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>In the constructor of your recordset class, increment the count of parameters, <ph id="ph1">`m_nParams`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For information, see <bpt id="p1">[</bpt>Record Field Exchange: Working with the Wizard Code<ept id="p1">](../../data/odbc/record-field-exchange-working-with-the-wizard-code.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When you write the code that creates a recordset object of this class, place a "?" (question mark) symbol in each place in your SQL statement strings where a parameter is to be replaced.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>At run time, "?" placeholders are filled, in order, by the parameter values you pass.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The first parameter data member set after the <bpt id="p1">[</bpt>SetFieldType<ept id="p1">](../../mfc/reference/cfieldexchange-class.md#cfieldexchange__setfieldtype)</ept> call replaces the first "?" in the SQL string, the second parameter data member replaces the second "?", and so on.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Parameter order is important: the order of RFX calls for parameters in your <ph id="ph1">`DoFieldExchange`</ph> function must match the order of the parameter placeholders in your SQL string.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The most likely string to work with is the string you specify (if any) for the class's <bpt id="p1">[</bpt>m_strFilter<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__m_strfilter)</ept> data member, but some ODBC drivers might allow parameters in other SQL clauses.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Passing Parameter Values at Run Time</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You must specify parameter values before you call <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> (for a new recordset object) or <bpt id="p2">**</bpt>Requery<ept id="p2">**</ept> (for an existing one).</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To pass parameter values to a recordset object at run time</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Construct the recordset object.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Prepare a string or strings, such as the <bpt id="p1">**</bpt>m_strFilter<ept id="p1">**</ept> string, containing the SQL statement, or parts of it.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Put "?" placeholders where the parameter information is to go.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Assign a run-time parameter value to each parameter data member of the object.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> member function (or <bpt id="p2">**</bpt>Requery<ept id="p2">**</ept>, for an existing recordset).</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>For example, suppose you want to specify a filter string for your recordset using information obtained at run time.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Assume you have constructed a recordset of class <ph id="ph1">`CStudentSet`</ph> earlier — called <ph id="ph2">`rsStudent`</ph>s — and now want to requery it for a particular kind of student information.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The recordset contains records for those students whose records meet the conditions specified by the filter, which was constructed from run-time parameters.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>In this case, the recordset contains records for all senior students.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If needed, you can set the value of a parameter data member to Null, using <bpt id="p1">[</bpt>SetParamNull<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__setparamnull)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>You can likewise check whether a parameter data member is Null, using <bpt id="p1">[</bpt>IsFieldNull<ept id="p1">](../../mfc/reference/crecordset-class.md#crecordset__isfieldnull)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Recordset (ODBC)</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Recordset: Adding, Updating, and Deleting Records (ODBC)</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Recordset: How Recordsets Select Records (ODBC)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>