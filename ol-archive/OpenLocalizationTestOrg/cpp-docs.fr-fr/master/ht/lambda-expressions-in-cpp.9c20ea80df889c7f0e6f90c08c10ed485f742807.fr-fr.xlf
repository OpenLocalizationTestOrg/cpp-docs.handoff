<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">26a6322bb22d0426756afa891191c91487f1aec9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\lambda-expressions-in-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a8db117563a2276c419a954dec45c2c49958b2ba</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d6cfaff34e81ceaceac56f6f24646b3cfd33bedb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Lambda Expressions in C++ | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Lambda Expressions in C++</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In C++11, a lambda expression—often called a <bpt id="p1">*</bpt>lambda<ept id="p1">*</ept>—is a convenient way of defining an anonymous function object right at the location where it is invoked or passed as an argument to a function.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Typically lambdas are used to encapsulate a few lines of code that are passed to algorithms or asynchronous methods.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This article defines what lambdas are, compares them to other programming techniques, describes their advantages, and provides a basic example.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parts of a Lambda Expression</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The ISO C++ Standard shows a simple lambda that is passed as the third argument to the <ph id="ph1">`std::sort()`</ph> function:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This illustration shows the parts of a lambda:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Structural elements of a lambda expression</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>capture clause<ept id="p1">*</ept> (Also known as the <bpt id="p2">*</bpt>lambda-introducer<ept id="p2">*</ept> in the C++ specification.)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>parameter list<ept id="p1">*</ept> Optional.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>(Also known as the <bpt id="p1">*</bpt>lambda declarator<ept id="p1">*</ept>)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>mutable specification<ept id="p1">*</ept> Optional.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>exception-specification<ept id="p1">*</ept> Optional.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>trailing-return-type<ept id="p1">*</ept> Optional.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>lambda body<ept id="p1">*</ept>)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Capture Clause</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A lambda can introduce new variables in its body (in <bpt id="p1">**</bpt>C++14<ept id="p1">**</ept>), and it can also access—or <bpt id="p2">*</bpt>capture<ept id="p2">*</ept>--variables from the surrounding scope.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A lambda begins with the capture clause (<bpt id="p1">*</bpt>lambda-introducer<ept id="p1">*</ept> in the Standard syntax), which specifies which variables are captured, and whether the capture is by value or by reference.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Variables that have the ampersand (<ph id="ph1">`&amp;`</ph>) prefix are accessed by reference and variables that do not have it are accessed by value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>An empty capture clause, <ph id="ph1">`[ ]`</ph>, indicates that the body of the lambda expression accesses no variables in the enclosing scope.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>You can use the default capture mode (<ph id="ph1">`capture-default`</ph> in the Standard syntax) to indicate how to capture any outside variables that are referenced in the lambda: [&amp;] means all variables that you refer to are captured by reference, and [=] means they are captured by value.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You can use a default capture mode, and then specify the opposite mode explicitly for specific variables.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, if a lambda body accesses the external variable <ph id="ph1">`total`</ph> by reference and the external variable <ph id="ph2">`factor`</ph> by value, then the following capture clauses are equivalent:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Only variables that are mentioned in the lambda are captured when a <ph id="ph1">`capture-default`</ph> is used.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If a capture clause includes a <ph id="ph1">`capture-default``&amp;`</ph>, then no <ph id="ph2">`identifier`</ph> in a <ph id="ph3">`capture`</ph> of that capture clause can have the form <ph id="ph4">`&amp; identifier`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Likewise, if the capture clause includes a <ph id="ph1">`capture-default``=`</ph>, then no <ph id="ph2">`capture`</ph> of that capture clause can have the form <ph id="ph3">`= identifier`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>An identifier or <ph id="ph1">`this`</ph> cannot appear more than once in a capture clause.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following code snippet illustrates some examples.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`capture`</ph> followed by an ellipsis is a pack expansion, as shown in this <bpt id="p1">[</bpt>variadic template<ept id="p1">](../cpp/ellipses-and-variadic-templates.md)</ept> example:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To use lambda expressions in the body of a class method, pass the <ph id="ph1">`this`</ph> pointer to the capture clause to provide access to the methods and data members of the enclosing class.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For an example that shows how to use lambda expressions with class methods, see "Example: Using a Lambda Expression in a Method" in <bpt id="p1">[</bpt>Examples of Lambda Expressions<ept id="p1">](../cpp/examples-of-lambda-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When you use the capture clause, we recommend that you keep these points in mind, particularly when you use lambdas with multithreading:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Reference captures can be used to modify variables outside, but value captures cannot.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>(<ph id="ph1">`mutable`</ph> allows copies to be modified, but not originals.)</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Reference captures reflect updates to variables outside, but value captures do not.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Reference captures introduce a lifetime dependency, but value captures have no lifetime dependencies.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>This is especially important when the lambda runs asynchronously.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If you capture a local by reference in an async lambda, that local will very possibly be gone by the time the lambda runs, resulting in an access violation at run time.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Generalized capture (C++ 14)</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In C++14, you can introduce and initialize new variables in the capture clause, without the need to have those variables exist in the lambda function’s enclosing scope.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The initialization can be expressed as any arbitrary expression; the type of the new variable is deduced from the type produced by the expression.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>One benefit of this feature is that in C++14 you can capture move-only variables (such as std::unique_ptr) from the surrounding scope and use them in a lambda.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Parameter List</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>In addition to capturing variables, a lambda can accept input parameters.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A parameter list (<bpt id="p1">*</bpt>lambda declarator<ept id="p1">*</ept> in the Standard syntax) is optional and in most aspects resembles the parameter list for a function.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>C++ 14<ept id="p1">**</ept>, if the parameter type is generic, you can use the auto keyword as the type specifier.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This tells the compiler to create the function call operator as a template.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Each instance of auto in a parameter list is equivalent to a distinct type parameter.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A lambda expression can take another lambda expression as its argument.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more information, see "Higher-Order Lambda Expressions" in the topic <bpt id="p1">[</bpt>Examples of Lambda Expressions<ept id="p1">](../cpp/examples-of-lambda-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Because a parameter list is optional, you can omit the empty parentheses if you do not pass arguments to the lambda expression and its <ph id="ph1">`lambda-declarator:`</ph> does not contain <bpt id="p1">*</bpt>exception-specification<ept id="p1">*</ept>, <bpt id="p2">*</bpt>trailing-return-type<ept id="p2">*</ept>, or <ph id="ph2">`mutable`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Mutable Specification</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Typically, a lambda's function call operator is const-by-value, but use of the <ph id="ph1">`mutable`</ph> keyword cancels this out.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>It does not produce mutable data members.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The mutable specification enables the body of a lambda expression to modify variables that are captured by value.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Some of the examples later in this article show how to use <ph id="ph1">`mutable`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Exception Specification</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`throw()`</ph> exception specification to indicate that the lambda expression does not throw any exceptions.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>As with ordinary functions, the Visual C++ compiler generates warning <bpt id="p1">[</bpt>C4297<ept id="p1">](../error-messages/compiler-warnings/compiler-warning-level-1-c4297.md)</ept> if a lambda expression declares the <ph id="ph1">`throw()`</ph> exception specification and the lambda body throws an exception, as shown here:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Exception Specifications (throw)<ept id="p1">](../cpp/exception-specifications-throw-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Return Type</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The return type of a lambda expression is automatically deduced.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>You don't have to use the <bpt id="p1">[</bpt>auto<ept id="p1">](../cpp/auto-cpp.md)</ept> keyword unless you specify a <bpt id="p2">*</bpt>trailing-return-type<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>trailing-return-type<ept id="p1">*</ept> resembles the return-type part of an ordinary method or function.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>However, the return type must follow the parameter list, and you must include the trailing-return-type keyword <ph id="ph1">`-&gt;`</ph> before the return type.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>You can omit the return-type part of a lambda expression if the lambda body contains just one return statement or the expression does not return a value.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If the lambda body contains one return statement, the compiler deduces the return type from the type of the return expression.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Otherwise, the compiler deduces the return type to be <ph id="ph1">`void`</ph>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Consider the following example code snippets that illustrate this principle.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A lambda expression can produce another lambda expression as its return value.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For more information, see "Higher-Order Lambda Expressions" in <bpt id="p1">[</bpt>Examples of Lambda Expressions<ept id="p1">](../cpp/examples-of-lambda-expressions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Lambda Body</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The lambda body (<bpt id="p1">*</bpt>compound-statement<ept id="p1">*</ept> in the Standard syntax) of a lambda expression can contain anything that the body of an ordinary method or function can contain.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The body of both an ordinary function and a lambda expression can access these kinds of variables:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Captured variables from the enclosing scope, as described previously.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Locally-declared variables</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Class data members, when declared inside a class and <ph id="ph1">`this`</ph> is captured</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Any variable that has static storage duration—for example, global variables</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The following example contains a lambda expression that explicitly captures the variable <ph id="ph1">`n`</ph> by value and implicitly captures the variable <ph id="ph2">`m`</ph> by reference:</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Output:</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Because the variable <ph id="ph1">`n`</ph> is captured by value, its value remains <ph id="ph2">`0`</ph> after the call to the lambda expression.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mutable`</ph> specification allows <ph id="ph2">`n`</ph> to be modified within the lambda.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Although a lambda expression can only capture variables that have automatic storage duration, you can use variables that have static storage duration in the body of a lambda expression.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The following example uses the <ph id="ph1">`generate`</ph> function and a lambda expression to assign a value to each element in a <ph id="ph2">`vector`</ph> object.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The lambda expression modifies the static variable to generate the value of the next element.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>generate<ept id="p1">](http://msdn.microsoft.com/Library/0353f358-9651-4e00-b0c9-5bca720539a3)</ept>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The following code example uses the function from the previous example, and adds an example of a lambda expression that uses the STL algorithm <ph id="ph1">`generate_n`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This lambda expression assigns an element of a <ph id="ph1">`vector`</ph> object to the sum of the previous two elements.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`mutable`</ph> keyword is used so that the body of the lambda expression can modify its copies of the external variables <ph id="ph2">`x`</ph> and <ph id="ph3">`y`</ph>, which the lambda expression captures by value.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Because the lambda expression captures the original variables <ph id="ph1">`x`</ph> and <ph id="ph2">`y`</ph> by value, their values remain <ph id="ph3">`1`</ph> after the lambda executes.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Output:</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>generate_n<ept id="p1">](http://msdn.microsoft.com/Library/377e5b0f-1bb8-4b77-9449-fbebf57f6e5e)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Microsoft-Specific</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Lambdas are not supported in the following common language runtime (CLR) managed entities: <ph id="ph1">`ref class`</ph>, <ph id="ph2">`ref struct`</ph>, <ph id="ph3">`value class`</ph>, or <ph id="ph4">`value struct`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>If you are using a Microsoft-specific modifier such as <bpt id="p1">[</bpt>__declspec<ept id="p1">](../cpp/declspec.md)</ept>, you can insert it into a lambda expression immediately after the <ph id="ph1">`parameter-declaration-clause`</ph>—for example:</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>To determine whether a modifier is supported by lambdas, see the article about it in the <bpt id="p1">[</bpt>Microsoft-Specific Modifiers<ept id="p1">](../cpp/microsoft-specific-modifiers.md)</ept> section of the documentation.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Visual Studio supports C++11 Standard lambda expression syntax and functionality, with these exceptions:</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Like all other classes, lambdas don't get automatically generated move constructors and move assignment operators.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For more information about support for rvalue reference behaviors, see the "Rvalue References" section in <bpt id="p1">[</bpt>Support For C++11/14/17 Features (Modern C++)<ept id="p1">](../cpp/support-for-cpp11-14-17-features-modern-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The optional <bpt id="p1">*</bpt>attribute-specifier-seq<ept id="p1">*</ept> is not supported in this version.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Visual Studio includes these features in addition to C++11 Standard lambda functionality:</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Stateless lambdas, which are omni-convertible to function pointers that use arbitrary calling conventions.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Automatically deduced return types for lambda bodies that are more complicated than <ph id="ph1">`{ return expression; }`</ph>, as long as all return statements have the same type.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>(This functionality is part of the proposed C++14 Standard.)</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>C++ Language Reference</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Function Objects in the STL</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Function Call</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>for_each</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>