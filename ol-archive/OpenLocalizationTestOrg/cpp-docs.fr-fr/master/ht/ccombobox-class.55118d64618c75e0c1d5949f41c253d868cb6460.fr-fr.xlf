<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a575aa32ac20c09ea2706950fba4b6055cde2dca</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\ccombobox-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a55d34e27b86344ae0d7bb33e09b94f9c69eda2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c38085f639d596874d6a29247dbd9518f9c6228</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CComboBox Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CComboBox Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides the functionality of a Windows combo box.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CComboBox::CComboBox</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CComboBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CComboBox::AddString</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds a string to the end of the list in the list box of a combo box, or at the sorted position for list boxes with the <bpt id="p1">**</bpt>CBS_SORT<ept id="p1">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CComboBox::Clear</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Deletes (clears) the current selection, if any, in the edit control.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CComboBox::CompareItem</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Called by the framework to determine the relative position of a new list item in a sorted owner-drawn combo box.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CComboBox::Copy</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Copies the current selection, if any, onto the Clipboard in <bpt id="p1">**</bpt>CF_TEXT<ept id="p1">**</ept> format.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CComboBox::Create</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Creates the combo box and attaches it to the <ph id="ph1">`CComboBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CComboBox::Cut</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Deletes (cuts) the current selection, if any, in the edit control and copies the deleted text onto the Clipboard in <bpt id="p1">**</bpt>CF_TEXT<ept id="p1">**</ept> format.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CComboBox::DeleteItem</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Called by the framework when a list item is deleted from an owner-drawn combo box.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CComboBox::DeleteString</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Deletes a string from the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CComboBox::Dir</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Adds a list of file names to the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CComboBox::DrawItem</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Called by the framework when a visual aspect of an owner-drawn combo box changes.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CComboBox::FindString</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Finds the first string that contains the specified prefix in the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>CComboBox::FindStringExact</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Finds the first list-box string (in a combo box) that matches the specified string.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CComboBox::GetComboBoxInfo</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Retrieves information about the <ph id="ph1">`CComboBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>CComboBox::GetCount</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Retrieves the number of items in the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CComboBox::GetCueBanner</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Gets the cue text that is displayed for a combo box control.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>CComboBox::GetCurSel</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Retrieves the index of the currently selected item, if any, in the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CComboBox::GetDroppedControlRect</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Retrieves the screen coordinates of the visible (dropped down) list box of a drop-down combo box.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>CComboBox::GetDroppedState</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Determines whether the list box of a drop-down combo box is visible (dropped down).</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>CComboBox::GetDroppedWidth</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Retrieves the minimum allowed width for the drop-down list-box portion of a combo box.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>CComboBox::GetEditSel</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets the starting and ending character positions of the current selection in the edit control of a combo box.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>CComboBox::GetExtendedUI</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Determines whether a combo box has the default user interface or the extended user interface.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>CComboBox::GetHorizontalExtent</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Returns the width in pixels that the list-box portion of the combo box can be scrolled horizontally.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>CComboBox::GetItemData</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Retrieves the application-supplied 32-bit value associated with the specified combo-box item.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>CComboBox::GetItemDataPtr</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Retrieves the application-supplied 32-bit pointer that is associated with the specified combo-box item.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>CComboBox::GetItemHeight</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Retrieves the height of list items in a combo box.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>CComboBox::GetLBText</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Gets a string from the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>CComboBox::GetLBTextLen</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Gets the length of a string in the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>CComboBox::GetLocale</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Retrieves the locale identifier for a combo box.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CComboBox::GetMinVisible</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Gets the minimum number of visible items in the drop-down list of the current combo box.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CComboBox::GetTopIndex</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Returns the index of the first visible item in the list-box portion of the combo box.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>CComboBox::InitStorage</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Preallocates blocks of memory for items and strings in the list-box portion of the combo box.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CComboBox::InsertString</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Inserts a string into the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CComboBox::LimitText</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Limits the length of the text that the user can enter into the edit control of a combo box.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CComboBox::MeasureItem</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Called by the framework to determine combo box dimensions when an owner-drawn combo box is created.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>CComboBox::Paste</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Inserts the data from the Clipboard into the edit control at the current cursor position.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Data is inserted only if the Clipboard contains data in <bpt id="p1">**</bpt>CF_TEXT<ept id="p1">**</ept> format.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CComboBox::ResetContent</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Removes all items from the list box and edit control of a combo box.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>CComboBox::SelectString</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Searches for a string in the list box of a combo box and, if the string is found, selects the string in the list box and copies the string to the edit control.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CComboBox::SetCueBanner</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Sets the cue text that is displayed for a combo box control.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>CComboBox::SetCurSel</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Selects a string in the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CComboBox::SetDroppedWidth</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Sets the minimum allowed width for the drop-down list-box portion of a combo box.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>CComboBox::SetEditSel</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Selects characters in the edit control of a combo box.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>CComboBox::SetExtendedUI</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Selects either the default user interface or the extended user interface for a combo box that has the <bpt id="p1">**</bpt>CBS_DROPDOWN<ept id="p1">**</ept> or <bpt id="p2">**</bpt>CBS_DROPDOWNLIST<ept id="p2">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>CComboBox::SetHorizontalExtent</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Sets the width in pixels that the list-box portion of the combo box can be scrolled horizontally.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>CComboBox::SetItemData</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Sets the 32-bit value associated with the specified item in a combo box.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>CComboBox::SetItemDataPtr</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Sets the 32-bit pointer associated with the specified item in a combo box.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>CComboBox::SetItemHeight</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Sets the height of list items in a combo box or the height of the edit-control (or static-text) portion of a combo box.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>CComboBox::SetLocale</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Sets the locale identifier for a combo box.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CComboBox::SetMinVisibleItems</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Sets the minimum number of visible items in the drop-down list of the current combo box.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CComboBox::SetTopIndex</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Tells the list-box portion of the combo box to display the item with the specified index at the top.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>CComboBox::ShowDropDown</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Shows or hides the list box of a combo box that has the <bpt id="p1">**</bpt>CBS_DROPDOWN<ept id="p1">**</ept> or <bpt id="p2">**</bpt>CBS_DROPDOWNLIST<ept id="p2">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>A combo box consists of a list box combined with either a static control or edit control.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The list-box portion of the control may be displayed at all times or may only drop down when the user selects the drop-down arrow next to the control.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The currently selected item (if any) in the list box is displayed in the static or edit control.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>In addition, if the combo box has the drop-down list style, the user can type the initial character of one of the items in the list, and the list box, if visible, will highlight the next item with that initial character.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The following table compares the three combo-box <bpt id="p1">[</bpt>styles<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Style</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>When is list box visible</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Static or edit control</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Simple</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Always</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Edit</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Drop-down</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>When dropped down</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Edit</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Drop-down list</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>When dropped down</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Static</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>You can create a <ph id="ph1">`CComboBox`</ph> object from either a dialog template or directly in your code.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>In both cases, first call the constructor <ph id="ph1">`CComboBox`</ph> to construct the <ph id="ph2">`CComboBox`</ph> object; then call the <bpt id="p1">[</bpt>Create<ept id="p1">](#ccombobox__create)</ept> member function to create the control and attach it to the <ph id="ph3">`CComboBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If you want to handle Windows notification messages sent by a combo box to its parent (usually a class derived from <ph id="ph1">`CDialog`</ph>), add a message-map entry and message-handler member function to the parent class for each message.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Each message-map entry takes the following form:</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_<ept id="p1">**</ept>Notification <bpt id="p2">**</bpt>(<ept id="p2">**</ept><ph id="ph1">`id`</ph><bpt id="p3">**</bpt>,<ept id="p3">**</ept><ph id="ph2">`memberFxn`</ph><bpt id="p4">**</bpt>)<ept id="p4">**</ept></source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>where <ph id="ph1">`id`</ph> specifies the child-window ID of the combo-box control sending the notification and <ph id="ph2">`memberFxn`</ph> is the name of the parent member function you have written to handle the notification.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The parent's function prototype is as follows:</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>afx_msg<ept id="p1">**</ept> <ph id="ph1">`void`</ph> <ph id="ph2">`memberFxn`</ph> <bpt id="p2">**</bpt>( );<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The order in which certain notifications will be sent cannot be predicted.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>In particular, a <bpt id="p1">**</bpt>CBN_SELCHANGE<ept id="p1">**</ept> notification may occur either before or after a <bpt id="p2">**</bpt>CBN_CLOSEUP<ept id="p2">**</ept> notification.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Potential message-map entries are the following:</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_CBN_CLOSEUP<ept id="p1">**</ept> (Windows 3.1 and later.) The list box of a combo box has closed.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>This notification message is not sent for a combo box that has the <bpt id="p1">[</bpt>CBS_SIMPLE<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> style.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_CBN_DBLCLK<ept id="p1">**</ept> The user double-clicks a string in the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>This notification message is only sent for a combo box with the <bpt id="p1">**</bpt>CBS_SIMPLE<ept id="p1">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>For a combo box with the <bpt id="p1">[</bpt>CBS_DROPDOWN<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> or <bpt id="p2">[</bpt>CBS_DROPDOWNLIST<ept id="p2">](../../mfc/reference/combo-box-styles.md)</ept> style, a double-click cannot occur because a single click hides the list box.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_CBN_DROPDOWN<ept id="p1">**</ept> The list box of a combo box is about to drop down (be made visible).</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>This notification message can occur only for a combo box with the <bpt id="p1">**</bpt>CBS_DROPDOWN<ept id="p1">**</ept> or <bpt id="p2">**</bpt>CBS_DROPDOWNLIST<ept id="p2">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_CBN_EDITCHANGE<ept id="p1">**</ept> The user has taken an action that may have altered the text in the edit-control portion of a combo box.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Unlike the <bpt id="p1">**</bpt>CBN_EDITUPDATE<ept id="p1">**</ept> message, this message is sent after Windows updates the screen.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>It is not sent if the combo box has the <bpt id="p1">**</bpt>CBS_DROPDOWNLIST<ept id="p1">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_CBN_EDITUPDATE<ept id="p1">**</ept> The edit-control portion of a combo box is about to display altered text.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>This notification message is sent after the control has formatted the text but before it displays the text.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>It is not sent if the combo box has the <bpt id="p1">**</bpt>CBS_DROPDOWNLIST<ept id="p1">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_CBN_ERRSPACE<ept id="p1">**</ept> The combo box cannot allocate enough memory to meet a specific request.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_CBN_SELENDCANCEL<ept id="p1">**</ept> (Windows 3.1 and later.) Indicates the user's selection should be canceled.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>The user clicks an item and then clicks another window or control to hide the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>This notification message is sent before the <bpt id="p1">**</bpt>CBN_CLOSEUP<ept id="p1">**</ept> notification message to indicate that the user's selection should be ignored.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CBN_SELENDCANCEL<ept id="p1">**</ept> or <bpt id="p2">**</bpt>CBN_SELENDOK<ept id="p2">**</ept> notification message is sent even if the <bpt id="p3">**</bpt>CBN_CLOSEUP<ept id="p3">**</ept> notification message is not sent (as in the case of a combo box with the <bpt id="p4">**</bpt>CBS_SIMPLE<ept id="p4">**</ept> style).</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_CBN_SELENDOK<ept id="p1">**</ept> The user selects an item and then either presses the ENTER key or clicks the DOWN ARROW key to hide the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This notification message is sent before the <bpt id="p1">**</bpt>CBN_CLOSEUP<ept id="p1">**</ept> message to indicate that the user's selection should be considered valid.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>CBN_SELENDCANCEL<ept id="p1">**</ept> or <bpt id="p2">**</bpt>CBN_SELENDOK<ept id="p2">**</ept> notification message is sent even if the <bpt id="p3">**</bpt>CBN_CLOSEUP<ept id="p3">**</ept> notification message is not sent (as in the case of a combo box with the <bpt id="p4">**</bpt>CBS_SIMPLE<ept id="p4">**</ept> style).</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_CBN_KILLFOCUS<ept id="p1">**</ept> The combo box is losing the input focus.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_CBN_SELCHANGE<ept id="p1">**</ept> The selection in the list box of a combo box is about to be changed as a result of the user either clicking in the list box or changing the selection by using the arrow keys.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>When processing this message, the text in the edit control of the combo box can only be retrieved via <ph id="ph1">`GetLBText`</ph> or another similar function.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>cannot be used.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>ON_CBN_SETFOCUS<ept id="p1">**</ept> The combo box receives the input focus.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>If you create a <ph id="ph1">`CComboBox`</ph> object within a dialog box (through a dialog resource), the <ph id="ph2">`CComboBox`</ph> object is automatically destroyed when the user closes the dialog box.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>If you embed a <ph id="ph1">`CComboBox`</ph> object within another window object, you do not need to destroy it.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>If you create the <ph id="ph1">`CComboBox`</ph> object on the stack, it is destroyed automatically.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If you create the <ph id="ph1">`CComboBox`</ph> object on the heap by using the <bpt id="p1">**</bpt>new<ept id="p1">**</ept> function, you must call <bpt id="p2">**</bpt>delete<ept id="p2">**</ept> on the object to destroy it when the Windows combo box is destroyed.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept> If you want to handle <ph id="ph1">`WM_KEYDOWN`</ph> and <ph id="ph2">`WM_CHAR`</ph> messages, you have to subclass the combo box's edit and list box controls, derive classes from <ph id="ph3">`CEdit`</ph> and <ph id="ph4">`CListBox`</ph>, and add handlers for those messages to the derived classes.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>http://support.microsoft.com/default.aspxscid=kb;en-us;Q174667<ept id="p1">](http://support.microsoft.com/default.aspxscid=kb;en-us;q174667)</ept> and <bpt id="p2">[</bpt>CWnd::SubclassWindow<ept id="p2">](../../mfc/reference/cwnd-class.md#cwnd__subclasswindow)</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>CWnd</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxwin.h</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>CComboBox::AddString</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Adds a string to the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Points to the null-terminated string that is to be added.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>If the return value is greater than or equal to 0, it is the zero-based index to the string in the list box.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if an error occurs; the return value is <bpt id="p2">**</bpt>CB_ERRSPACE<ept id="p2">**</ept> if insufficient space is available to store the new string.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>If the list box was not created with the <bpt id="p1">[</bpt>CBS_SORT<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> style, the string is added to the end of the list.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Otherwise, the string is inserted into the list, and the list is sorted.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>This function is not supported by the Windows <bpt id="p1">**</bpt>ComboBoxEx<ept id="p1">**</ept> control.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For more information on this control, see <bpt id="p1">[</bpt>ComboBoxEx Controls<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775738)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>To insert a string into a specific location within the list, use the <bpt id="p1">[</bpt>InsertString<ept id="p1">](#ccombobox__insertstring)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#3</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>CComboBox::CComboBox</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`CComboBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#1</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>CComboBox::Clear</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Deletes (clears) the current selection, if any, in the edit control of the combo box.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>To delete the current selection and place the deleted contents onto the Clipboard, use the <bpt id="p1">[</bpt>Cut<ept id="p1">](#ccombobox__cut)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#4</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>CComboBox::CompareItem</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Called by the framework to determine the relative position of a new item in the list-box portion of a sorted owner-draw combo box.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A long pointer to a <bpt id="p1">[</bpt>COMPAREITEMSTRUCT<ept id="p1">](../../mfc/reference/compareitemstruct-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Indicates the relative position of the two items described in the <ph id="ph1">`COMPAREITEMSTRUCT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>It can be any of the following values:</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Meaning</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>– 1</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Item 1 sorts before item 2.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Item 1 and item 2 sort the same.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Item 1 sorts after item 2.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWnd::OnCompareItem<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__oncompareitem)</ept> for a description of <ph id="ph1">`COMPAREITEMSTRUCT`</ph>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>By default, this member function does nothing.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>If you create an owner-draw combo box with the <bpt id="p1">**</bpt>LBS_SORT<ept id="p1">**</ept> style, you must override this member function to assist the framework in sorting new items added to the list box.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#5</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>CComboBox::Copy</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Copies the current selection, if any, in the edit control of the combo box onto the Clipboard in <bpt id="p1">**</bpt>CF_TEXT<ept id="p1">**</ept> format.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#6</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>CComboBox::Create</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Creates the combo box and attaches it to the <ph id="ph1">`CComboBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Specifies the style of the combo box.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Apply any combination of <bpt id="p1">[</bpt>combo-box styles<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> to the box.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Points to the position and size of the combo box.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Can be a <bpt id="p1">[</bpt>RECT structure<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> or a <ph id="ph1">`CRect`</ph> object.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Specifies the combo box's parent window (usually a <ph id="ph1">`CDialog`</ph>).</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>It must not be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Specifies the combo box's control ID.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Nonzero if successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>You construct a <ph id="ph1">`CComboBox`</ph> object in two steps.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>First, call the constructor and then call <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, which creates the Windows combo box and attaches it to the <ph id="ph1">`CComboBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> executes, Windows sends the <bpt id="p2">[</bpt>WM_NCCREATE<ept id="p2">](../../mfc/reference/cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id="p3">[</bpt>WM_CREATE<ept id="p3">](../../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept>, <bpt id="p4">[</bpt>WM_NCCALCSIZE<ept id="p4">](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize)</ept>, and <bpt id="p5">[</bpt>WM_GETMINMAXINFO<ept id="p5">](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo)</ept> messages to the combo box.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>These messages are handled by default by the <bpt id="p1">[</bpt>OnNcCreate<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__onnccreate)</ept>, <bpt id="p2">[</bpt>OnCreate<ept id="p2">](../../mfc/reference/cwnd-class.md#cwnd__oncreate)</ept>, <bpt id="p3">[</bpt>OnNcCalcSize<ept id="p3">](../../mfc/reference/cwnd-class.md#cwnd__onnccalcsize)</ept>, and <bpt id="p4">[</bpt>OnGetMinMaxInfo<ept id="p4">](../../mfc/reference/cwnd-class.md#cwnd__ongetminmaxinfo)</ept> member functions in the <ph id="ph1">`CWnd`</ph> base class.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>To extend the default message handling, derive a class from <ph id="ph1">`CComboBox`</ph>, add a message map to the new class, and override the preceding message-handler member functions.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`OnCreate`</ph>, for example, to perform needed initialization for a new class.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Apply the following <bpt id="p1">[</bpt>window styles<ept id="p1">](../../mfc/reference/window-styles.md)</ept> to a combo-box control.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_CHILD<ept id="p1">**</ept> Always</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_VISIBLE<ept id="p1">**</ept> Usually</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_DISABLED<ept id="p1">**</ept> Rarely</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_VSCROLL<ept id="p1">**</ept> To add vertical scrolling for the list box in the combo box</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_HSCROLL<ept id="p1">**</ept> To add horizontal scrolling for the list box in the combo box</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_GROUP<ept id="p1">**</ept> To group controls</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>WS_TABSTOP<ept id="p1">**</ept> To include the combo box in the tabbing order</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#2</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>CComboBox::Cut</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Deletes (cuts) the current selection, if any, in the combo-box edit control and copies the deleted text onto the Clipboard in <bpt id="p1">**</bpt>CF_TEXT<ept id="p1">**</ept> format.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>To delete the current selection without placing the deleted text onto the Clipboard, call the <bpt id="p1">[</bpt>Clear<ept id="p1">](#ccombobox__clear)</ept> member function.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#7</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>CComboBox::DeleteItem</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Called by the framework when the user deletes an item from an owner-draw <ph id="ph1">`CComboBox`</ph> object or destroys the combo box.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>A long pointer to a Windows <bpt id="p1">[</bpt>DELETEITEMSTRUCT<ept id="p1">](../../mfc/reference/deleteitemstruct-structure.md)</ept> structure that contains information about the deleted item.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWnd::OnDeleteItem<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__ondeleteitem)</ept> for a description of this structure.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The default implementation of this function does nothing.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Override this function to redraw the combo box as needed.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#8</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>CComboBox::DeleteString</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Deletes the item in position <ph id="ph1">`nIndex`</ph> from the combo box.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Specifies the index to the string that is to be deleted.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>If the return value is greater than or equal to 0, then it is a count of the strings remaining in the list.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if <ph id="ph1">`nIndex`</ph> specifies an index greater than the number of items in the list.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>All items following <ph id="ph1">`nIndex`</ph> now move down one position.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>For example, if a combo box contains two items, deleting the first item will cause the remaining item to now be in the first position.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>=0 for the item in the first position.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#9</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>CComboBox::Dir</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>Adds a list of filenames or drives to the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Can be any combination of the <ph id="ph1">`enum`</ph> values described in <bpt id="p1">[</bpt>CFile::GetStatus<ept id="p1">](../../mfc/reference/cfile-class.md#cfile__getstatus)</ept> or any combination of the following values:</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_READWRITE<ept id="p1">**</ept> File can be read from or written to.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_READONLY<ept id="p1">**</ept> File can be read from but not written to.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_HIDDEN<ept id="p1">**</ept> File is hidden and does not appear in a directory listing.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_SYSTEM<ept id="p1">**</ept> File is a system file.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_DIRECTORY<ept id="p1">**</ept> The name specified by <ph id="ph1">`lpszWildCard`</ph> specifies a directory.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_ARCHIVE<ept id="p1">**</ept> File has been archived.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_DRIVES<ept id="p1">**</ept> Include all drives that match the name specified by <ph id="ph1">`lpszWildCard`</ph>.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>DDL_EXCLUSIVE<ept id="p1">**</ept> Exclusive flag.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>If the exclusive flag is set, only files of the specified type are listed.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>Otherwise, files of the specified type are listed in addition to "normal" files.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Points to a file-specification string.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>The string can contain wildcards (for example, *.<ph id="ph1">\*</ph>).</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>If the return value is greater than or equal to 0, it is the zero-based index of the last filename added to the list.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if an error occurs; the return value is <bpt id="p2">**</bpt>CB_ERRSPACE<ept id="p2">**</ept> if insufficient space is available to store the new strings.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>This function is not supported by the Windows <bpt id="p1">**</bpt>ComboBoxEx<ept id="p1">**</ept> control.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>For more information on this control, see <bpt id="p1">[</bpt>ComboBoxEx Controls<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775738)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#10</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>CComboBox::DrawItem</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Called by the framework when a visual aspect of an owner-draw combo box changes.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>DRAWITEMSTRUCT<ept id="p1">](../../mfc/reference/drawitemstruct-structure.md)</ept> structure that contains information about the type of drawing required.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>itemAction<ept id="p1">**</ept> member of the <ph id="ph1">`DRAWITEMSTRUCT`</ph> structure defines the drawing action that is to be performed.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWnd::OnDrawItem<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__ondrawitem)</ept> for a description of this structure.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>By default, this member function does nothing.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Override this member function to implement drawing for an owner-draw <ph id="ph1">`CComboBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Before this member function terminates, the application should restore all graphics device interface (GDI) objects selected for the display context supplied in <ph id="ph1">`lpDrawItemStruct`</ph>.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#11</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>CComboBox::FindString</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Finds, but doesn't select, the first string that contains the specified prefix in the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Contains the zero-based index of the item before the first item to be searched.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by <ph id="ph1">`nStartAfter`</ph>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>If –1, the entire list box is searched from the beginning.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Points to the null-terminated string that contains the prefix to search for.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The search is case independent, so this string can contain any combination of uppercase and lowercase letters.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>If the return value is greater than or equal to 0, it is the zero-based index of the matching item.</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if the search was unsuccessful.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>This function is not supported by the Windows <bpt id="p1">**</bpt>ComboBoxEx<ept id="p1">**</ept> control.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>For more information on this control, see <bpt id="p1">[</bpt>ComboBoxEx Controls<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775738)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#12</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>CComboBox::FindStringExact</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`FindStringExact`</ph> member function to find the first list-box string (in a combo box) that matches the string specified in <ph id="ph2">`lpszFind`</ph>.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the item before the first item to be searched.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by <ph id="ph1">`nIndexStart`</ph>.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIndexStart`</ph> is –1, the entire list box is searched from the beginning.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>Points to the null-terminated string to search for.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>This string can contain a complete filename, including the extension.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>The search is not case sensitive, so this string can contain any combination of uppercase and lowercase letters.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>The zero-based index of the matching item, or <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if the search was unsuccessful.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>If the combo box was created with an owner-draw style but without the <bpt id="p1">[</bpt>CBS_HASSTRINGS<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> style, <ph id="ph1">`FindStringExact`</ph> attempts to match the doubleword value against the value of <ph id="ph2">`lpszFind`</ph>.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#13</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>CComboBox::GetComboBoxInfo</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>Retrieves information for the <ph id="ph1">`CComboBox`</ph> object.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>pcbi</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>A pointer to the <bpt id="p1">[</bpt>COMBOBOXINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775798)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> on success, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> on failure.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>This member function emulates the functionality of the <bpt id="p1">[</bpt>CB_GETCOMBOBOXINFO<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775839)</ept> message, as described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>CComboBox::GetCount</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Call this member function to retrieve the number of items in the list-box portion of a combo box.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>The number of items.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>The returned count is one greater than the index value of the last item (the index is zero-based).</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#14</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>CComboBox::GetCueBanner</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>Gets the cue text that is displayed for a combo box control.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>[out]</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>Pointer to a buffer that receives the cue banner text.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Size of the buffer that the <ph id="ph1">`lpszText`</ph> parameter points to.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>In the first overload, a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/using-cstring.md)</ept> object that contains the cue banner text if it exists; otherwise, a <ph id="ph1">`CString`</ph> object that has zero length.</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>In the second overload, <ph id="ph1">`true`</ph> if this method is successful; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>Cue text is a prompt that is displayed in the input area of the combo box control.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>The cue text is displayed until the user provides input.</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>CB_GETCUEBANNER<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775843)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>CComboBox::GetCurSel</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>Call this member function to determine which item in the combo box is selected.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The zero-based index of the currently selected item in the list box of a combo box, or <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if no item is selected.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>returns an index into the list.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#15</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>CComboBox::GetDroppedControlRect</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`GetDroppedControlRect`</ph> member function to retrieve the screen coordinates of the visible (dropped-down) list box of a drop-down combo box.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>lprect</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Points to the <bpt id="p1">[</bpt>RECT structure<ept id="p1">](../../mfc/reference/rect-structure1.md)</ept> that is to receive the coordinates.</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#16</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>CComboBox::GetDroppedState</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`GetDroppedState`</ph> member function to determine whether the list box of a drop-down combo box is visible (dropped down).</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Nonzero if the list box is visible; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#17</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>CComboBox::GetDroppedWidth</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Call this function to retrieve the minimum allowable width, in pixels, of the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>If successful, the minimum allowable width, in pixels; otherwise, <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>This function only applies to combo boxes with the <bpt id="p1">[</bpt>CBS_DROPDOWN<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> or <bpt id="p2">[</bpt>CBS_DROPDOWNLIST<ept id="p2">](../../mfc/reference/combo-box-styles.md)</ept> style.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>By default, the minimum allowable width of the drop-down list box is 0.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>The minimum allowable width can be set by calling <bpt id="p1">[</bpt>SetDroppedWidth<ept id="p1">](#ccombobox__setdroppedwidth)</ept>.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>When the list-box portion of the combo box is displayed, its width is the larger of the minimum allowable width or the combo box width.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>SetDroppedWidth<ept id="p1">](#ccombobox__setdroppedwidth)</ept>.</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>CComboBox::GetEditSel</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Gets the starting and ending character positions of the current selection in the edit control of a combo box.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>A 32-bit value that contains the starting position in the low-order word and the position of the first nonselected character after the end of the selection in the high-order word.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>If this function is used on a combo box without an edit control, <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> is returned.</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#18</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>CComboBox::GetExtendedUI</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`GetExtendedUI`</ph> member function to determine whether a combo box has the default user interface or the extended user interface.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Nonzero if the combo box has the extended user interface; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>The extended user interface can be identified in the following ways:</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Clicking the static control displays the list box only for combo boxes with the <bpt id="p1">[</bpt>CBS_DROPDOWNLIST<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> style.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Pressing the DOWN ARROW key displays the list box (F4 is disabled).</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Scrolling in the static control is disabled when the item list is not visible (arrow keys are disabled).</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#19</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>CComboBox::GetHorizontalExtent</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>Retrieves from the combo box the width in pixels by which the list-box portion of the combo box can be scrolled horizontally.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>The scrollable width of the list-box portion of the combo box, in pixels.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>This is applicable only if the list-box portion of the combo box has a horizontal scroll bar.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#20</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>CComboBox::GetItemData</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Retrieves the application-supplied 32-bit value associated with the specified combo-box item.</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Contains the zero-based index of an item in the combo box's list box.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>The 32-bit value associated with the item, or <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>The 32-bit value can be set with the <ph id="ph1">`dwItemData`</ph> parameter of a <bpt id="p1">[</bpt>SetItemData<ept id="p1">](#ccombobox__setitemdata)</ept> member function call.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`GetItemDataPtr`</ph> member function if the 32-bit value to be retrieved is a pointer ( <bpt id="p1">**</bpt>void<ph id="ph2">\*</ph><ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#21</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>CComboBox::GetItemDataPtr</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Retrieves the application-supplied 32-bit value associated with the specified combo-box item as a pointer ( <bpt id="p1">**</bpt>void<ph id="ph1">\*</ph><ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Contains the zero-based index of an item in the combo box's list box.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer, or –1 if an error occurs.</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#22</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>CComboBox::GetItemHeight</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`GetItemHeight`</ph> member function to retrieve the height of list items in a combo box.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>Specifies the component of the combo box whose height is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`nIndex`</ph> parameter is –1, the height of the edit-control (or static-text) portion of the combo box is retrieved.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>If the combo box has the <bpt id="p1">[</bpt>CBS_OWNERDRAWVARIABLE<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> style, <ph id="ph1">`nIndex`</ph> specifies the zero-based index of the list item whose height is to be retrieved.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>Otherwise, <ph id="ph1">`nIndex`</ph> should be set to 0.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>The height, in pixels, of the specified item in a combo box.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#23</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>CComboBox::GetLBText</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Gets a string from the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Contains the zero-based index of the list-box string to be copied.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Points to a buffer that is to receive the string.</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>The buffer must have sufficient space for the string and a terminating null character.</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>A reference to a <ph id="ph1">`CString`</ph>.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>The length (in bytes) of the string, excluding the terminating null character.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIndex`</ph> does not specify a valid index, the return value is <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>The second form of this member function fills a <ph id="ph1">`CString`</ph> object with the item's text.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#24</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>CComboBox::GetLBTextLen</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>Gets the length of a string in the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Contains the zero-based index of the list-box string.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>The length of the string in bytes, excluding the terminating null character.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIndex`</ph> does not specify a valid index, the return value is <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CComboBox::GetLBText<ept id="p1">](#ccombobox__getlbtext)</ept>.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>CComboBox::GetLocale</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Retrieves the locale used by the combo box.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The locale identifier (LCID) value for the strings in the combo box.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>The locale is used, for example, to determine the sort order of the strings in a sorted combo box.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CComboBox::SetLocale<ept id="p1">](#ccombobox__setlocale)</ept>.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>CComboBox::GetMinVisible</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>Gets the minimum number of visible items in the drop-down list of the current combo box control.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>The minimum number of visible items in the current drop-down list.</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>CB_GETMINVISIBLE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775915)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>CComboBox::GetTopIndex</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>Retrieves the zero-based index of the first visible item in the list-box portion of the combo box.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>The zero-based index of the first visible item in the list-box portion of the combo box if successful, <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> otherwise.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>Initially, item 0 is at the top of the list box, but if the list box is scrolled, another item may be at the top.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#25</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>CComboBox::InitStorage</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>Allocates memory for storing list box items in the list-box portion of the combo box.</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Specifies the number of items to add.</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>Specifies the amount of memory, in bytes, to allocate for item strings.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>If successful, the maximum number of items that the list-box portion of the combo box can store before a memory reallocation is needed, otherwise <bpt id="p1">**</bpt>CB_ERRSPACE<ept id="p1">**</ept>, meaning not enough memory is available.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>Call this function before adding a large number of items to the list-box portion of the <ph id="ph1">`CComboBox`</ph>.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Windows 95/98 only: The <ph id="ph1">`wParam`</ph> parameter is limited to 16-bit values.</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>This means list boxes cannot contain more than 32,767 items.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>Although the number of items is restricted, the total size of the items in a list box is limited only by available memory.</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>This function helps speed up the initialization of list boxes that have a large number of items (more than 100).</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>It preallocates the specified amount of memory so that subsequent <bpt id="p1">[</bpt>AddString<ept id="p1">](#ccombobox__addstring)</ept>, <bpt id="p2">[</bpt>InsertString<ept id="p2">](#ccombobox__insertstring)</ept>, and <bpt id="p3">[</bpt>Dir<ept id="p3">](#ccombobox__dir)</ept> functions take the shortest possible time.</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>You can use estimates for the parameters.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>If you overestimate, some extra memory is allocated; if you underestimate, the normal allocation is used for items that exceed the preallocated amount.</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#26</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>CComboBox::InsertString</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Inserts a string into the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>Contains the zero-based index to the position in the list box that will receive the string.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>If this parameter is –1, the string is added to the end of the list.</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>Points to the null-terminated string that is to be inserted.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>The zero-based index of the position at which the string was inserted.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>CB_ERRSPACE<ept id="p1">**</ept> if insufficient space is available to store the new string.</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Unlike the <bpt id="p1">[</bpt>AddString<ept id="p1">](#ccombobox__addstring)</ept> member function, the <ph id="ph1">`InsertString`</ph> member function does not cause a list with the <bpt id="p2">[</bpt>CBS_SORT<ept id="p2">](../../mfc/reference/combo-box-styles.md)</ept> style to be sorted.</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>This function is not supported by the Windows <bpt id="p1">**</bpt>ComboBoxEx<ept id="p1">**</ept> control.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>For more information on this control, see <bpt id="p1">[</bpt>ComboBoxEx Controls<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775738)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#27</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>CComboBox::LimitText</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>Limits the length in bytes of the text that the user can enter into the edit control of a combo box.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>Specifies the length (in bytes) of the text that the user can enter.</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>If this parameter is 0, the text length is set to 65,535 bytes.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>Nonzero if successful.</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>If called for a combo box with the style <bpt id="p1">[</bpt>CBS_DROPDOWNLIST<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> or for a combo box without an edit control, the return value is <bpt id="p2">**</bpt>CB_ERR<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>If the combo box does not have the style <bpt id="p1">[</bpt>CBS_AUTOHSCROLL<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept>, setting the text limit to be larger than the size of the edit control will have no effect.</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>only limits the text the user can enter.</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>It has no effect on any text already in the edit control when the message is sent, nor does it affect the length of the text copied to the edit control when a string in the list box is selected.</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#28</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>CComboBox::MeasureItem</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>Called by the framework when a combo box with an owner-draw style is created.</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>A long pointer to a <bpt id="p1">[</bpt>MEASUREITEMSTRUCT<ept id="p1">](../../mfc/reference/measureitemstruct-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>By default, this member function does nothing.</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>Override this member function and fill in the <ph id="ph1">`MEASUREITEMSTRUCT`</ph> structure to inform Windows of the dimensions of the list box in the combo box.</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>If the combo box is created with the <bpt id="p1">[</bpt>CBS_OWNERDRAWVARIABLE<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> style, the framework calls this member function for each item in the list box.</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>Otherwise, this member is called only once.</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Using the <bpt id="p1">**</bpt>CBS_OWNERDRAWFIXED<ept id="p1">**</ept> style in an owner-draw combo box created with the <bpt id="p2">[</bpt>SubclassDlgItem<ept id="p2">](../../mfc/reference/cwnd-class.md#cwnd__subclassdlgitem)</ept> member function of <ph id="ph1">`CWnd`</ph> involves further programming considerations.</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>See the discussion in <bpt id="p1">[</bpt>Technical Note 14<ept id="p1">](../../mfc/tn014-custom-controls.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CWnd::OnMeasureItem<ept id="p1">](../../mfc/reference/cwnd-class.md#cwnd__onmeasureitem)</ept> for a description of the <ph id="ph1">`MEASUREITEMSTRUCT`</ph> structure.</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#29</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>CComboBox::Paste</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>Inserts the data from the Clipboard into the edit control of the combo box at the current cursor position.</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Data is inserted only if the Clipboard contains data in <bpt id="p1">**</bpt>CF_TEXT<ept id="p1">**</ept> format.</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#30</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>CComboBox::ResetContent</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>Removes all items from the list box and edit control of a combo box.</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#31</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>CComboBox::SelectString</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>Searches for a string in the list box of a combo box, and if the string is found, selects the string in the list box and copies it to the edit control.</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>Contains the zero-based index of the item before the first item to be searched.</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>When the search reaches the bottom of the list box, it continues from the top of the list box back to the item specified by <ph id="ph1">`nStartAfter`</ph>.</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>If –1, the entire list box is searched from the beginning.</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>Points to the null-terminated string that contains the prefix to search for.</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>The search is case independent, so this string can contain any combination of uppercase and lowercase letters.</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>The zero-based index of the selected item if the string was found.</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>If the search was unsuccessful, the return value is <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> and the current selection is not changed.</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>A string is selected only if its initial characters (from the starting point) match the characters in the prefix string.</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Note that the <ph id="ph1">`SelectString`</ph> and <ph id="ph2">`FindString`</ph> member functions both find a string, but the <ph id="ph3">`SelectString`</ph> member function also selects the string.</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#32</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>CComboBox::SetCueBanner</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>Sets the cue text that is displayed for a combo box control.</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>[in] <bpt id="p1">*</bpt>lpszText<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>Pointer to a null-terminated buffer that contains the cue text.</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>if the method is successful; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>Cue text is a prompt that is displayed in the input area of the combo box control.</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>The cue text is displayed until the user provides input.</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>CB_SETCUEBANNER<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775897)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>The following code example defines the variable, <ph id="ph1">`m_combobox`</ph>, that is used to programmatically access the combo box control.</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>This variable is used in the next example.</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox_s1#1</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>The following code example sets the cue banner for the combo box control.</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox_s1#2</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>CComboBox::SetCurSel</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Selects a string in the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the string to select.</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>If –1, any current selection in the list box is removed and the edit control is cleared.</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>The zero-based index of the item selected if the message is successful.</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>The return value is <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if <ph id="ph1">`nSelect`</ph> is greater than the number of items in the list or if <ph id="ph2">`nSelect`</ph> is set to –1, which clears the selection.</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>If necessary, the list box scrolls the string into view (if the list box is visible).</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>The text in the edit control of the combo box is changed to reflect the new selection.</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Any previous selection in the list box is removed.</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#33</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>CComboBox::SetDroppedWidth</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>Call this function to set the minimum allowable width, in pixels, of the list box of a combo box.</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>The minimum allowable width of the list-box portion of the combo box, in pixels.</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>If successful, the new width of the list box, otherwise <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>This function only applies to combo boxes with the <bpt id="p1">[</bpt>CBS_DROPDOWN<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> or <bpt id="p2">[</bpt>CBS_DROPDOWNLIST<ept id="p2">](../../mfc/reference/combo-box-styles.md)</ept> style.</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>By default, the minimum allowable width of the drop-down list box is 0.</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>When the list-box portion of the combo box is displayed, its width is the larger of the minimum allowable width or the combo box width.</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#34</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>CComboBox::SetEditSel</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>Selects characters in the edit control of a combo box.</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>Specifies the starting position.</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>If the starting position is set to –1, then any existing selection is removed.</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>Specifies the ending position.</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>If the ending position is set to –1, then all text from the starting position to the last character in the edit control is selected.</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>Nonzero if the member function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>It is <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if <ph id="ph1">`CComboBox`</ph> has the <bpt id="p2">[</bpt>CBS_DROPDOWNLIST<ept id="p2">](../../mfc/reference/combo-box-styles.md)</ept> style or does not have a list box.</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>The positions are zero-based.</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>To select the first character of the edit control, you specify a starting position of 0.</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>The ending position is for the character just after the last character to select.</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>For example, to select the first four characters of the edit control, you would use a starting position of 0 and an ending position of 4.</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>This function is not supported by the Windows <bpt id="p1">**</bpt>ComboBoxEx<ept id="p1">**</ept> control.</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>For more information on this control, see <bpt id="p1">[</bpt>ComboBoxEx Controls<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775738)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CComboBox::GetEditSel<ept id="p1">](#ccombobox__geteditsel)</ept>.</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>CComboBox::SetExtendedUI</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`SetExtendedUI`</ph> member function to select either the default user interface or the extended user interface for a combo box that has the <bpt id="p1">[</bpt>CBS_DROPDOWN<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> or <bpt id="p2">[</bpt>CBS_DROPDOWNLIST<ept id="p2">](../../mfc/reference/combo-box-styles.md)</ept> style.</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>bExtended</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>Specifies whether the combo box should use the extended user interface or the default user interface.</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>A value of <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> selects the extended user interface; a value of <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept> selects the standard user interface.</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CB_OKAY<ept id="p1">**</ept> if the operation is successful, or <bpt id="p2">**</bpt>CB_ERR<ept id="p2">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>The extended user interface can be identified in the following ways:</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>Clicking the static control displays the list box only for combo boxes with the <bpt id="p1">**</bpt>CBS_DROPDOWNLIST<ept id="p1">**</ept> style.</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>Pressing the DOWN ARROW key displays the list box (F4 is disabled).</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>Scrolling in the static control is disabled when the item list is not visible (the arrow keys are disabled).</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CComboBox::GetExtendedUI<ept id="p1">](#ccombobox__getextendedui)</ept>.</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>CComboBox::SetHorizontalExtent</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>Sets the width, in pixels, by which the list-box portion of the combo box can be scrolled horizontally.</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>nExtent</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>Specifies the number of pixels by which the list-box portion of the combo box can be scrolled horizontally.</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>If the width of the list box is smaller than this value, the horizontal scroll bar will horizontally scroll items in the list box.</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>If the width of the list box is equal to or greater than this value, the horizontal scroll bar is hidden or, if the combo box has the <bpt id="p1">[</bpt>CBS_DISABLENOSCROLL<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> style, disabled.</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#35</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>CComboBox::SetItemData</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>Sets the 32-bit value associated with the specified item in a combo box.</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Contains a zero-based index to the item to set.</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>Contains the new value to associate with the item.</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`SetItemDataPtr`</ph> member function if the 32-bit item is to be a pointer.</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#36</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>CComboBox::SetItemDataPtr</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Sets the 32-bit value associated with the specified item in a combo box to be the specified pointer ( <bpt id="p1">**</bpt>void<ph id="ph1">\*</ph><ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Contains a zero-based index to the item.</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>Contains the pointer to associate with the item.</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>This pointer remains valid for the life of the combo box, even though the item's relative position within the combo box might change as items are added or removed.</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Hence, the item's index within the box can change, but the pointer remains reliable.</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#37</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>CComboBox::SetItemHeight</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`SetItemHeight`</ph> member function to set the height of list items in a combo box or the height of the edit-control (or static-text) portion of a combo box.</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>Specifies whether the height of list items or the height of the edit-control (or static-text) portion of the combo box is set.</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>If the combo box has the <bpt id="p1">[</bpt>CBS_OWNERDRAWVARIABLE<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> style, <ph id="ph1">`nIndex`</ph> specifies the zero-based index of the list item whose height is to be set; otherwise, <ph id="ph2">`nIndex`</ph> must be 0 and the height of all list items will be set.</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`nIndex`</ph> is –1, the height of the edit-control or static-text portion of the combo box is to be set.</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Specifies the height, in pixels, of the combo-box component identified by <ph id="ph1">`nIndex`</ph>.</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if the index or height is invalid; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>The height of the edit-control (or static-text) portion of the combo box is set independently of the height of the list items.</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>An application must ensure that the height of the edit-control (or static-text) portion is not smaller than the height of a particular list-box item.</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#38</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>CComboBox::SetLocale</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>Sets the locale identifier for this combo box.</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>The new locale identifier (LCID) value to set for the combo box.</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>The previous locale identifier (LCID) value for this combo box.</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>SetLocale<ept id="p1">**</ept> is not called, the default locale is obtained from the system.</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>This system default locale can be modified by using Control Panel's Regional (or International) application.</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#39</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>CComboBox::SetMinVisibleItems</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>Sets the minimum number of visible items in the drop-down list of the current combo box control.</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>Specifies the minimum number of visible items.</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>if this method is successful; otherwise, <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>This method sends the <bpt id="p1">[</bpt>CB_SETMINVISIBLE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/bb775915)</ept> message, which is described in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>The following code example defines the variable, <ph id="ph1">`m_combobox`</ph>, that is used to programmatically access the combo box control.</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>This variable is used in the next example.</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox_s1#1</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>The following code example inserts 20 items into the drop-down list of a combo box control.</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>Then it specifies that a minimum of 10 items be displayed when a user presses the drop-down arrow.</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox_s1#2</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>CComboBox::SetTopIndex</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>Ensures that a particular item is visible in the list-box portion of the combo box.</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Specifies the zero-based index of the list-box item.</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>Zero if successful, or <bpt id="p1">**</bpt>CB_ERR<ept id="p1">**</ept> if an error occurs.</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>The system scrolls the list box until either the item specified by <ph id="ph1">`nIndex`</ph> appears at the top of the list box or the maximum scroll range has been reached.</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>NVC_MFC_CComboBox#40</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>CComboBox::ShowDropDown</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>Shows or hides the list box of a combo box that has the <bpt id="p1">[</bpt>CBS_DROPDOWN<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> or <bpt id="p2">[</bpt>CBS_DROPDOWNLIST<ept id="p2">](../../mfc/reference/combo-box-styles.md)</ept> style.</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>bShowIt</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Specifies whether the drop-down list box is to be shown or hidden.</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>A value of <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> shows the list box.</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>A value of <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept> hides the list box.</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>By default, a combo box of this style will show the list box.</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>This member function has no effect on a combo box created with the <bpt id="p1">[</bpt>CBS_SIMPLE<ept id="p1">](../../mfc/reference/combo-box-styles.md)</ept> style.</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CComboBox::GetDroppedState<ept id="p1">](#ccombobox__getdroppedstate)</ept>.</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>MFC Sample CTRLBARS</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>CWnd Class</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>CWnd Class</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>CButton Class</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>CEdit Class</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>CListBox Class</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>CScrollBar Class</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>CStatic Class</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>CDialog Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>