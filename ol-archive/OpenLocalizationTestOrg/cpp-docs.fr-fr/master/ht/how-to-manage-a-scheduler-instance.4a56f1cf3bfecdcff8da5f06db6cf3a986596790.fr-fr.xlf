<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e4eb5f4f02c9f3a0dc8ef4aafa1e400441d5d308</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\how-to-manage-a-scheduler-instance.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33f561518c42d2426ed041a500c2b5971683fa9e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9cfb27f379a75170044f113c069e7060f0388da1</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Manage a Scheduler Instance | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Manage a Scheduler Instance</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Scheduler instances let you associate specific scheduling policies with various kinds of workloads.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic contains two basic examples that show how to create and manage a scheduler instance.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The examples create schedulers that use the default scheduler policies.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For an example that creates a scheduler that uses a custom policy, see <bpt id="p1">[</bpt>How to: Specify Specific Scheduler Policies<ept id="p1">](../../parallel/concrt/how-to-specify-specific-scheduler-policies.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>To manage a scheduler instance in your application</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Create a <bpt id="p1">[</bpt>concurrency::SchedulerPolicy<ept id="p1">](../../parallel/concrt/reference/schedulerpolicy-class.md)</ept> object that contains the policy values for the scheduler to use.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>concurrency::CurrentScheduler::Create<ept id="p1">](reference/currentscheduler-class.md#create)</ept> method or the <bpt id="p2">[</bpt>concurrency::Scheduler::Create<ept id="p2">](reference/scheduler-class.md#create)</ept> method to create a scheduler instance.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If you use the <ph id="ph1">`Scheduler::Create`</ph> method, call the <bpt id="p1">[</bpt>concurrency::Scheduler::Attach<ept id="p1">](reference/scheduler-class.md#attach)</ept> method when you need to associate the scheduler with the current context.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CreateEvent<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682396)</ept> function to create a handle to a non-signaled, auto-reset event object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Pass the handle to the event object that you just created to the <bpt id="p1">[</bpt>concurrency::CurrentScheduler::RegisterShutdownEvent<ept id="p1">](reference/currentscheduler-class.md#registershutdownevent)</ept> method or the <bpt id="p2">[</bpt>concurrency::Scheduler::RegisterShutdownEvent<ept id="p2">](reference/scheduler-class.md#registershutdownevent)</ept> method.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This registers the event to be set when the scheduler is destroyed.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Perform the tasks that you want the current scheduler to schedule.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>concurrency::CurrentScheduler::Detach<ept id="p1">](reference/currentscheduler-class.md#detach)</ept> method to detach the current scheduler and restore the previous scheduler as the current one.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you use the <ph id="ph1">`Scheduler::Create`</ph> method, call the <bpt id="p1">[</bpt>concurrency::Scheduler::Release<ept id="p1">](reference/scheduler-class.md#release)</ept> method to decrement the reference count of the <ph id="ph2">`Scheduler`</ph> object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Pass the handle to the event to the <bpt id="p1">[</bpt>WaitForSingleObject<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms687032)</ept> function to wait for the scheduler to shut down.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Call the <bpt id="p1">[</bpt>CloseHandle<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms724211)</ept> function to close the handle to the event object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following code shows two ways to manage a scheduler instance.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each example first uses the default scheduler to perform a task that prints out the unique identifier of the current scheduler.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Each example then uses a scheduler instance to perform the same task again.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Finally, each example restores the default scheduler as the current one and performs the task one more time.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The first example uses the <bpt id="p1">[</bpt>concurrency::CurrentScheduler<ept id="p1">](../../parallel/concrt/reference/currentscheduler-class.md)</ept> class to create a scheduler instance and associate it with the current context.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The second example uses the <bpt id="p1">[</bpt>concurrency::Scheduler<ept id="p1">](../../parallel/concrt/reference/scheduler-class.md)</ept> class to perform the same task.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Typically, the <ph id="ph1">`CurrentScheduler`</ph> class is used to work with the current scheduler.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The second example, which uses the <ph id="ph1">`Scheduler`</ph> class, is useful when you want to control when the scheduler is associated with the current context or when you want to associate specific schedulers with specific tasks.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>concrt-scheduler-instance#1</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This example produces the following output.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Copy the example code and paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`scheduler-instance.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>cl.exe /EHsc scheduler-instance.cpp</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Scheduler Instances</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>How to: Specify Specific Scheduler Policies</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>