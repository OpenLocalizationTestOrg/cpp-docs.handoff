<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9aecd85ec5c82c930846e66b853b2a7b09b556f0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\map-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9da260af05c244520f63cfce628f1ed9941553ea</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d8427642e586562682fc13f43827d7280385bc36</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>map Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>map Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Used for the storage and retrieval of data from a collection in which each element is a pair that has both a data value and a sort key.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The value of the key is unique and is used to automatically sort the data.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The value of an element in a map can be changed directly.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The key value is a constant and cannot be changed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Instead, key values associated with old elements must be deleted, and new key values must be inserted for new elements.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The key data type to be stored in the map.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The element data type to be stored in the map.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The type that provides a function object that can compare two element values as sort keys to determine their relative order in the map.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>This argument is optional and the binary predicate <ph id="ph1">`less&lt;``Key``&gt;`</ph> is the default value.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>In C++14 you can enable heterogeneous lookup by specifying the std::less&lt;&gt; predicate that has no type parameters.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Heterogeneous Lookup in Associative Containers<ept id="p1">](../standard-library/stl-containers.md#sequence_containers)</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The type that represents the stored allocator object that encapsulates details about the map's allocation and deallocation of memory.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This argument is optional and the default value is <ph id="ph1">`allocator&lt;pair``&lt;const``Key`</ph><bpt id="p1">*</bpt>,<ept id="p1">*</ept> <ph id="ph2">`Type``&gt; &gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Standard Template Library (STL) map class is:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A container of variable size that efficiently retrieves element values based on associated key values.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Reversible, because it provides bidirectional iterators to access its elements.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Sorted, because its elements are ordered by key values according to a specified comparison function.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Unique.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>because each of its elements must have a unique key.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>A pair-associative container, because its element data values are distinct from its key values.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A template class, because the functionality it provides is generic and independent of element or key type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The data types used for elements and keys are specified as parameters in the class template together with the comparison function and allocator.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The iterator provided by the map class is a bidirectional iterator, but the <bpt id="p1">[</bpt>insert<ept id="p1">](#map__insert)</ept> and <bpt id="p2">[</bpt>map<ept id="p2">](#map__map)</ept> class member functions have versions that take as template parameters a weaker input iterator, whose functionality requirements are fewer than those guaranteed by the class of bidirectional iterators.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The different iterator concepts are related by refinements in their functionality.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Each iterator concept has its own set of requirements, and the algorithms that work with it must be limited by those requirements.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An input iterator may be dereferenced to refer to some object and may be incremented to the next iterator in the sequence.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>We recommend that you base the choice of container type on the kind of searching and inserting that is required by the application.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Associative containers are optimized for the operations of lookup, insertion, and removal.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The member functions that explicitly support these operations perform them in a worst-case time that is proportional to the logarithm of the number of elements in the container.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Inserting elements invalidates no iterators, and removing elements invalidates only those iterators that specifically pointed to the removed elements.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>We recommend that you make the map the associative container of choice when conditions that associate values with keys are satisfied by the application.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A model for this kind of structure is an ordered list of uniquely occurring key words that have associated string values that provide definitions.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If a word has more than one correct definition, so that key is not unique, then a multimap would be the container of choice.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If just the list of words is being stored, then a set would be the appropriate container.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If multiple occurrences of the words are allowed, then a multiset would be appropriate.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The map orders the elements it controls by calling a stored function object of type <bpt id="p1">[</bpt>key_compare<ept id="p1">](#map__key_compare)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This stored object is a comparison function that is accessed by calling the <bpt id="p1">[</bpt>key_comp<ept id="p1">](#map__key_comp)</ept> method.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In general, any two given elements are compared to determine whether one is less than the other or whether they are equivalent.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>As all elements are compared, an ordered sequence of non-equivalent elements is created.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The comparison function is a binary predicate that induces a strict weak ordering in the standard mathematical sense.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A binary predicate                     f(x,y) is a function object that has two argument objects                     x and                     y, and a return value of <ph id="ph1">`true`</ph> or <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>An ordering imposed on a set is a strict weak ordering if the binary predicate is irreflexive, antisymmetric, and transitive, and if equivalence is transitive, where two objects                     x and                     y are defined to be equivalent when both                     f(x,y)and                     f(y,x) are <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the stronger condition of equality between keys replaces that of equivalence, the ordering becomes total (in the sense that all the elements are ordered with regard to one other), and the keys matched will be indiscernible from one other.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In C++14 you can enable heterogeneous lookup by specifying the <ph id="ph1">`std::less&lt;&gt;`</ph> or <ph id="ph2">`std::greater&lt;&gt;`</ph> predicate that has no type parameters.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Heterogeneous Lookup in Associative Containers<ept id="p1">](../standard-library/stl-containers.md#sequence_containers)</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>map</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Constructs a list of a specific size or with elements of a specific value or with a specific <ph id="ph1">`allocator`</ph> or as a copy of some other map.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>allocator_type</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A typedef for the <ph id="ph1">`allocator`</ph> class for the map object.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>const_iterator</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A typedef for a bidirectional iterator that can read a <ph id="ph1">`const`</ph> element in the map.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>const_pointer</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>A typedef for a pointer to a <ph id="ph1">`const`</ph> element in a map.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>const_reference</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A typedef for a reference to a <ph id="ph1">`const`</ph> element stored in a map for reading and performing <ph id="ph2">`const`</ph> operations.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>const_reverse_iterator</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read any <ph id="ph1">`const`</ph> element in the map.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>difference_type</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A signed integer typedef for the number of elements of a map in a range between elements pointed to by iterators.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>iterator</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A typedef for a bidirectional iterator that can read or modify any element in a map.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>key_compare</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>A typedef for a function object that can compare two sort keys to determine the relative order of two elements in the map.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>key_type</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>A typedef for the sort key stored in each element of the map.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>mapped_type</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A typedef for the data stored in each element of a map.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>pointer</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A typedef for a pointer to a <ph id="ph1">`const`</ph> element in a map.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>reference</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>A typedef for a reference to an element stored in a map.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>reverse_iterator</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A typedef for a bidirectional iterator that can read or modify an element in a reversed map.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>size_type</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>An unsigned integer typedef for the number of elements in a map</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>value_type</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A typedef for the type of object stored as an element in a map.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>at</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Finds an element with a specified key value.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>begin</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Returns an iterator that points to the first element in the map.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>cbegin</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that points to the first element in the map.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>cend</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Returns a const past-the-end iterator.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>clear</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Erases all the elements of a map.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>count</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in a map whose key matches the key specified in a parameter.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>crbegin</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that points to the first element in a reversed map.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>crend</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that points to the location after the last element in a reversed map.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>emplace</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Inserts an element constructed in place into the map.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>emplace_hint</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Inserts an element constructed in place into the map, with a placement hint.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>empty</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph> if a map is empty.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>end</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Returns the past-the-end iterator.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>equal_range</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Returns a pair of iterators.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The first iterator in the pair points to the first element in a <ph id="ph1">`map`</ph> with a key that is greater than a specified key.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The second iterator in the pair points to the first element in the <ph id="ph1">`map`</ph> with a key that is equal to or greater than the key.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>erase</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Removes an element or a range of elements in a map from the specified positions.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>find</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Returns an iterator that points to the location of an element in a map that has a key equal to a specified key.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>get_allocator</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Returns a copy of the <ph id="ph1">`allocator`</ph> object that is used to construct the map.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>insert</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Inserts an element or a range of elements into the map at a specified position.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>key_comp</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Returns a copy of the comparison object that used to order keys in a map.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>lower_bound</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element in a map that has a key value that is equal to or greater than that of a specified key.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>max_size</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Returns the maximum length of the map.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>rbegin</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Returns an iterator that points to the first element in a reversed map.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>rend</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Returns an iterator that points to the location after the last element in a reversed map.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>size</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the map.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two maps.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>upper_bound</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element in a map that has a key value that is greater than that of a specified key.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>value_comp</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the comparison object that is used to order element values in a map.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>operator&amp;#91;&amp;#93;</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Inserts an element into a map with a specified key value.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>operator=</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Replaces the elements of a map with a copy of another map.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>map&gt;</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>map::allocator_type</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A type that represents the allocator class for the map object.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>See example for <bpt id="p1">[</bpt>get_allocator<ept id="p1">](#map__get_allocator)</ept> for an example that uses <ph id="ph1">`allocator_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>map::at</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Finds an element with a specified key value.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The key value to find.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>A reference to the data value of the element found.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>If the argument key value is not found, then the function throws an object of class <bpt id="p1">[</bpt>out_of_range Class<ept id="p1">](../standard-library/out-of-range-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>map::begin</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Returns an iterator addressing the first element in the map.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>A bidirectional iterator addressing the first element in the map or the location succeeding an empty map.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>map::cbegin</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`const`</ph> iterator that addresses the location just beyond the last element in a range.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph> bidirectional iterator addressing the first element in the range, or the location just beyond the end of an empty range (for an empty range, <ph id="ph2">`cbegin() == cend()`</ph>).</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>With the return value of <ph id="ph1">`cbegin`</ph>, the elements in the range cannot be modified.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>You can use this member function in place of the <ph id="ph1">`begin()`</ph> member function to guarantee that the return value is <ph id="ph2">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Typically, it's used in conjunction with the <bpt id="p1">[</bpt>auto<ept id="p1">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>In the example, consider <ph id="ph1">`Container`</ph> to be a modifiable (non- <ph id="ph2">`const`</ph>) container of any kind that supports <ph id="ph3">`begin()`</ph> and <ph id="ph4">`cbegin()`</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>map::cend</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`const`</ph> iterator that addresses the location just beyond the last element in a range.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`const`</ph> bidirectional-access iterator that points just beyond the end of the range.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>is used to test whether an iterator has passed the end of its range.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>You can use this member function in place of the <ph id="ph1">`end()`</ph> member function to guarantee that the return value is <ph id="ph2">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Typically, it's used in conjunction with the <bpt id="p1">[</bpt>auto<ept id="p1">](../cpp/auto-cpp.md)</ept> type deduction keyword, as shown in the following example.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>In the example, consider <ph id="ph1">`Container`</ph> to be a modifiable (non- <ph id="ph2">`const`</ph>) container of any kind that supports <ph id="ph3">`end()`</ph> and <ph id="ph4">`cend()`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`cend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>map::clear</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Erases all the elements of a map.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of the map::clear member function.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>map::const_iterator</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in the map.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_iterator`</ph> cannot be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`const_iterator`</ph> defined by map points to elements that are objects of <bpt id="p1">[</bpt>value_type<ept id="p1">](#map__value_type)</ept>, that is of type <ph id="ph2">`pair`\&lt;</ph> <bpt id="p2">**</bpt>constKey<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Type<ept id="p3">**</ept>&gt;, whose first member is the key to the element and whose second member is the mapped datum held by the element.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>To dereference a <ph id="ph1">`const_iterator``cIter`</ph> pointing to an element in a map, use the <bpt id="p1">**</bpt><ph id="ph2">-&gt;</ph><ept id="p1">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>To access the value of the key for the element, use <ph id="ph1">`cIter` -&gt; </ph><bpt id="p1">**</bpt>first<ept id="p1">**</ept>, which is equivalent to (<ph id="ph2">\*</ph> <ph id="ph3">`cIter`</ph>).</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>first<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>To access the value of the mapped datum for the element, use <ph id="ph1">`cIter` -&gt; </ph><bpt id="p1">**</bpt>second<ept id="p1">**</ept>, which is equivalent to (<ph id="ph2">\*</ph> <ph id="ph3">`cIter`</ph>).</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>second<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>See example for <bpt id="p1">[</bpt>begin<ept id="p1">](#map__begin)</ept> for an example that uses <ph id="ph1">`const_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>map::const_pointer</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in a map.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_pointer`</ph> cannot be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>In most cases, an <bpt id="p1">[</bpt>iterator<ept id="p1">](#map__iterator)</ept> should be used to access the elements in a map object.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>map::const_reference</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to a <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element stored in a map for reading and performing <bpt id="p2">**</bpt>const<ept id="p2">**</ept> operations.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>map::const_reverse_iterator</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read any <bpt id="p1">**</bpt>const<ept id="p1">**</ept> element in the map.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`const_reverse_iterator`</ph> cannot modify the value of an element and is use to iterate through the map in reverse.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`const_reverse_iterator`</ph> defined by map points to elements that are objects of <bpt id="p1">[</bpt>value_type<ept id="p1">](#map__value_type)</ept>, that is of type <ph id="ph2">`pair`</ph><bpt id="p2">*</bpt><ph id="ph3">\&lt;</ph><ept id="p2">*</ept><bpt id="p3">**</bpt>constKey<ept id="p3">**</ept><bpt id="p4">*</bpt>,<ept id="p4">*</ept> <bpt id="p5">**</bpt>Type<ept id="p5">**</ept><bpt id="p6">*</bpt><ph id="ph4">&gt;</ph><ept id="p6">*</ept>, whose first member is the key to the element and whose second member is the mapped datum held by the element.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>To dereference a <ph id="ph1">`const_reverse_iterator``crIter`</ph> pointing to an element in a map, use the <bpt id="p1">**</bpt><ph id="ph2">-&gt;</ph><ept id="p1">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>To access the value of the key for the element, use <ph id="ph1">`crIter` -&gt; </ph><bpt id="p1">**</bpt>first<ept id="p1">**</ept>, which is equivalent to (<ph id="ph2">\*</ph> <ph id="ph3">`crIter`</ph>).</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>first<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>To access the value of the mapped datum for the element, use <ph id="ph1">`crIter` -&gt; </ph><bpt id="p1">**</bpt>second<ept id="p1">**</ept>, which is equivalent to (<ph id="ph2">\*</ph> <ph id="ph3">`crIter`</ph>).</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>first<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>rend<ept id="p1">](#map__rend)</ept> for an example of how to declare and use <ph id="ph1">`const_reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>map::count</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in a map whose key matches a parameter-specified key.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The key value of the elements to be matched from the map.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>1 if the map contains an element whose sort key matches the parameter key; 0 if the map does not contain an element with a matching key.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>The member function returns the number of elements <bpt id="p1">*</bpt>x<ept id="p1">*</ept> in the range</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>[ <ph id="ph1">`lower_bound`</ph> (_ <bpt id="p1">*</bpt>Key<ept id="p1">*</ept> ), <ph id="ph2">`upper_bound`</ph> (<ph id="ph3">\_</ph> <bpt id="p2">*</bpt>Key<ept id="p2">*</ept> ) )</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>which is 0 or 1 in the case of map, which is a unique associative container.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of the map::count member function.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>map::crbegin</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Returns a const iterator addressing the first element in a reversed map.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>A const reverse bidirectional iterator addressing the first element in a reversed <bpt id="p1">[</bpt>map<ept id="p1">](../standard-library/map-class.md)</ept> or addressing what had been the last element in the unreversed <ph id="ph1">`map`</ph>.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>is used with a reversed <ph id="ph1">`map`</ph> just as <bpt id="p1">[</bpt>begin<ept id="p1">](#map__begin)</ept> is used with a <ph id="ph2">`map`</ph>.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>With the return value of <ph id="ph1">`crbegin`</ph>, the <ph id="ph2">`map`</ph> object cannot be modified</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>can be used to iterate through a <ph id="ph1">`map`</ph> backwards.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>map::crend</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Returns a const iterator that addresses the location succeeding the last element in a reversed map.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>A const reverse bidirectional iterator that addresses the location succeeding the last element in a reversed <bpt id="p1">[</bpt>map<ept id="p1">](../standard-library/map-class.md)</ept> (the location that had preceded the first element in the unreversed <ph id="ph1">`map`</ph>).</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>is used with a reversed map just as <bpt id="p1">[</bpt>end<ept id="p1">](#map__end)</ept> is used with a <ph id="ph1">`map`</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>With the return value of <ph id="ph1">`crend`</ph>, the <ph id="ph2">`map`</ph> object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>can be used to test to whether a reverse iterator has reached the end of its <ph id="ph1">`map`</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`crend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>map::difference_type</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>A signed integer type that can be used to represent the number of elements of a map in a range between elements pointed to by iterators.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`difference_type`</ph> is the type returned when subtracting or incrementing through iterators of the container.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`difference_type`</ph> is typically used to represent the number of elements in the range <bpt id="p1">*</bpt>[ first,  last)<ept id="p1">*</ept> between the iterators <ph id="ph2">` first`</ph> and <ph id="ph3">` last`</ph>, includes the element pointed to by <ph id="ph4">` first`</ph> and the range of elements up to, but not including, the element pointed to by <ph id="ph5">` last`</ph>.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>Note that although <ph id="ph1">`difference_type`</ph> is available for all iterators that satisfy the requirements of an input iterator, which includes the class of bidirectional iterators supported by reversible containers such as set, subtraction between iterators is only supported by random access iterators provided by a random access container such as vector.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>map::emplace</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Inserts an element constructed in place (no copy or move operations are performed) into a map.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The arguments forwarded to construct an element to be inserted into the map unless it already contains an element whose value is equivalently ordered.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>pair<ept id="p1">](../standard-library/pair-structure.md)</ept> whose <ph id="ph1">`bool`</ph> component is true if an insertion was made, and false if the map already contained an element of equivalent value in the ordering.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>The iterator component of the return-value pair points to the newly inserted element if the <ph id="ph1">`bool`</ph> component is true, or to the existing element if the <ph id="ph2">`bool`</ph> component is false.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>To access the iterator component of a <ph id="ph1">`pair``pr`</ph>, use <ph id="ph2">`pr.first`</ph>; to dereference it, use <ph id="ph3">`*pr.first`</ph>.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>To access the <ph id="ph1">`bool`</ph> component, use <ph id="ph2">`pr.second`</ph>.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>For an example, see the sample code later in this article.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>No iterators or references are invalidated by this function.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>During emplacement, if an exception is thrown, the container's state is not modified.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>value_type<ept id="p1">](#map__value_type)</ept> of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>map::emplace_hint</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Inserts an element constructed in place (no copy or move operations are performed), with a placement hint.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The arguments forwarded to construct an element to be inserted into the map unless the map already contains that element or, more generally, unless it already contains an element whose key is equivalently ordered.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>The place to start searching for the correct point of insertion.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>(If that point immediately precedes <ph id="ph1">`where`</ph>, insertion can occur in amortized constant time instead of logarithmic time.)</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>An iterator to the newly inserted element.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>If the insertion failed because the element already exists, returns an iterator to the existing element with its key.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>No iterators or references are invalidated by this function.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>During emplacement, if an exception is thrown, the container's state is not modified.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>value_type<ept id="p1">](#map__value_type)</ept> of an element is a pair, so that the value of an element will be an ordered pair with the first component equal to the key value and the second component equal to the data value of the element.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>map::empty</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Tests if a map is empty.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the map is empty; <bpt id="p2">**</bpt>false<ept id="p2">**</ept> if the map is nonempty.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>map::end</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Returns the past-the-end iterator.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>The past-the-end iterator.</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>If the map is empty, then <ph id="ph1">`map::end() == map::begin()`</ph>.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>end<ept id="p1">**</ept> is used to test whether an iterator has passed the end of its map.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>The value returned by <bpt id="p1">**</bpt>end<ept id="p1">**</ept> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>For a code example, see <bpt id="p1">[</bpt>map::find<ept id="p1">](#map__find)</ept>.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>map::equal_range</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Returns a pair of iterators that represent the <bpt id="p1">[</bpt>lower_bound<ept id="p1">](#map__lower_bound)</ept> of the key and the <bpt id="p2">[</bpt>upper_bound<ept id="p2">](#map__upper_bound)</ept> of the key.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>The argument key value to be compared with the sort key of an element from the map being searched.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>To access the first iterator of a pair <ph id="ph1">`pr`</ph> returned by the member function, use <ph id="ph2">`pr`</ph>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>first<ept id="p1">**</ept>, and to dereference the lower bound iterator, use <ph id="ph1">\*</ph>( <ph id="ph2">`pr`</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>first<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>To access the second iterator of a pair <ph id="ph1">`pr`</ph> returned by the member function, use <ph id="ph2">`pr`</ph>.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>second<ept id="p1">**</ept>, and to dereference the upper bound iterator, use <ph id="ph1">\*</ph>( <ph id="ph2">`pr`</ph>.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>second<ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>map::erase</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Removes an element or a range of elements in a map from specified positions or removes elements that match a specified key.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Position of the element to be removed.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Position of the first element to be removed.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>Position just beyond the last element to be removed.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>The key value of the elements to be removed.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>For the first two member functions, a bidirectional iterator that designates the first element remaining beyond any elements removed, or an element that is the end of the map if no such element exists.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>For the third member function, returns the number of elements that have been removed from the map.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>map::find</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Returns an iterator that refers to the location of an element in a map that has a key equivalent to a specified key.</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>The key value to be matched by the sort key of an element from the map being searched.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>An iterator that refers to the location of an element with a specified key, or the location succeeding the last element in the map ( <ph id="ph1">`map::end()`</ph>) if no match is found for the key.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>The member function returns an iterator that refers to an element in the map whose sort key is equivalent to the argument key under a binary predicate that induces an ordering based on a less than comparability relation.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>find<ept id="p1">**</ept> is assigned to a <bpt id="p2">**</bpt>const_iterator<ept id="p2">**</ept>, the map object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>If the return value of <bpt id="p1">**</bpt>find<ept id="p1">**</ept> is assigned to an <bpt id="p2">**</bpt>iterator<ept id="p2">**</ept>, the map object can be modified</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>map::get_allocator</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>Returns a copy of the allocator object used to construct the map.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>The allocator used by the map.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Allocators for the map class specify how the class manages storage.</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The default allocators supplied with STL container classes is sufficient for most programming needs.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Writing and using your own allocator class is an advanced C++ topic.</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>map::insert</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>Inserts an element or a range of elements into a map.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>The value of an element to be inserted into the map unless it already contains an element whose key is equivalently ordered.</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>The place to start searching for the correct point of insertion.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>(If that point immediately precedes <ph id="ph1">`Where`</ph>, insertion can occur in amortized constant time instead of logarithmic time.)</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>Template parameter that specifies the argument type that the map can use to construct an element of <bpt id="p1">[</bpt>value_type<ept id="p1">](#map__value_type)</ept>, and perfect-forwards <ph id="ph1">`Val`</ph> as an argument.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>The position of the first element to be copied.</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>The position just beyond the last element to be copied.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Template function argument that meets the requirements of an <bpt id="p1">[</bpt>input iterator<ept id="p1">](../standard-library/input-iterator-tag-struct.md)</ept> that points to elements of a type that can be used to construct <bpt id="p2">[</bpt>value_type<ept id="p2">](#map__value_type)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>initializer_list<ept id="p1">](../standard-library/initializer-list.md)</ept> from which to copy the elements.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>The single-element member functions, (1) and (2), return a <bpt id="p1">[</bpt>pair<ept id="p1">](../standard-library/pair-structure.md)</ept> whose <ph id="ph1">`bool`</ph> component is true if an insertion was made, and false if the map already contained an element whose key had an equivalent value in the ordering.</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>The iterator component of the return-value pair points to the newly inserted element if the <ph id="ph1">`bool`</ph> component is true, or to the existing element if the <ph id="ph2">`bool`</ph> component is false.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>The single-element-with-hint member functions, (3) and (4), return an iterator that points to the position where the new element was inserted into the map or, if an element with an equivalent key already exists, to the existing element.</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>No iterators, pointers, or references are invalidated by this function.</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>During the insertion of just one element, if an exception is thrown, the container's state is not modified.</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>During the insertion of multiple elements, if an exception is thrown, the container is left in an unspecified but valid state.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>To access the iterator component of a <ph id="ph1">`pair``pr`</ph> that's returned by the single-element member functions, use <ph id="ph2">`pr.first`</ph>; to dereference the iterator within the returned pair, use <ph id="ph3">`*pr.first`</ph>, giving you an element.</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>To access the <ph id="ph1">`bool`</ph> component, use <ph id="ph2">`pr.second`</ph>.</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>For an example, see the sample code later in this article.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>value_type<ept id="p1">](#map__value_type)</ept> of a container is a typedef that belongs to the container, and for map, <ph id="ph1">`map&lt;K, V&gt;::value_type`</ph> is <ph id="ph2">`pair&lt;const K, V&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>The value of an element is an ordered pair in which the first component is equal to the key value and the second component is equal to the data value of the element.</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>The range member function (5) inserts the sequence of element values into a map that corresponds to each element addressed by an iterator in the range <ph id="ph1">`[First, Last)`</ph>; therefore, <ph id="ph2">`Last`</ph> does not get inserted.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The container member function <ph id="ph1">`end()`</ph> refers to the position just after the last element in the container—for example, the statement <ph id="ph2">`m.insert(v.begin(), v.end());`</ph> attempts to insert all elements of <ph id="ph3">`v`</ph> into <ph id="ph4">`m`</ph>.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Only elements that have unique values in the range are inserted; duplicates are ignored.</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>To observe which elements are rejected, use the single-element versions of <ph id="ph1">`insert`</ph>.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>The initializer list member function (6) uses an <bpt id="p1">[</bpt>initializer_list<ept id="p1">](../standard-library/initializer-list.md)</ept> to copy elements into the map.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>For insertion of an element constructed in place—that is, no copy or move operations are performed—see <bpt id="p1">[</bpt>map::emplace<ept id="p1">](#map__emplace)</ept> and <bpt id="p2">[</bpt>map::emplace_hint<ept id="p2">](#map__emplace_hint)</ept>.</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>map::iterator</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read or modify any element in a map.</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>iterator<ept id="p1">**</ept> defined by map points to elements that are objects of <bpt id="p2">[</bpt>value_type<ept id="p2">](#map__value_type)</ept>, that is of type <ph id="ph1">`pair`</ph><bpt id="p3">*</bpt><ph id="ph2">\&lt;</ph><ept id="p3">*</ept><bpt id="p4">**</bpt>constKey<ept id="p4">**</ept>, <bpt id="p5">**</bpt>Type<ept id="p5">**</ept><bpt id="p6">*</bpt><ph id="ph3">&gt;</ph><ept id="p6">*</ept>, whose first member is the key to the element and whose second member is the mapped datum held by the element.</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>To dereference an <bpt id="p1">**</bpt>iterator<ept id="p1">**</ept><ph id="ph1">`Iter`</ph> pointing to an element in a map, use the <bpt id="p2">**</bpt><ph id="ph2">-&gt;</ph><ept id="p2">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>To access the value of the key for the element, use <ph id="ph1">`Iter` -&gt; </ph><bpt id="p1">**</bpt>first<ept id="p1">**</ept>, which is equivalent to (<ph id="ph2">\*</ph> <ph id="ph3">`Iter`</ph>).</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>first<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>To access the value of the mapped datum for the element, use <ph id="ph1">`Iter` -&gt; </ph><bpt id="p1">**</bpt>second<ept id="p1">**</ept>, which is equivalent to (<ph id="ph2">\*</ph> <ph id="ph3">`Iter`</ph>).</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>second<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>See example for <bpt id="p1">[</bpt>begin<ept id="p1">](#map__begin)</ept> for an example of how to declare and use <bpt id="p2">**</bpt>iterator<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>map::key_comp</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Retrieves a copy of the comparison object used to order keys in a map.</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Returns the function object that a map uses to order its elements.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The stored object defines the member function</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>bool operator<ept id="p1">**</ept>( <bpt id="p2">**</bpt>constKey&amp;<ept id="p2">**</ept><ph id="ph1">` left`</ph>, <bpt id="p3">**</bpt>const Key&amp;<ept id="p3">**</ept><ph id="ph2">` right`</ph>);</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>which returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if <ph id="ph1">` left`</ph> precedes and is not equal to <ph id="ph2">` right`</ph> in the sort order.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>map::key_compare</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>A type that provides a function object that can compare two sort keys to determine the relative order of two elements in the map.</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>is a synonym for the template parameter <ph id="ph1">`Traits`</ph>.</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`Traits`</ph> see the <bpt id="p1">[</bpt>map Class<ept id="p1">](../standard-library/map-class.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>See example for <bpt id="p1">[</bpt>key_comp<ept id="p1">](#map__key_comp)</ept> for an example of how to declare and use <ph id="ph1">`key_compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>map::key_type</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>A type that describes the sort key stored in each element of the map.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>is a synonym for the template parameter <ph id="ph1">`Key`</ph>.</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`Key`</ph>, see the Remarks section of the <bpt id="p1">[</bpt>map Class<ept id="p1">](../standard-library/map-class.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>See example for <bpt id="p1">[</bpt>value_type<ept id="p1">](#map__value_type)</ept> for an example of how to declare and use <ph id="ph1">`key_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>map::lower_bound</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element in a map with a key value that is equal to or greater than that of a specified key.</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The argument key value to be compared with the sort key of an element from the map being searched.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>iterator<ept id="p1">**</ept> or <ph id="ph1">`const_iterator`</ph> that addresses the location of an element in a map that with a key that is equal to or greater than the argument key, or that addresses the location succeeding the last element in the map if no match is found for the key.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`lower_bound`</ph> is assigned to a <ph id="ph2">`const_iterator`</ph>, the map object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`lower_bound`</ph> is assigned to an <bpt id="p1">**</bpt>iterator<ept id="p1">**</ept>, the map object can be modified.</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>map::map</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>Constructs a map that is empty or that is a copy of all or part of some other map.</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>The storage allocator class to be used for this map object, which defaults to <ph id="ph1">`Allocator`</ph>.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>The comparison function of type <ph id="ph1">`const Traits`</ph> used to order the elements in the map, which defaults to <ph id="ph2">`hash_compare`</ph>.</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>The map of which the constructed set is to be a copy.</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>The position of the first element in the range of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>The position of the first element beyond the range of elements to be copied.</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>The initializer_list from which the elements are to be copied.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>All constructors store a type of allocator object that manages memory storage for the map and that can later be returned by calling <bpt id="p1">[</bpt>get_allocator<ept id="p1">](#map__get_allocator)</ept>.</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>The allocator parameter is often omitted in the class declarations and preprocessing macros used to substitute alternative allocators.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>All constructors initialize their map.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>All constructors store a function object of type Traits that is used to establish an order among the keys of the map and that can later be returned by calling <bpt id="p1">[</bpt>key_comp<ept id="p1">](#map__key_comp)</ept>.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>The first three constructors specify an empty initial map, the second specifying the type of comparison function ( <ph id="ph1">`Comp`</ph>) to be used in establishing the order of the elements and the third explicitly specifying the allocator type ( <ph id="ph2">`Al`</ph>) to be used.</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>The key word <ph id="ph1">`explicit`</ph> suppresses certain kinds of automatic type conversion.</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>The fourth constructor specifies a copy of the map <ph id="ph1">`Right`</ph>.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>The fifth constructor specifies a copy of the map by moving <ph id="ph1">`Right`</ph>.</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>The sixth, seventh, and eighth constructors use an initializer_list from which to copy the members.</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>The next three constructors copy the range <ph id="ph1">`[First, Last)`</ph> of a map with increasing explicitness in specifying the type of comparison function of class <ph id="ph2">`Traits`</ph> and allocator.</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>map::mapped_type</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>A type that represents the data stored in a map.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>The type <ph id="ph1">`mapped_type`</ph> is a synonym for the class's <ph id="ph2">`Type`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`Type`</ph> see the <bpt id="p1">[</bpt>map Class<ept id="p1">](../standard-library/map-class.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>See example for <bpt id="p1">[</bpt>value_type<ept id="p1">](#map__value_type)</ept> for an example of how to declare and use <ph id="ph1">`mapped_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>map::max_size</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Returns the maximum length of the map.</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>The maximum possible length of the map.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>map::operator[]</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>Inserts an element into a map with a specified key value.</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>The key value of the element that is to be inserted.</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>A reference to the data value of the inserted element.</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>If the argument key value is not found, then it is inserted along with the default value of the data type.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>may be used to insert elements into a map <ph id="ph1">`m`</ph> using <ph id="ph2">`m[ key] = DataValue;`</ph> where <ph id="ph3">`DataValue`</ph> is the value of the <ph id="ph4">`mapped_type`</ph> of the element with a key value of <ph id="ph5">` key`</ph>.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>When using <ph id="ph1">`operator[]`</ph> to insert elements, the returned reference does not indicate whether an insertion is changing a pre-existing element or creating a new one.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>The member functions <bpt id="p1">[</bpt>find<ept id="p1">](#map__find)</ept> and <bpt id="p2">[</bpt>insert<ept id="p2">](#map__insert)</ept> can be used to determine whether an element with a specified key is already present before an insertion.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>map::operator=</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>Replaces the elements of a map with a copy of another map.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>map<ept id="p1">](../standard-library/map-class.md)</ept> being copied into the <ph id="ph1">`map`</ph>.</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>After erasing any existing elements in a <ph id="ph1">`map`</ph>, <ph id="ph2">`operator=`</ph> either copies or moves the contents of <ph id="ph3">` right`</ph> into the map.</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>map::pointer</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>A type that provides a pointer to an element in a map.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>A type <bpt id="p1">**</bpt>pointer<ept id="p1">**</ept> can be used to modify the value of an element.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>In most cases, an <bpt id="p1">[</bpt>iterator<ept id="p1">](#map__iterator)</ept> should be used to access the elements in a map object.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>map::rbegin</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Returns an iterator addressing the first element in a reversed map.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>A reverse bidirectional iterator addressing the first element in a reversed map or addressing what had been the last element in the unreversed map.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>is used with a reversed map just as <bpt id="p1">[</bpt>begin<ept id="p1">](#map__begin)</ept> is used with a map.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rbegin`</ph> is assigned to a <ph id="ph2">`const_reverse_iterator`</ph>, then the map object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rbegin`</ph> is assigned to a <ph id="ph2">`reverse_iterator`</ph>, then the map object can be modified.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>can be used to iterate through a map backwards.</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>map::reference</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>A type that provides a reference to an element stored in a map.</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>map::rend</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Returns an iterator that addresses the location succeeding the last element in a reversed map.</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>A reverse bidirectional iterator that addresses the location succeeding the last element in a reversed map (the location that had preceded the first element in the unreversed map).</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>is used with a reversed map just as <bpt id="p1">[</bpt>end<ept id="p1">](#map__end)</ept> is used with a map.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rend`</ph> is assigned to a <ph id="ph2">`const_reverse_iterator`</ph>, then the map object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>If the return value of <ph id="ph1">`rend`</ph> is assigned to a <ph id="ph2">`reverse_iterator`</ph>, then the map object can be modified.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>can be used to test to whether a reverse iterator has reached the end of its map.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>The value returned by <ph id="ph1">`rend`</ph> should not be dereferenced.</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>map::reverse_iterator</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>A type that provides a bidirectional iterator that can read or modify an element in a reversed map.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>A type <ph id="ph1">`reverse_iterator`</ph> cannot modify the value of an element and is use to iterate through the map in reverse.</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`reverse_iterator`</ph> defined by map points to elements that are objects of <bpt id="p1">[</bpt>value_type<ept id="p1">](#map__value_type)</ept>, that is of type <ph id="ph2">`pair`</ph><bpt id="p2">*</bpt><ph id="ph3">\&lt;</ph><ept id="p2">*</ept><bpt id="p3">**</bpt>constKey<ept id="p3">**</ept>, <bpt id="p4">**</bpt>Type<ept id="p4">**</ept><bpt id="p5">*</bpt><ph id="ph4">&gt;</ph><ept id="p5">*</ept>, whose first member is the key to the element and whose second member is the mapped datum held by the element.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>To dereference a <ph id="ph1">`reverse_iterator``rIter`</ph> pointing to an element in a map, use the <bpt id="p1">**</bpt><ph id="ph2">-&gt;</ph><ept id="p1">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>To access the value of the key for the element, use <ph id="ph1">`rIter` -&gt; </ph><bpt id="p1">**</bpt>first<ept id="p1">**</ept>, which is equivalent to (<ph id="ph2">\*</ph> <ph id="ph3">`rIter`</ph>).</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>first<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>To access the value of the mapped datum for the element, use <ph id="ph1">`rIter` -&gt; </ph><bpt id="p1">**</bpt>second<ept id="p1">**</ept>, which is equivalent to (<ph id="ph2">\*</ph> <ph id="ph3">`rIter`</ph>).</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>first<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>See example for <bpt id="p1">[</bpt>rbegin<ept id="p1">](#map__rbegin)</ept> for an example of how to declare and use <ph id="ph1">`reverse_iterator`</ph>.</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>map::size</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in the map.</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>The current length of the map.</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>The following example demonstrates the use of the map::size member function.</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>map::size_type</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>An unsigned integer type that can represent the number of elements in a map.</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>size<ept id="p1">](#map__size)</ept> for an example of how to declare and use <ph id="ph1">`size_type`</ph>.</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>map::swap</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>Exchanges the elements of two maps.</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>The argument map providing the elements to be swapped with the target map.</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>The member function invalidates no references, pointers, or iterators that designate elements in the two maps whose elements are being exchanged.</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>map::upper_bound</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>Returns an iterator to the first element in a map that with a key having a value that is greater than that of a specified key.</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>The argument key value to be compared with the sort key value of an element from the map being searched.</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">**</bpt>iterator<ept id="p1">**</ept> or <ph id="ph1">`const_iterator`</ph> that addresses the location of an element in a map that with a key that is greater than the argument key, or that addresses the location succeeding the last element in the map if no match is found for the key.</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>If the return value is assigned to a <ph id="ph1">`const_iterator`</ph>, the map object cannot be modified.</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>If the return value is assigned to a <bpt id="p1">**</bpt>iterator<ept id="p1">**</ept>, the map object can be modified.</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>map::value_comp</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>The member function returns a function object that determines the order of elements in a map by comparing their key values.</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Returns the comparison function object that a map uses to order its elements.</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>For a map <bpt id="p1">*</bpt>m<ept id="p1">*</ept>, if two elements <bpt id="p2">*</bpt>e<ept id="p2">*</ept>1( <bpt id="p3">*</bpt>k<ept id="p3">*</ept>1, <bpt id="p4">*</bpt>d<ept id="p4">*</ept>1) and <bpt id="p5">*</bpt>e<ept id="p5">*</ept>2( <bpt id="p6">*</bpt>k<ept id="p6">*</ept>2, <ph id="ph1">`d`</ph>2) are objects of type <ph id="ph2">`value_type`</ph>, where <bpt id="p7">*</bpt>k<ept id="p7">*</ept>1 and <bpt id="p8">*</bpt>k<ept id="p8">*</ept>2 are their keys of type <ph id="ph3">`key_type`</ph> and <ph id="ph4">`d`</ph>1 and <ph id="ph5">`d`</ph>2 are their data of type <ph id="ph6">`mapped_type`</ph>, then <bpt id="p9">*</bpt>m.<ept id="p9">*</ept><ph id="ph7">`value_comp`</ph>( <bpt id="p10">*</bpt>e<ept id="p10">*</ept>1, <bpt id="p11">*</bpt>e<ept id="p11">*</ept>2) is equivalent to <bpt id="p12">*</bpt>m.<ept id="p12">*</ept><ph id="ph8">`key_comp`</ph><bpt id="p13">*</bpt>(k<ept id="p13">*</ept>1, <bpt id="p14">*</bpt>k<ept id="p14">*</ept>2).</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>A stored object defines the member function</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>bool operator<ept id="p1">**</ept>( <bpt id="p2">**</bpt>value_type&amp;<ept id="p2">**</ept><ph id="ph1">` left`</ph>, <bpt id="p3">**</bpt>value_type&amp;<ept id="p3">**</ept><ph id="ph2">` right`</ph>);</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>which returns <bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the key value of <ph id="ph1">` left`</ph> precedes and is not equal to the key value of <ph id="ph2">` right`</ph> in the sort order.</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>map::value_type</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>The type of object stored as an element in a map.</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>map&gt; Members</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>Containers</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>C++ Standard Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>