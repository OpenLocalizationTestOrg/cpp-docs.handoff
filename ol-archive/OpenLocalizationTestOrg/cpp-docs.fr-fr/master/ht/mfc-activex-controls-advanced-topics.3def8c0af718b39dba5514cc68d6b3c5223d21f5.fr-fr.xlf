<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="fr-fr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">78ae5f02d20567e9c657db3e7646d07a107bc565</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\mfc-activex-controls-advanced-topics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">35243e51840c8ed23591c30ac9018607b813d5a3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d29b536d6ad91a004930567de32a54a657ad22f6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Advanced Topics | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Advanced Topics</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article covers advanced topics related to developing ActiveX controls.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These include:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Using Database Classes in ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Implementing a Parameterized Property</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Handling Errors in Your ActiveX Control</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Handling Special Keys in the Control</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Accessing Dialog Controls That Are Invisible at Run Time</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Using Database Classes in ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Because the ActiveX control classes are part of the class library, you can apply the same procedures and rules for using database classes in a standard MFC application to developing ActiveX controls that use the MFC database classes.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For a general overview of the MFC database classes, see <bpt id="p1">[</bpt>MFC Database Classes (DAO and ODBC)<ept id="p1">](../data/mfc-database-classes-odbc-and-dao.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The article introduces both the MFC ODBC classes and the MFC DAO classes and directs you to more details on either.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As of Visual C++ .NET, the Visual C++ environment and wizards no longer support DAO (although the DAO classes are included and you can still use them).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Microsoft recommends that you use <bpt id="p1">[</bpt>OLE DB Templates<ept id="p1">](../data/oledb/ole-db-programming.md)</ept> or <bpt id="p2">[</bpt>ODBC and MFC<ept id="p2">](../data/odbc/odbc-and-mfc.md)</ept> for new projects.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You should only use DAO in maintaining existing applications.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Implementing a Parameterized Property</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A parameterized property (sometimes called a property array) is a method for exposing a homogeneous collection of values as a single property of the control.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, you can use a parameterized property to expose an array or a dictionary as a property.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In Visual Basic, such a property is accessed using array notation:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxVb#1</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use the Add Property Wizard to implement a parameterized property.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The Add Property Wizard implements the property by adding a pair of Get/Set functions that allow the control user to access the property using the above notation or in the standard fashion.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Similar to methods and properties, parameterized properties also have a limit to the number of parameters allowed.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the case of parameterized properties, the limit is 15 parameters (with one parameter reserved for storing the property value).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The following procedure adds a parameterized property, called Array, which can be accessed as a two-dimensional array of integers.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>To add a parameterized property using the Add Property Wizard</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Load your control's project.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In Class View, expand the library node of your control.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Right-click the interface node for your control (the second node of the library node) to open the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>From the shortcut menu, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and then click <bpt id="p2">**</bpt>Add Property<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Property Name<ept id="p1">**</ept> box, type <ph id="ph1">`Array`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Property Type<ept id="p1">**</ept> box, select <bpt id="p2">**</bpt>short<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>Implementation<ept id="p1">**</ept> Type, click <bpt id="p2">**</bpt>Get/Set Methods<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Get Function<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Set Function<ept id="p2">**</ept> boxes, type unique names for your Get and Set Functions or accept the default names.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Add a parameter, called <ph id="ph1">`row`</ph> (type <ph id="ph2">`short`</ph>), using the <bpt id="p1">**</bpt>Parameter Name<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Parameter Type<ept id="p2">**</ept> controls.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Add a second parameter called <ph id="ph1">`column`</ph> (type <ph id="ph2">`short`</ph>).</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Changes Made by the Add Property Wizard</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>When you add a custom property, the Add Property Wizard makes changes to the control class header (.H) and the implementation (.CPP) files.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following lines are added to the control class .H file:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#35</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This code declares two functions called <ph id="ph1">`GetArray`</ph> and <ph id="ph2">`SetArray`</ph> that allow the user to request a specific row and column when accessing the property.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In addition, the Add Property Wizard adds the following lines to the control dispatch map, located in the control class implementation (.CPP) file:</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#36</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Finally, the implementations of the <ph id="ph1">`GetArray`</ph> and <ph id="ph2">`SetArray`</ph> functions are added to the end of the .CPP file.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In most cases, you will modify the Get function to return the value of the property.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The Set function will usually contain code that should execute, either before or after the property changes.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>For this property to be useful, you could declare a two-dimensional array member variable in the control class, of type <bpt id="p1">**</bpt>short<ept id="p1">**</ept>, to store values for the parameterized property.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>You could then modify the Get function to return the value stored at the proper row and column, as indicated by the parameters, and modify the Set function to update the value referenced by the row and column parameters.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Handling Errors in Your ActiveX Control</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If error conditions occur in the control, you may need to report the error to the control container.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>There are two methods for reporting errors, depending on the situation in which the error occurs.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If the error occurs within a property's Get or Set function, or within the implementation of an OLE Automation method, the control should call <bpt id="p1">[</bpt>COleControl::ThrowError<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__throwerror)</ept>, which signals to the control user that an error has occurred.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If the error occurs at any other time, the control should call <bpt id="p1">[</bpt>COleControl::FireError<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__fireerror)</ept>, which fires a stock Error event.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>To indicate the kind of error that has occurred, the control must pass an error code to <ph id="ph1">`ThrowError`</ph> or <ph id="ph2">`FireError`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>An error code is an OLE status code, which has a 32-bit value.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>When possible, choose an error code from the standard set of codes defined in the OLECTL.H header file.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The following table summarizes these codes.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>ActiveX Control Error Codes</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Error</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>CTL_E_ILLEGALFUNCTIONCALL</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Illegal function call</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CTL_E_OVERFLOW</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Overflow</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CTL_E_OUTOFMEMORY</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Out of memory</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CTL_E_DIVISIONBYZERO</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Division by zero</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CTL_E_OUTOFSTRINGSPACE</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Out of string space</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>CTL_E_OUTOFSTACKSPACE</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Out of stack space</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>CTL_E_BADFILENAMEORNUMBER</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Bad file name or number</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>CTL_E_FILENOTFOUND</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>File not found</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CTL_E_BADFILEMODE</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Bad file mode</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>CTL_E_FILEALREADYOPEN</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>File already open</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>CTL_E_DEVICEIOERROR</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Device I/O error</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>CTL_E_FILEALREADYEXISTS</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>File already exists</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>CTL_E_BADRECORDLENGTH</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Bad record length</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>CTL_E_DISKFULL</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Disk full</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>CTL_E_BADRECORDNUMBER</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Bad record number</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>CTL_E_BADFILENAME</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Bad file name</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>CTL_E_TOOMANYFILES</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Too many files</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>CTL_E_DEVICEUNAVAILABLE</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Device unavailable</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>CTL_E_PERMISSIONDENIED</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Permission denied</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>CTL_E_DISKNOTREADY</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Disk not ready</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>CTL_E_PATHFILEACCESSERROR</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Path/file access error</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>CTL_E_PATHNOTFOUND</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Path not found</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>CTL_E_INVALIDPATTERNSTRING</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Invalid pattern string</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>CTL_E_INVALIDUSEOFNULL</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Invalid use of NULL</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>CTL_E_INVALIDFILEFORMAT</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Invalid file format</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>CTL_E_INVALIDPROPERTYVALUE</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Invalid property value</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>CTL_E_INVALIDPROPERTYARRAYINDEX</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Invalid property array index</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>CTL_E_SETNOTSUPPORTEDATRUNTIME</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Set not supported at run time</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>CTL_E_SETNOTSUPPORTED</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Set not supported (read-only property)</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>CTL_E_NEEDPROPERTYARRAYINDEX</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Need property array index</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>CTL_E_SETNOTPERMITTED</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Set not permitted</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>CTL_E_GETNOTSUPPORTEDATRUNTIME</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Get not supported at run time</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>CTL_E_GETNOTSUPPORTED</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Get not supported (write-only property)</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>CTL_E_PROPERTYNOTFOUND</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Property not found</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>CTL_E_INVALIDCLIPBOARDFORMAT</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Invalid clipboard format</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>CTL_E_INVALIDPICTURE</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Invalid picture</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>CTL_E_PRINTERERROR</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Printer error</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>CTL_E_CANTSAVEFILETOTEMP</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Can't save file to TEMP</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>CTL_E_SEARCHTEXTNOTFOUND</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Search text not found</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>CTL_E_REPLACEMENTSTOOLONG</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Replacements too long</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If necessary, use the <bpt id="p1">**</bpt>CUSTOM_CTL_SCODE<ept id="p1">**</ept> macro to define a custom error code for a condition that is not covered by one of the standard codes.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The parameter for this macro should be an integer between 1000 and 32767, inclusive.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#37</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If you are creating an ActiveX control to replace an existing VBX control, define your ActiveX control error codes with the same numeric values the VBX control uses to ensure that the error codes are compatible.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Handling Special Keys in the Control</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>In some cases you may want to handle certain keystroke combinations in a special way; for example, insert a new line when the ENTER key is pressed in a multiline text box control or move between a group of edit controls when a directional key ID pressed.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If the base class of your ActiveX control is <ph id="ph1">`COleControl`</ph>, you can override <bpt id="p1">[</bpt>CWnd::PreTranslateMessage<ept id="p1">](../mfc/reference/cwnd-class.md#cwnd__pretranslatemessage)</ept> to handle messages before the container processes them.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>When using this technique, always return <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if you handle the message in your override of <ph id="ph1">`PreTranslateMessage`</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates a possible way of handling any messages related to the directional keys.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#38</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>For more information on handling keyboard interfaces for an ActiveX control, see the ActiveX SDK documentation.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Accessing Dialog Controls that Are Invisible at Run Time</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>You can create dialog controls that have no user interface and are invisible at run time.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>If you add an invisible at run time ActiveX control to a dialog box and use <bpt id="p1">[</bpt>CWnd::GetDlgItem<ept id="p1">](../mfc/reference/cwnd-class.md#cwnd__getdlgitem)</ept> to access the control, the control will not work correctly.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Instead, you should use one of the following techniques to obtain an object that represents the control:</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Using the Add Member Variable Wizard, select <bpt id="p1">**</bpt>Control Variable<ept id="p1">**</ept> and then select the control's ID.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Enter a member variable name and select the control's wrapper class as the <bpt id="p1">**</bpt>Control Type<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Declare a local variable and subclass as the dialog item.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Insert code that resembles the following (<ph id="ph1">`CMyCtrl`</ph> is the wrapper class, <ph id="ph2">`IDC_MYCTRL1`</ph> is the control's ID):</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxCont#19</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>