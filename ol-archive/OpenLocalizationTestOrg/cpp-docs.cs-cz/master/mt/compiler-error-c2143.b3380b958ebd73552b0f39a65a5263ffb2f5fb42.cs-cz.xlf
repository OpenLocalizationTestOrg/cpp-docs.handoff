<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-bf14093" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7dba4d513253535296e629fd5e7385e9d9b697b6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\compiler-errors-1\compiler-error-c2143.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e9f69732d5900d06f381a05ce9eb6db79dad9bb9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2ebd8f8a29ce782e0b5c6b3971877473485b4ba6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compiler Error C2143 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiler Error C2143</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>syntax error : missing 'token1' before 'token2'</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The compiler expected a specific token (that is, a language element other than white space) and found another token instead.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For information about this error when it occurs when you are using a function-try block, see <bpt id="p1">[</bpt>Knowledge Base article 241706<ept id="p1">](http://support.microsoft.com/kb/241706)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Check the <bpt id="p1">[</bpt>C++ Language Reference<ept id="p1">](../../cpp/cpp-language-reference.md)</ept> to determine where code is syntactically incorrect.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Because the compiler may report this error after it encounters the line that causes the problem, check several lines of code that precede the error.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>C2143 can occur in different situations.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>It can occur when an operator that can qualify a name (<ph id="ph1">`::`</ph>, <ph id="ph2">`-&gt;`</ph>, and <ph id="ph3">`.`</ph>) must be followed by the keyword <ph id="ph4">`template`</ph>, as in this example:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>By default, C++ assumes that <ph id="ph1">`Ty::PutFuncType`</ph> isn't a template; therefore, the following <ph id="ph2">`&lt;`</ph> is interpreted as a less-than sign.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You must tell the compiler explicitly that <ph id="ph1">`PutFuncType`</ph> is a template so that it can correctly parse the angle bracket.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>To correct this error, use the <ph id="ph1">`template`</ph> keyword on the dependent type's name, as shown here:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>C2143 can occur when <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> is used and a <ph id="ph1">`using`</ph> directive has a syntax error:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>It can also occur when you are trying to compile a source code file by using CLR syntax without also using <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The first non-whitespace character that follows an <ph id="ph1">`if`</ph> statement must be a left parenthesis.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The compiler cannot translate anything else:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>C2143 can occur when a closing brace, parenthesis, or semicolon is missing on the line where the error is detected or on one of the lines just above:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Or when there's an invalid tag in a class declaration:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Or when a label is not attached to a statement.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you must place a label by itself, for example, at the end of a compound statement, attach it to a null statement:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The error can occur when an unqualified call is made to a type in the Standard C++ Library:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Or there is a missing <ph id="ph1">`typename`</ph> keyword:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Or if you try to define an explicit instantiation:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>In a C program, variables must be declared at the beginning of the function, and they cannot be declared after the function executes non-declaration instructions.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>