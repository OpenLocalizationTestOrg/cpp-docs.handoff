<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">951483c6382a494068c4439d527ce98293492927</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\recommendations-for-handling-input-output.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c4091a61e81e1d2be34a4c3051784718a53ac46</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7282c604fa3930e3a104940559b42d1e1b2b0f36</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Recommendations for Handling Input-Output | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Recommendations for Handling Input/Output</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Whether you use file-based I/O or not depends on how you respond to the questions in the following decision tree:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Does the primary data in your application reside in a disk file</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Yes, the primary data resides in a disk file:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Does the application read the whole file into memory on File Open and write the whole file back to disk on File Save</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Yes: This is the default MFC document case.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> serialization.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>No: This is typically the case of transaction-based updating of the file.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You update the file on a per-transaction basis and don't need <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> serialization.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>No, the primary data doesn't reside in a disk file:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Does the data reside in an ODBC data source</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Yes, the data resides in an ODBC data source:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Use MFC's database support.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The standard MFC implementation for this case includes a <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> object that stores a <ph id="ph1">`CDatabase`</ph> object, as discussed in the article <bpt id="p2">[</bpt>What Is the MFC Database Programming Model<ept id="p2">](../data/what-is-the-mfc-database-programming-model-q.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The application might also read and write an auxiliary file â€” the purpose of the application wizard "both a database view and file support" option.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In this case, you'd use serialization for the auxiliary file.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>No, the data doesn't reside in an ODBC data source.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Examples of this case: the data resides in a non-ODBC DBMS; the data is read via some other mechanism, such as OLE or DDE.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In such cases, you won't use serialization, and your application won't have Open and Save menu items.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You might still want to use a <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> as a home base, just as an MFC ODBC application uses the document to store <ph id="ph1">`CRecordset`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>But you won't use the framework's default File Open/Save document serialization.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To support the Open, Save, and Save As commands on the File menu, the framework provides document serialization.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Serialization reads and writes data, including objects derived from class <ph id="ph1">`CObject`</ph>, to permanent storage, normally a disk file.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Serialization is easy to use and serves many of your needs, but it may be inappropriate in many data-access applications.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Data-access applications typically update data on a per-transaction basis.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>They update the records affected by the transaction rather than reading and writing a whole data file at once.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For information about serialization, see <bpt id="p1">[</bpt>Serialization<ept id="p1">](../mfc/serialization-in-mfc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Serialization: Serialization vs. Database Input/Output</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>