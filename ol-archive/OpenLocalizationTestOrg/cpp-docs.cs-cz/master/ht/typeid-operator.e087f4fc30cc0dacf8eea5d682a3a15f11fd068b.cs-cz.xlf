<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e43d05fd592d15ccb6f90a9cc1792a04a5b63130</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\typeid-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3852adea8f767beeefa68f2da2ea03cf274f3ba2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1642094632d09e320c81de11fa4ce2b111b131b2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>typeid Operator | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>typeid Operator</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`typeid`</ph> operator allows the type of an object to be determined at run time.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The result of <ph id="ph1">`typeid`</ph> is a <bpt id="p1">**</bpt>const type_info&amp;<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The value is a reference to a <bpt id="p1">**</bpt>type_info<ept id="p1">**</ept> object that represents either the <bpt id="p2">*</bpt>type-id<ept id="p2">*</ept> or the type of the <bpt id="p3">*</bpt>expression<ept id="p3">*</ept>, depending on which form of <ph id="ph1">`typeid`</ph> is used.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>type_info Class<ept id="p1">](../cpp/type-info-class.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`typeid`</ph> operator  does not work with managed types (abstract declarators or instances), see <bpt id="p1">[</bpt>typeid<ept id="p1">](../windows/typeid-cpp-component-extensions.md)</ept> for information on getting the &lt;xref:System.Type&gt; of a specified type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`typeid`</ph> operator does a run-time check when applied to an l-value of a polymorphic class type, where the true type of the object cannot be determined by the static information provided.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Such cases are:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A reference to a class</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A pointer, dereferenced with *</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A subscripted pointer (i.e. [ ]).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>(Note that it is generally not safe to use a subscript with a pointer to a polymorphic type.)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> points to a base class type, yet the object is actually of a type derived from that base class, a <bpt id="p2">**</bpt>type_info<ept id="p2">**</ept> reference for the derived class is the result.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> must point to a polymorphic type (a class with virtual functions).</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Otherwise, the result is the <bpt id="p1">**</bpt>type_info<ept id="p1">**</ept> for the static class referred to in the <bpt id="p2">*</bpt>expression<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Further, the pointer must be dereferenced so that the object it points to is used.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Without dereferencing the pointer, the result will be the <bpt id="p1">**</bpt>type_info<ept id="p1">**</ept> for the pointer, not what it points to.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> is dereferencing a pointer, and that pointer's value is zero, <bpt id="p2">**</bpt>typeid<ept id="p2">**</ept> throws a <bpt id="p3">[</bpt>bad_typeid exception<ept id="p3">](../cpp/bad-typeid-exception.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the pointer does not point to a valid object, a <ph id="ph1">`__non_rtti_object`</ph> exception is thrown, indicating an attempt to analyze the RTTI that triggered a fault (like access violation), because the object is somehow invalid (bad pointer or the code wasn't compiled with <bpt id="p1">[</bpt>/GR<ept id="p1">](../build/reference/gr-enable-run-time-type-information.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If the <bpt id="p1">*</bpt>expression<ept id="p1">*</ept> is neither a pointer nor a reference to a base class of the object, the result is a <bpt id="p2">**</bpt>type_info<ept id="p2">**</ept> reference representing the static type of the <bpt id="p3">*</bpt>expression<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>static type<ept id="p1">*</ept> of an expression refers to the type of an expression as it is known at compile time.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Execution semantics are ignored when evaluating the static type of an expression.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Furthermore, references are ignored when possible when determining the static type of an expression:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>typeid<ept id="p1">**</ept> can also be used in templates to determine the type of a template parameter:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Run-Time Type Information</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>