<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b11389c8273d814d24997543f3b9013cfcedd6b5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\declaration-of-a-managed-class-type.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d7706434687ce1ce9e95b13cd1e59439e1d9126f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f454b88a1cd31305ce8297302b06c4fca14c3a4a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Declaration of a Managed Class Type | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Declaration of a Managed Class Type</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The way to declare a reference class type changed from Managed Extensions for C++ to <ph id="ph1">[!INCLUDE[cpp_current_long](../dotnet/includes/cpp_current_long_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In Managed Extensions, a reference class type is prefaced with the <ph id="ph1">`__gc`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>In the new syntax, the <ph id="ph1">`__gc`</ph> keyword is replaced by one of two spaced keywords: <ph id="ph2">`ref class`</ph> or <ph id="ph3">`ref struct`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The choice of <ph id="ph1">`struct`</ph> or <ph id="ph2">`class`</ph> indicates the public (for <ph id="ph3">`struct`</ph>) or private (for <ph id="ph4">`class`</ph>) default access level of its members declared in an initial unlabeled section of the body of the type.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Similarly, in Managed Extensions, a value class type is prefaced with the <ph id="ph1">`__value`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>In the new syntax, the <ph id="ph1">`__value`</ph> keyword is replaced by one of two spaced keywords: <ph id="ph2">`value class`</ph> or <ph id="ph3">`value struct`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An interface type, in Managed Extensions, was indicated with the keyword <ph id="ph1">`__interface`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the new syntax, this is replaced with <ph id="ph1">`interface class`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For example, the following class declarations in Managed Extensions:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Under the new syntax these are equivalently declared as follows:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Specifying the Class as Abstract</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Under Managed Extensions, you put the keyword <ph id="ph1">`__abstract`</ph> before the <ph id="ph2">`class`</ph> keyword (either before or after the <ph id="ph3">`__gc`</ph>) to indicate that the class is incomplete and that objects of the class cannot be created within the program:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Under the new syntax, you specify the <ph id="ph1">`abstract`</ph> contextual keyword following the class name and before either the class body, base class derivation list, or semicolon.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Of course, the semantic meaning is unchanged.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Specifying the Class as Sealed</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Under Managed Extensions, you put the keyword <ph id="ph1">`__sealed`</ph> before the <ph id="ph2">`class`</ph> keyword (either before or after <ph id="ph3">`__gc`</ph>) to indicate that objects of the class cannot be inherited from:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Under the new syntax, you specify the <ph id="ph1">`sealed`</ph> contextual keyword following the class name and before either the class body, base class derivation list, or semicolon.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can both derive a class and seal it.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`String`</ph> class is implicitly derived from <ph id="ph2">`Object`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The benefit of sealing a class is that it supports the static resolution (that is, at compile-time) of all virtual function calls through the sealed reference class object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This is because the <ph id="ph1">`sealed`</ph> specifier guarantees that the <ph id="ph2">`String`</ph> tracking handle cannot refer to a subsequently derived class that might provide an overriding instance of the virtual method being invoked.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Here is an example of a sealed class in new syntax:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>One can also specify a class as both abstract and sealed â€“ this is a special condition that indicates a static class.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>This is described in the CLR documentation as follows:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>"A type that is both <ph id="ph1">`abstract`</ph> and <ph id="ph2">`sealed`</ph> should have only static members, and serves as what some languages call a namespace."</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For example, here is a declaration of an abstract sealed class using the Managed Extensions syntax:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>and here is this declaration translated into the new syntax:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CLR Inheritance: Specifying the Base Class</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Under the CLR object model, only public single inheritance is supported.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, Managed Extensions retained the ISO-C++ default interpretation of a base class without an access keyword as specifying a private derivation.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This meant that each CLR inheritance declaration had to provide the <ph id="ph1">`public`</ph> keyword to override the default interpretation.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In the new syntax definition, the absence of an access keyword indicates a public derivation in a CLR inheritance definition.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Thus, the <ph id="ph1">`public`</ph> access keyword is now optional.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>While this does not require any modification of Managed Extensions for C++ code, I list this change here for completeness.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Managed Types (C++/CL)</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Classes and Structs</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>abstract</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>sealed</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>