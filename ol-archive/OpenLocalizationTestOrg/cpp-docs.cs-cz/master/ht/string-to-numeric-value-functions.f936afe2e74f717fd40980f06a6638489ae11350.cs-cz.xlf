<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4902abfbaafec3e24d9952d3f39060f5b9e8c17f</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\string-to-numeric-value-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">da7f9b216bd48af6528e4d777a31068f13726e7a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0fbc66c535cb13beb7a0419f8d96044fb3819a98</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>String to Numeric Value Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>String to Numeric Value Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>strtod, _strtod_l, wcstod, _wcstod_l</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>strtol, wcstol, _strtol_l, _wcstol_l</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>strtoul, _strtoul_l, wcstoul, _wcstoul_l</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>_strtoi64, _wcstoi64, _strtoi64_l, _wcstoi64_l</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>_strtoui64, _wcstoui64, _strtoui64_l, _wcstoui64_l</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Each function in the <bpt id="p1">**</bpt>strtod<ept id="p1">**</ept> family converts a null-terminated string to a numeric value.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The available functions are listed in the following table.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Convert string to double-precision floating point value</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Convert string to long integer</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Convert string to unsigned long integer</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Convert string to 64-bit <ph id="ph1">`__int64`</ph> integer</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Convert string to unsigned 64-bit <ph id="ph1">`__int64`</ph> integer</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`wcstol`</ph>, <ph id="ph2">`wcstoul`</ph>, and <ph id="ph3">`_wcstoi64`</ph> are wide-character versions of <ph id="ph4">`strtod`</ph>, <ph id="ph5">`strtol`</ph>, <ph id="ph6">`strtoul`</ph>, and <ph id="ph7">`_strtoi64`</ph>, respectively.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The string argument to each of these wide-character functions is a wide-character string; each function behaves identically to its single-byte–character counterpart otherwise.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`strtod`</ph> function takes two arguments: the first is the input string, and the second a pointer to the character which ends the conversion process.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`strtoul`</ph>, <bpt id="p1">**</bpt>_strtoi64<ept id="p1">**</ept> and <bpt id="p2">**</bpt>_strtoui64<ept id="p2">**</ept> take a third argument as the number base to use in the conversion process.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The input string is a sequence of characters that can be interpreted as a numerical value of the specified type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Each function stops reading the string at the first character it cannot recognize as part of a number.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This may be the terminating null character.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For <ph id="ph1">`strtol`</ph>, <ph id="ph2">`strtoul`</ph>, <ph id="ph3">`_strtoi64`</ph>, and <ph id="ph4">`_strtoui64`</ph>, this terminating character can also be the first numeric character greater than or equal to the user-supplied number base.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If the user-supplied pointer to an end-of-conversion character is not set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> at call time, a pointer to the character that stopped the scan will be stored there instead.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If no conversion can be performed (no valid digits were found or an invalid base was specified), the value of the string pointer is stored at that address.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>expects a string of the following form:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">*</bpt>whitespace<ept id="p1">*</ept>] [<bpt id="p2">*</bpt>sign<ept id="p2">*</ept>] [<ph id="ph1">`digits`</ph>] [<bpt id="p3">**</bpt>.<ept id="p3">**</ept><ph id="ph2">`digits`</ph>] [ {<bpt id="p4">**</bpt>d<ept id="p4">**</ept> &amp;#124; <bpt id="p5">**</bpt>D<ept id="p5">**</ept> &amp;#124; <bpt id="p6">**</bpt>e<ept id="p6">**</ept> &amp;#124; <bpt id="p7">**</bpt>E<ept id="p7">**</ept>}[<bpt id="p8">*</bpt>sign<ept id="p8">*</ept>]<ph id="ph3">`digits`</ph>]</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>whitespace<ept id="p1">*</ept> may consist of space or tab characters, which are ignored; <bpt id="p2">*</bpt>sign<ept id="p2">*</ept> is either plus (<bpt id="p3">**</bpt><ph id="ph1">+</ph><ept id="p3">**</ept>) or minus (<bpt id="p4">**</bpt>–<ept id="p4">**</ept>); and <ph id="ph2">`digits`</ph> are one or more decimal digits.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If no digits appear before the radix character, at least one must appear after the radix character.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The decimal digits can be followed by an exponent, which consists of an introductory letter (<bpt id="p1">**</bpt>d<ept id="p1">**</ept>, <bpt id="p2">**</bpt>D<ept id="p2">**</ept>, <bpt id="p3">**</bpt>e<ept id="p3">**</ept>, or <bpt id="p4">**</bpt>E<ept id="p4">**</ept>) and an optionally signed integer.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If neither an exponent part nor a radix character appears, a radix character is assumed to follow the last digit in the string.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The first character that does not fit this form stops the scan.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`strtol`</ph>, <ph id="ph2">`strtoul`</ph>, <ph id="ph3">`_strtoi64`</ph>, and <ph id="ph4">`_strtoui64`</ph> functions expect a string of the following form:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">*</bpt>whitespace<ept id="p1">*</ept>] [{<bpt id="p2">**</bpt><ph id="ph1">+</ph><ept id="p2">**</ept> &amp;#124; <bpt id="p3">**</bpt>–<ept id="p3">**</ept>}] [<bpt id="p4">**</bpt>0<ept id="p4">**</ept> [{ <bpt id="p5">**</bpt>x<ept id="p5">**</ept> &amp;#124; <bpt id="p6">**</bpt>X<ept id="p6">**</ept> }]] [<ph id="ph2">`digits`</ph>]</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the base argument is between 2 and 36, then it is used as the base of the number.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If it is 0, the initial characters referenced to by the end-of-conversion pointer are used to determine the base.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the first character is 0 and the second character is not 'x' or 'X', the string is interpreted as an octal integer; otherwise, it is interpreted as a decimal number.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the first character is '0' and the second character is 'x' or 'X', the string is interpreted as a hexadecimal integer.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If the first character is '1' through '9', the string is interpreted as a decimal integer.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The letters 'a' through 'z' (or 'A' through 'Z') are assigned the values 10 through 35; only letters whose assigned values are less than <bpt id="p1">*</bpt>base<ept id="p1">*</ept> are permitted.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_strtoui64`</ph> allow a plus (<bpt id="p1">**</bpt><ph id="ph2">+</ph><ept id="p1">**</ept>) or minus (<bpt id="p2">**</bpt>–<ept id="p2">**</ept>) sign prefix; a leading minus sign indicates that the return value is negated.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The output value is affected by the setting of the <ph id="ph1">`LC_NUMERIC`</ph> category setting of the locale; see <bpt id="p1">[</bpt>setlocale<ept id="p1">](../c-runtime-library/reference/setlocale-wsetlocale.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The versions of these functions without the <bpt id="p1">**</bpt>_l<ept id="p1">**</ept> suffix use the current locale for this locale-dependent behavior; the versions with the <bpt id="p2">**</bpt>_l<ept id="p2">**</ept> suffix are identical except that they use the locale parameter passed in instead.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When the value returned by these functions would cause an overflow or underflow, or when conversion is not possible, special case values are returned as shown:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Condition</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Value returned</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Overflow</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Underflow or no conversion</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>+ Overflow</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>LONG_MAX</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>- Overflow</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>LONG_MIN</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Underflow or no conversion</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>+ Overflow</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>_I64_MAX</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>- Overflow</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>_I64_MIN</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>No conversion</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Overflow</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>_UI64_MAX</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>No conversion</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>0</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_I64_MAX<ept id="p1">**</ept>, _<bpt id="p2">**</bpt>I64_MIN<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>_UI64_MAX<ept id="p3">**</ept> are defined in LIMITS.H.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`wcstol`</ph>, <ph id="ph2">`wcstoul`</ph>, <ph id="ph3">`_wcstoi64`</ph>, and <ph id="ph4">`_wcstoui64`</ph> are wide-character versions of <ph id="ph5">`strtod`</ph>, <ph id="ph6">`strtol`</ph>, <ph id="ph7">`strtoul`</ph>, <ph id="ph8">`_strtoi64`</ph>, and <ph id="ph9">`_strtoui64`</ph>, respectively; the pointer to an end-of-conversion argument to each of these wide-character functions is a wide-character string.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Otherwise, each of these wide-character functions behaves identically to its single-byte–character counterpart.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Data Conversion</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Locale</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Interpretation of Multibyte-Character Sequences</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Floating-Point Support</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>atof, _atof_l, _wtof, _wtof_l</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>