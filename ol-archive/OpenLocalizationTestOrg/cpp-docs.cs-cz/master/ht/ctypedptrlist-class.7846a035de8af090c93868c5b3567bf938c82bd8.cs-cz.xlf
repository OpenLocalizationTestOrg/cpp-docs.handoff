<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">883eb26fac9c93febce3f438cabad82d15d5c00b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\ctypedptrlist-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4091f4f9554319cdb55d8f6c14f37e26f565f9a6</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0dfec13c126924f7fb0fe4abe3ef58d5ba50de4a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CTypedPtrList Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CTypedPtrList Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Provides a type-safe "wrapper" for objects of class <ph id="ph1">`CPtrList`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Base class of the typed pointer list class; must be a pointer list class ( <ph id="ph1">`CObList`</ph> or <ph id="ph2">`CPtrList`</ph>).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Type of the elements stored in the base-class list.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::AddHead</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Adds an element (or all the elements in another list) to the head of the list (makes a new head).</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::AddTail</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds an element (or all the elements in another list) to the tail of the list (makes a new tail).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::GetAt</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets the element at a given position.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::GetHead</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Returns the head element of the list (cannot be empty).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::GetNext</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets the next element for iterating.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::GetPrev</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets the previous element for iterating.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::GetTail</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Returns the tail element of the list (cannot be empty).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::RemoveHead</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Removes the element from the head of the list.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::RemoveTail</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Removes the element from the tail of the list.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::SetAt</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Sets the element at a given position.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When you use <ph id="ph1">`CTypedPtrList`</ph> rather than <ph id="ph2">`CObList`</ph> or <ph id="ph3">`CPtrList`</ph>, the C++ type-checking facility helps eliminate errors caused by mismatched pointer types.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In addition, the <ph id="ph1">`CTypedPtrList`</ph> wrapper performs much of the casting that would be required if you used <ph id="ph2">`CObList`</ph> or <ph id="ph3">`CPtrList`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because all <ph id="ph1">`CTypedPtrList`</ph> functions are inline, use of this template does not significantly affect the size or speed of your code.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Lists derived from <ph id="ph1">`CObList`</ph> can be serialized, but those derived from <ph id="ph2">`CPtrList`</ph> cannot.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`CTypedPtrList`</ph> object is deleted, or when its elements are removed, only the pointers are removed, not the entities they reference.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information on using <ph id="ph1">`CTypedPtrList`</ph>, see the articles <bpt id="p1">[</bpt>Collections<ept id="p1">](../../mfc/collections.md)</ept> and <bpt id="p2">[</bpt>Template-Based Classes<ept id="p2">](../../mfc/template-based-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This example creates an instance of <ph id="ph1">`CTypedPtrList`</ph>, adds one object, serializes the list to disk, and then deletes the object:</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#110</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>NVC_MFCCollections#111</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxtempl.h</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::AddHead</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This member function calls <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::AddHead<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Type of the elements stored in the base-class list.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The object pointer to be added to this list.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> value is allowed.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Base class of the typed pointer list class; must be a pointer list class ( <bpt id="p1">[</bpt>CObList<ept id="p1">](../../mfc/reference/coblist-class.md)</ept> or <bpt id="p2">[</bpt>CPtrList<ept id="p2">](../../mfc/reference/cptrlist-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A pointer to another <bpt id="p1">[</bpt>CTypedPtrList<ept id="p1">](../../mfc/reference/ctypedptrlist-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The elements in <ph id="ph1">`pNewList`</ph> will be added to this list.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The first version returns the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value of the newly inserted element.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The first version adds a new element before the head of the list.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The second version adds another list of elements before the head.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::AddTail</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This member function calls <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::AddTail<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Type of the elements stored in the base-class list.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The object pointer to be added to this list.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> value is allowed.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Base class of the typed pointer list class; must be a pointer list class ( <bpt id="p1">[</bpt>CObList<ept id="p1">](../../mfc/reference/coblist-class.md)</ept> or <bpt id="p2">[</bpt>CPtrList<ept id="p2">](../../mfc/reference/cptrlist-class.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A pointer to another <bpt id="p1">[</bpt>CTypedPtrList<ept id="p1">](../../mfc/reference/ctypedptrlist-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The elements in <ph id="ph1">`pNewList`</ph> will be added to this list.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The first version returns the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value of the newly inserted element.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The first version adds a new element after the tail of the list.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The second version adds another list of elements after the tail of the list.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::GetAt</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A variable of type <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> is a key for the list.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements stored in the list.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>position</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous <ph id="ph1">`GetHeadPosition`</ph> or <bpt id="p2">**</bpt>Find<ept id="p2">**</ept> member function call.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If the list is accessed through a pointer to a <bpt id="p1">**</bpt>const CTypedPtrList<ept id="p1">**</ept>, then <ph id="ph1">`GetAt`</ph> returns a pointer of the type specified by the template parameter <bpt id="p2">*</bpt>TYPE<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>This allows the function to be used only on the right side of an assignment statement and thus protects the list from modification.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>If the list is accessed directly or through a pointer to a <ph id="ph1">`CTypedPtrList`</ph>, then <ph id="ph2">`GetAt`</ph> returns a reference to a pointer of the type specified by the template parameter <bpt id="p1">*</bpt>TYPE<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>It is not the same as an index, and you cannot operate on a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value yourself.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>retrieves the <ph id="ph1">`CObject`</ph> pointer associated with a given position.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>This inline function calls <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::GetAt<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::GetHead</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Gets the pointer that represents the head element of this list.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements stored in the list.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>If the list is accessed through a pointer to a <bpt id="p1">**</bpt>const CTypedPtrList<ept id="p1">**</ept>, then <ph id="ph1">`GetHead`</ph> returns a pointer of the type specified by the template parameter <bpt id="p2">*</bpt>TYPE<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>This allows the function to be used only on the right side of an assignment statement and thus protects the list from modification.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>If the list is accessed directly or through a pointer to a <ph id="ph1">`CTypedPtrList`</ph>, then <ph id="ph2">`GetHead`</ph> returns a reference to a pointer of the type specified by the template parameter <bpt id="p1">*</bpt>TYPE<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You must ensure that the list is not empty before calling <ph id="ph1">`GetHead`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>IsEmpty<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__isempty)</ept> to verify that the list contains elements.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::GetNext</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Gets the list element identified by <ph id="ph1">`rPosition`</ph>, then sets <ph id="ph2">`rPosition`</ph> to the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value of the next entry in the list.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements contained in this list.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous <ph id="ph1">`GetNext`</ph>, <ph id="ph2">`GetHeadPosition`</ph>, or other member function call.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If the list is accessed through a pointer to a <bpt id="p1">**</bpt>const CTypedPtrList<ept id="p1">**</ept>, then <ph id="ph1">`GetNext`</ph> returns a pointer of the type specified by the template parameter <bpt id="p2">*</bpt>TYPE<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>This allows the function to be used only on the right side of an assignment statement and thus protects the list from modification.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If the list is accessed directly or through a pointer to a <ph id="ph1">`CTypedPtrList`</ph>, then <ph id="ph2">`GetNext`</ph> returns a reference to a pointer of the type specified by the template parameter <bpt id="p1">*</bpt>TYPE<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`GetNext`</ph> in a forward iteration loop if you establish the initial position with a call to <ph id="ph2">`GetHeadPosition`</ph> or <bpt id="p1">[</bpt>CPtrList::Find<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__find)</ept>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If the retrieved element is the last in the list, then the new value of <ph id="ph1">`rPosition`</ph> is set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>It is possible to remove an element during an iteration.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CObList::RemoveAt<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__removeat)</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::GetPrev</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Gets the list element identified by <ph id="ph1">`rPosition`</ph>, then sets <ph id="ph2">`rPosition`</ph> to the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value of the previous entry in the list.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements contained in this list.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value returned by a previous <ph id="ph1">`GetPrev`</ph> or other member function call.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If the list is accessed through a pointer to a <bpt id="p1">**</bpt>const CTypedPtrList<ept id="p1">**</ept>, then <ph id="ph1">`GetPrev`</ph> returns a pointer of the type specified by the template parameter <bpt id="p2">*</bpt>TYPE<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>This allows the function to be used only on the right side of an assignment statement and thus protects the list from modification.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>If the list is accessed directly or through a pointer to a <ph id="ph1">`CTypedPtrList`</ph>, then <ph id="ph2">`GetPrev`</ph> returns a reference to a pointer of the type specified by the template parameter <bpt id="p1">*</bpt>TYPE<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>You can use <ph id="ph1">`GetPrev`</ph> in a reverse iteration loop if you establish the initial position with a call to <ph id="ph2">`GetTailPosition`</ph> or <bpt id="p1">**</bpt>Find<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If the retrieved element is the first in the list, then the new value of <ph id="ph1">`rPosition`</ph> is set to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::GetTail</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Gets the pointer that represents the head element of this list.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements stored in the list.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>If the list is accessed through a pointer to a <bpt id="p1">**</bpt>const CTypedPtrList<ept id="p1">**</ept>, then <ph id="ph1">`GetTail`</ph> returns a pointer of the type specified by the template parameter <bpt id="p2">*</bpt>TYPE<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>This allows the function to be used only on the right side of an assignment statement and thus protects the list from modification.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>If the list is accessed directly or through a pointer to a <ph id="ph1">`CTypedPtrList`</ph>, then <ph id="ph2">`GetTail`</ph> returns a reference to a pointer of the type specified by the template parameter <bpt id="p1">*</bpt>TYPE<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>This allows the function to be used on either side of an assignment statement and thus allows the list entries to be modified.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>You must ensure that the list is not empty before calling <ph id="ph1">`GetTail`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>IsEmpty<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__isempty)</ept> to verify that the list contains elements.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::RemoveHead</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Removes the element from the head of the list and returns it.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements stored in the list.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The pointer previously at the head of the list.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>This pointer is of the type specified by the template parameter <bpt id="p1">*</bpt>TYPE<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>You must ensure that the list is not empty before calling <ph id="ph1">`RemoveHead`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>IsEmpty<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__isempty)</ept> to verify that the list contains elements.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::RemoveTail</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Removes the element from the tail of the list and returns it.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Template parameter specifying the type of elements stored in the list.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The pointer previously at the tail of the list.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>This pointer is of the type specified by the template parameter <bpt id="p1">*</bpt>TYPE<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>You must ensure that the list is not empty before calling <ph id="ph1">`RemoveTail`</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>If the list is empty, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>IsEmpty<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__isempty)</ept> to verify that the list contains elements.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>CTypedPtrList::SetAt</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>This member function calls <ph id="ph1">`BASE_CLASS`</ph><bpt id="p1">**</bpt>::SetAt<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> of the element to be set.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>TYPE</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Type of the elements stored in the base-class list.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The object pointer to be written to the list.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>A variable of type <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> is a key for the list.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>It is not the same as an index, and you cannot operate on a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value yourself.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>writes the object pointer to the specified position in the list.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>You must ensure that your <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value represents a valid position in the list.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>If it is invalid, then the Debug version of the Microsoft Foundation Class Library asserts.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>For more detailed remarks, see <bpt id="p1">[</bpt>CObList::SetAt<ept id="p1">](../../mfc/reference/coblist-class.md#coblist__setat)</ept>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>MFC Sample COLLECT</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>CPtrList Class</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>CObList Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>