<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">13a340127275025a23ef684cc0d6b25f69dec008</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\mutual-imports.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">68175988e737686d9890d4c370a40e09ce0b6826</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3465c6f8a38f8da51c2636826a7abb4b2a87d68c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Mutual Imports | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Mutual Imports</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Exporting or importing to another executable file presents complications when the imports are mutual (or circular).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>For example, two DLLs import symbols from each other, similar to mutually recursive functions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The problem with mutually importing executable files (usually DLLs) is that neither can be built without building the other first.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each build process requires, as input, an import library produced by the other build process.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The solution is to use the LIB utility with the /DEF option, which produces an import library without building the executable file.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Using this utility, you can build all the import libraries you need, no matter how many DLLs are involved or how complicated the dependencies are.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The general solution for handling mutual imports is:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Take each DLL in turn.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>(Any order is feasible, although some orders are more optimal.) If all the needed import libraries exist and are current, run LINK to build the executable file (DLL).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This produces an import library.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Otherwise, run LIB to produce an import library.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Running LIB with the /DEF option produces an additional file with an .EXP extension.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The .EXP file must be used later to build the executable file.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>After using either LINK or LIB to build all of the import libraries, go back and run LINK to build any executable files that were not built in the previous step.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Note that the corresponding .exp file must be specified on the LINK line.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If you had run the LIB utility earlier to produce an import library for DLL1, LIB would have produced the file DLL1.exp as well.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You must use DLL1.exp as input to LINK when building DLL1.dlll.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following illustration shows a solution for two mutually importing DLLs, DLL1 and DLL2.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Step 1 is to run LIB, with the /DEF option set, on DLL1.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Step 1 produces DLL1.lib, an import library, and DLL1.exp.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In step 2, the import library is used to build DLL2, which in turn produces an import library for DLL2's symbols.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Step 3 builds DLL1, by using DLL1.exp and DLL2.lib as input.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Note that an .exp file for DLL2 is not necessary because LIB was not used to build DLL2's import library.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Using mutual imports to link two DLLs</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Linking Two DLLs with Mutual Imports</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Limitations of _AFXEXT</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`_AFXEXT`</ph> preprocessor symbol for your extension DLLs as long as you do not have multiple layers of extension DLLs.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>If you have extension DLLs that call or derive from classes in your own extension DLLs, which then derive from the MFC classes, you must use your own preprocessor symbol to avoid ambiguity.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The problem is that in Win32, you must explicitly declare any data as <bpt id="p1">**</bpt>__declspec(dllexport)<ept id="p1">**</ept> if it is to be exported from a DLL, and <bpt id="p2">**</bpt>__declspec(dllimport)<ept id="p2">**</ept> if it is to be imported from a DLL.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When you define <ph id="ph1">`_AFXEXT`</ph>, the MFC headers make sure that <bpt id="p1">**</bpt>AFX_EXT_CLASS<ept id="p1">**</ept> is defined correctly.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>When you have multiple layers, one symbol such as <bpt id="p1">**</bpt>AFX_EXT_CLASS<ept id="p1">**</ept> is not sufficient, because an extension DLL might be exporting new classes as well as importing other classes from another extension DLL.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To solve this problem, use a special preprocessor symbol that indicates that you are building the DLL itself versus using the DLL.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, imagine two extension DLLs, A.dll and B.dll.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>They each export some classes in A.h and B.h, respectively.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>B.dll uses the classes from A.dll.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The header files would look something like this:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When A.dll is built, it is built with <ph id="ph1">`/D A_IMPL`</ph> and when B.dll is built, it is built with <ph id="ph2">`/D B_IMPL`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>By using separate symbols for each DLL, <ph id="ph1">`CExampleB`</ph> is exported and <ph id="ph2">`CExampleA`</ph> is imported when building B.dll.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>is exported when building A.dll and imported when used by B.dll (or some other client).</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This type of layering cannot be done when using the built-in <bpt id="p1">**</bpt>AFX_EXT_CLASS<ept id="p1">**</ept> and <ph id="ph1">`_AFXEXT`</ph> preprocessor symbols.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The technique described above solves this problem in a manner not unlike the mechanism MFC itself uses when building its Active technologies, Database, and Network extension DLLs.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Not Exporting the Entire Class</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When you are not exporting an entire class, you have to ensure that the necessary data items created by the MFC macros are exported correctly.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This can be done by redefining <ph id="ph1">`AFX_DATA`</ph> to your specific class's macro.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This should be done any time you are not exporting the entire class.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>What do you want to do?</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Export from a DLL</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Export from a DLL using .DEF files</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Export from a DLL using __declspec(dllexport)</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Export and import using AFX_EXT_CLASS</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Export C++ functions for use in C-language executables</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Determine which exporting method to use</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Import into an application using __declspec(dllimport)</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>What do you want to know more about?</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The LIB utility and the /DEF option</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Importing and Exporting</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>