<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29ead213b6e21d5df0975b80e8f617c077ab7d55</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\application-information-and-management.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a6210b636af038960d2fec0e49782339bbb9799</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b2d86c58cb70be63621d02957ae290fc99b970b0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Application Information and Management | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Application Information and Management</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you write an application, you create a single <bpt id="p1">[</bpt>CWinApp<ept id="p1">](../../mfc/reference/cwinapp-class.md)</ept>-derived object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>At times, you may want to get information about this object from outside the <ph id="ph1">`CWinApp`</ph>-derived object.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The Microsoft Foundation Class Library provides the following global functions to help you accomplish these tasks:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Application Information and Management Functions</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>AfxBeginThread</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creates a new thread.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>AfxEndThread</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Terminates the current thread.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>AfxFreeLibrary</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Decrements the reference count of the loaded dynamic-link library (DLL) module; when the reference count reaches zero, the module is unmapped.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>AfxGetApp</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the application's single <ph id="ph1">`CWinApp`</ph> object.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>AfxGetAppName</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Returns a string that contains the application's name.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>AfxGetInstanceHandle</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Returns an <ph id="ph1">`HINSTANCE`</ph> representing this instance of the application.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>AfxGetMainWnd</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Returns a pointer to the current "main" window of a non-OLE application, or the in-place frame window of a server application.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>AfxGetPerUserRegistration</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use this function to determine whether the application redirects registry access to the <bpt id="p1">**</bpt>HKEY_CURRENT_USER<ept id="p1">**</ept> ( <bpt id="p2">**</bpt>HKCU<ept id="p2">**</ept>) node.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>AfxGetResourceHandle</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns an <ph id="ph1">`HINSTANCE`</ph> to the source of the application's default resources.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Use this to access the application's resources directly.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>AfxGetThread</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Retrieves a pointer to the current <bpt id="p1">[</bpt>CWinThread<ept id="p1">](../../mfc/reference/cwinthread-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>AfxInitRichEdit</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Initializes the version 1.0 rich edit control for the application.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>AfxInitRichEdit2</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Initializes the version 2.0 and later rich edit control for the application.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>AfxLoadLibrary</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Maps a DLL module and returns a handle that can be used to obtain the address of a DLL function.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>AfxRegisterClass</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Registers a window class in a DLL that uses MFC.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>AfxRegisterWndClass</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Registers a Windows window class to supplement those registered automatically by MFC.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>AfxSetPerUserRegistration</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Sets whether the application redirects registry access to the <bpt id="p1">**</bpt>HKEY_CURRENT_USER<ept id="p1">**</ept> ( <bpt id="p2">**</bpt>HKCU<ept id="p2">**</ept>) node.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>AfxSetResourceHandle</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">`HINSTANCE`</ph> handle where the default resources of the application are loaded.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>AfxSocketInit</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Called in a <ph id="ph1">`CWinApp::InitInstance`</ph> override to initialize Windows Sockets.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>AfxWinInit</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Called by the MFC-supplied <ph id="ph1">`WinMain`</ph> function, as part of the <bpt id="p1">[</bpt>CWinApp<ept id="p1">](../../mfc/reference/cwinapp-class.md)</ept> initialization of a GUI-based application, to initialize MFC.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Must be called directly for console applications that use MFC.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>AfxBeginThread</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Call this function to create a new thread.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Points to the controlling function for the worker thread.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Cannot be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This function must be declared as follows:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>pThreadClass</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The RUNTIME_CLASS of an object derived from <bpt id="p1">[</bpt>CWinThread<ept id="p1">](../../mfc/reference/cwinthread-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>pParam</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Parameter to be passed to the controlling function as shown in the parameter to the function declaration in <ph id="ph1">`pfnThreadProc`</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The desired priority of the thread.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For a full list and description of the available priorities, see <bpt id="p1">[</bpt>SetThreadPriority<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686277)</ept> in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Specifies the size in bytes of the stack for the new thread.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>If 0, the stack size defaults to the same size stack as the creating thread.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Specifies an additional flag that controls the creation of the thread.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>This flag can contain one of two values:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CREATE_SUSPENDED<ept id="p1">**</ept> Start the thread with a suspend count of one.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">**</bpt>CREATE_SUSPENDED<ept id="p1">**</ept> if you want to initialize any member data of the <ph id="ph1">`CWinThread`</ph> object, such as <bpt id="p2">[</bpt>m_bAutoDelete<ept id="p2">](../../mfc/reference/cwinthread-class.md#cwinthread__m_bautodelete)</ept> or any members of your derived class, before the thread starts running.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Once your initialization is complete, use <bpt id="p1">[</bpt>CWinThread::ResumeThread<ept id="p1">](../../mfc/reference/cwinthread-class.md#cwinthread__resumethread)</ept> to start the thread running.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The thread will not execute until <ph id="ph1">`CWinThread::ResumeThread`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>0<ept id="p1">**</ept> Start the thread immediately after creation.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Points to a <bpt id="p1">[</bpt>SECURITY_ATTRIBUTES<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa379560)</ept> structure that specifies the security attributes for the thread.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the same security attributes as the creating thread will be used.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>For more information on this structure, see the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Pointer to the newly created thread object, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if a failure occurs.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The first form of <ph id="ph1">`AfxBeginThread`</ph> creates a worker thread.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The second form creates a thread that may serve as a user-interface thread or as a worker thread.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>creates a new <ph id="ph1">`CWinThread`</ph> object, calls its <bpt id="p1">[</bpt>CreateThread<ept id="p1">](../../mfc/reference/cwinthread-class.md#cwinthread__createthread)</ept> function to start executing the thread, and returns a pointer to the thread.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Checks are made throughout the procedure to make sure all objects are deallocated properly should any part of the creation fail.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>To end the thread, call <bpt id="p1">[</bpt>AfxEndThread<ept id="p1">](#afxendthread)</ept> from within the thread, or return from the controlling function of the worker thread.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Multithreading must be enabled by the application; otherwise, this function will fail.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>For more information on enabling multithreading, refer to <bpt id="p1">[</bpt>/MD, /MT, /LD (Use Run-Time Library)<ept id="p1">](../../build/reference/md-mt-ld-use-run-time-library.md)</ept> under <bpt id="p2">*</bpt>Visual C++ Compiler Options<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`AfxBeginThread`</ph>, see the articles <bpt id="p1">[</bpt>Multithreading: Creating Worker Threads<ept id="p1">](../../parallel/multithreading-creating-worker-threads.md)</ept> and <bpt id="p2">[</bpt>Multithreading: Creating User-Interface Threads<ept id="p2">](../../parallel/multithreading-creating-user-interface-threads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>CSocket::Attach<ept id="p1">](../../mfc/reference/csocket-class.md#csocket__attach)</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>AfxEndThread</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Call this function to terminate the currently executing thread.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>nExitCode</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Specifies the exit code of the thread.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>bDelete</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Deletes the thread object from memory.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Must be called from within the thread to be terminated.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>For more information on <ph id="ph1">`AfxEndThread`</ph>, see the article <bpt id="p1">[</bpt>Multithreading: Terminating Threads<ept id="p1">](../../parallel/multithreading-terminating-threads.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>AfxFreeLibrary</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Both <ph id="ph1">`AfxFreeLibrary`</ph> and <ph id="ph2">`AfxLoadLibrary`</ph> maintain a reference count for each loaded library module.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>hInstLib</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A handle of the loaded library module.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>AfxLoadLibrary<ept id="p1">](#afxloadlibrary)</ept> returns this handle.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the function succeeds; otherwise, <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>decrements the reference count of the loaded dynamic-link library (DLL) module.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>When the reference count reaches zero, the module is unmapped from the address space of the calling process and the handle is no longer valid.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>This reference count is incremented each time <ph id="ph1">`AfxLoadLibrary`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Before unmapping a library module, the system enables the DLL to detach from the processes using it.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Doing so gives the DLL an opportunity to clean up resources allocated on behalf of the current process.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>After the entry-point function returns, the library module is removed from the address space of the current process.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`AfxLoadLibrary`</ph> to map a DLL module.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Be sure to use <ph id="ph1">`AfxFreeLibrary`</ph> and <ph id="ph2">`AfxLoadLibrary`</ph> (instead of the Win32 functions <bpt id="p1">**</bpt>FreeLibrary<ept id="p1">**</ept> and <bpt id="p2">**</bpt>LoadLibrary<ept id="p2">**</ept>) if your application uses multiple threads.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`AfxLoadLibrary`</ph> and <ph id="ph2">`AfxFreeLibrary`</ph> ensures that the startup and shutdown code that executes when the extension DLL is loaded and unloaded does not corrupt the global MFC state.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>See the example for <bpt id="p1">[</bpt>AfxLoadLibrary<ept id="p1">](#afxloadlibrary)</ept>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>AfxGetApp</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The pointer returned by this function can be used to access application information such as the main message-dispatch code or the topmost window.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>A pointer to the single <ph id="ph1">`CWinApp`</ph> object for the application.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>If this method returns NULL, it might indicate that the applicationâ€™s main window has not been fully initialized yet.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>It might also indicate a problem.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#126</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>AfxGetAppName</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>The string returned by this function can be used for diagnostic messages or as a root for temporary string names.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A null-terminated string containing the application's name.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#127</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>AfxGetInstanceHandle</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>This function allows you to retrieve the instance handle of the current application.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`HINSTANCE`</ph> to the current instance of the application.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>If called from within a DLL linked with the USRDLL version of MFC, an <ph id="ph1">`HINSTANCE`</ph> to the DLL is returned.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>always returns the <ph id="ph1">`HINSTANCE`</ph> of your executable file (.EXE) unless it is called from within a DLL linked with the USRDLL version of MFC.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>In this case, it returns an <ph id="ph1">`HINSTANCE`</ph> to the DLL.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#128</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>AfxGetMainWnd</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If your application is an OLE server, call this function to retrieve a pointer to the active main window of the application instead of directly referring to the <bpt id="p1">[</bpt>m_pMainWnd<ept id="p1">](../../mfc/reference/cwinthread-class.md#cwinthread__m_pmainwnd)</ept> member of the application object.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If the server has an object that is in-place active inside a container, and this container is active, this function returns a pointer to the frame window object that contains the in-place active document.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If there is no object that is in-place active within a container, or your application is not an OLE server, this function simply returns the <ph id="ph1">`m_pMainWnd`</ph> of your application object.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`AfxGetMainWnd`</ph> is called from the application's primary thread, it returns the application's main window according to the above rules.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>If the function is called from a secondary thread in the application, the function returns the main window associated with the thread that made the call.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>If your application is not an OLE server, then calling this function is equivalent to directly referring to the <ph id="ph1">`m_pMainWnd`</ph> member of your application object.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#129</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>AfxGetPerUserRegistration</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Use this function to determine whether the application redirects registry access to the <bpt id="p1">**</bpt>HKEY_CURRENT_USER<ept id="p1">**</ept> ( <bpt id="p2">**</bpt>HKCU<ept id="p2">**</ept>) node.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>indicates that the registry information is directed to the <bpt id="p1">**</bpt>HKCU<ept id="p1">**</ept> node; <ph id="ph1">`FALSE`</ph> indicates that the application writes registry information to the default node.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The default node is <bpt id="p1">**</bpt>HKEY_CLASSES_ROOT<ept id="p1">**</ept> ( <bpt id="p2">**</bpt>HKCR<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>If you enable registry redirection, the framework redirects access from <bpt id="p1">**</bpt>HKCR<ept id="p1">**</ept> to <bpt id="p2">**</bpt>HKEY_CURRENT_USER\Software\Classes<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Only the MFC and ATL frameworks are affected by the redirection.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>To change whether the application redirects registry access, use <bpt id="p1">[</bpt>AfxSetPerUserRegistration<ept id="p1">](#afxsetperuserregistration)</ept>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>AfxGetResourceHandle</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Use the <ph id="ph1">`HINSTANCE`</ph> handle returned by this function to access the application's resources directly, for example, in calls to the Windows function <bpt id="p1">**</bpt>FindResource<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`HINSTANCE`</ph> handle where the default resources of the application are loaded.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#130</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>AfxGetThread</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Call this function to get a pointer to the <bpt id="p1">[</bpt>CWinThread<ept id="p1">](../../mfc/reference/cwinthread-class.md)</ept> object representing the currently executing thread.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Pointer to the currently executing thread; otherwise <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Must be called from within the desired thread.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>If you are porting an MFC project calling <ph id="ph1">`AfxGetThread`</ph> from Visual C++ versions 4.2, 5.0, or 6.0, <ph id="ph2">`AfxGetThread`</ph> calls <bpt id="p1">[</bpt>AfxGetApp<ept id="p1">](#afxgetapp)</ept> if no thread is found.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>In Visual C+ .NET and later, <ph id="ph1">`AfxGetThread`</ph> returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no thread was found.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>If you want the application thread, you must call <ph id="ph1">`AfxGetApp`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#132</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>AfxInitRichEdit</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Call this function to initialize the rich edit control (version 1.0) for the application.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>This function is provided for backward compatibility.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Applications created with Visual C++ .NET and later use <bpt id="p1">[</bpt>AfxInitRichEdit2<ept id="p1">](#afxinitrichedit2)</ept>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>loads RICHED32.DLL to initialize version 1.0 of the rich edit control.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>To use version 2.0 and 3.0 of the rich edit control, RICHED20.DLL needs to be loaded.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>This is accomplished with a call to <bpt id="p1">[</bpt>AfxInitRichEdit2<ept id="p1">](#afxinitrichedit2)</ept>.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>If you have dialog resources with the rich edit control created prior to Visual C++ .NET, the rich edit controls are automatically version 1.0.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Rich edit controls inserted using the Visual C++ .NET Resource Editor are version 2.0.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>To update rich edit controls in existing Visual C++ applications to version 2.0, open the .RC file as text, change the class name of each rich edit control from "RICHEDIT" to "RichEdit20a".</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Then replace the call to <ph id="ph1">`AfxInitRichEdit`</ph> with <ph id="ph2">`AfxInitRichEdit2`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>This function also initializes the common controls library, if the library hasn't already been initialized for the process.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>If you use the rich edit control directly from your MFC application, you should call this function to assure that MFC has properly initialized the rich edit control runtime.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>If you call the Create method of <bpt id="p1">[</bpt>CRichEditCtrl<ept id="p1">](../../mfc/reference/cricheditctrl-class.md)</ept>, <bpt id="p2">[</bpt>CRichEditView<ept id="p2">](../../mfc/reference/cricheditview-class.md)</ept>, or <bpt id="p3">[</bpt>CRichEditDoc<ept id="p3">](../../mfc/reference/cricheditdoc-class.md)</ept>, you typically don't need to call this function, but in some cases it might be necessary.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>AfxInitRichEdit2</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Call this function to initialize the rich edit control (version 2.0 and later) for the application.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Call this function to load the RICHED20.DLL and initialize version 2.0 of the rich edit control.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>If you call the Create method of <bpt id="p1">[</bpt>CRichEditCtrl<ept id="p1">](../../mfc/reference/cricheditctrl-class.md)</ept>, <bpt id="p2">[</bpt>CRichEditView<ept id="p2">](../../mfc/reference/cricheditview-class.md)</ept>, or <bpt id="p3">[</bpt>CRichEditDoc<ept id="p3">](../../mfc/reference/cricheditdoc-class.md)</ept>, you typically don't need to call this function, but in some cases it might be necessary.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>AfxLoadLibrary</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`AfxLoadLibrary`</ph> to map a DLL module.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>lpszModuleName</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string that contains the name of the module (either a .DLL or .EXE file).</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The name specified is the filename of the module.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>If the string specifies a path but the file does not exist in the specified directory, the function fails.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>If a path is not specified and the filename extension is omitted, the default extension .DLL is appended.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>However, the filename string can include a trailing point character (.) to indicate that the module name has no extension.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>When no path is specified, the function searches for the file in the following sequence:</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The directory from which the application loaded.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The current directory.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows 95/98:<ept id="p1">**</ept> The Windows system directory.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows NT:<ept id="p1">**</ept> The 32-bit Windows system directory.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The name of this directory is SYSTEM32.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Windows NT only:<ept id="p1">**</ept> The 16-bit Windows system directory.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>There is no Win32 function that obtains the path of this directory, but it is searched.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>The name of this directory is SYSTEM.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>The Windows directory.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The directories that are listed in the PATH environment variable.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>If the function succeeds, the return value is a handle to the module.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>If the function fails, the return value is NULL.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>It returns a handle that can be used in <bpt id="p1">[</bpt>GetProcAddress<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms683212)</ept> to get the address of a DLL function.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>can also be used to map other executable modules.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Each process maintains a reference count for each loaded library module.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>This reference count is incremented each time <ph id="ph1">`AfxLoadLibrary`</ph> is called and is decremented each time <ph id="ph2">`AfxFreeLibrary`</ph> is called.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>When the reference count reaches zero, the module is unmapped from the address space of the calling process and the handle is no longer valid.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Be sure to use <ph id="ph1">`AfxLoadLibrary`</ph> and <ph id="ph2">`AfxFreeLibrary`</ph> (instead of the Win32 functions <bpt id="p1">**</bpt>LoadLibrary<ept id="p1">**</ept> and <bpt id="p2">**</bpt>FreeLibrary<ept id="p2">**</ept>) if your application uses multiple threads and if it dynamically loads an extension DLL.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`AfxLoadLibrary`</ph> and <ph id="ph2">`AfxFreeLibrary`</ph> insures that the startup and shutdown code that executes when the extension DLL is loaded and unloaded does not corrupt the global MFC state.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`AfxLoadLibrary`</ph> in an application requires you to dynamically link to the DLL version of MFC; the header file for <ph id="ph2">`AfxLoadLibrary`</ph>, Afxdll_.h, is only included if MFC is linked to the application as a DLL.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>This is by design because you have to link to the DLL version of MFC to use or create extension DLLs.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>NVC_MFC_DLLUser#1</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>NVC_MFC_DLLUser#2</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>NVC_MFC_DLLUser#3</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>AfxRegisterClass</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Use this function to register window classes in a DLL that uses MFC.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>lpWndClass</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">[</bpt>WNDCLASS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633576)</ept> structure containing information about the window class to be registered.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>For more information on this structure, see the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept> if the class is successfully registered; otherwise <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>If you use this function, the class is automatically unregistered when the DLL is unloaded.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>In non-DLL builds, the <ph id="ph1">`AfxRegisterClass`</ph> identifier is defined as a macro that maps to the Windows function <bpt id="p1">**</bpt>RegisterClass<ept id="p1">**</ept>, since classes registered in an application are automatically unregistered.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`AfxRegisterClass`</ph> instead of <bpt id="p1">**</bpt>RegisterClass<ept id="p1">**</ept>, your code can be used without change both in an application and in a DLL.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>NVC_MFC_DLL#3</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>AfxRegisterWndClass</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Allows you to register your own window classes.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>nClassStyle</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Specifies the Windows class style or combination of styles, created by using the bitwise-OR ( <bpt id="p1">**</bpt>&amp;#124;<ept id="p1">**</ept>) operator, for the window class.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>For a list of class styles, see the <bpt id="p1">[</bpt>WNDCLASS<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms633576)</ept> structure in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, the defaults will be set as follows:</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>Sets the mouse style to <bpt id="p1">**</bpt>CS_DBLCLKS<ept id="p1">**</ept>, which sends double-click messages to the window procedure when the user double-clicks the mouse.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Sets the arrow cursor style to the Windows standard <bpt id="p1">**</bpt>IDC_ARROW<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Sets the background brush to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>, so the window will not erase its background.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Sets the icon to the standard, waving-flag Windows logo icon.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>Specifies a handle to the cursor resource to be installed in each window created from the window class.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>If you use the default of <bpt id="p1">**</bpt>0<ept id="p1">**</ept>, you will get the standard <bpt id="p2">**</bpt>IDC_ARROW<ept id="p2">**</ept> cursor.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>hbrBackground</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Specifies a handle to the brush resource to be installed in each window created from the window class.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>If you use the default of <bpt id="p1">**</bpt>0<ept id="p1">**</ept>, you will have a <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> background brush, and your window will, by default, not erase its background while processing <bpt id="p3">[</bpt>WM_ERASEBKGND<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/ms648055)</ept>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Specifies a handle to the icon resource to be installed in each window created from the window class.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>If you use the default of <bpt id="p1">**</bpt>0<ept id="p1">**</ept>, you will get the standard, waving-flag Windows logo icon.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>A null-terminated string containing the class name.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>You can pass this class name to the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> member function in <ph id="ph1">`CWnd`</ph> or other <bpt id="p2">**</bpt>CWnd-<ept id="p2">**</ept>derived classes to create a window.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The name is generated by the Microsoft Foundation Class Library.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The return value is a pointer to a static buffer.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>To save this string, assign it to a <ph id="ph1">`CString`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The Microsoft Foundation Class Library automatically registers several standard window classes for you.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Call this function if you want to register your own window classes.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The name registered for a class by <ph id="ph1">`AfxRegisterWndClass`</ph> depends solely on the parameters.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`AfxRegisterWndClass`</ph> multiple times with identical parameters, it only registers a class on the first call.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Subsequent calls to <ph id="ph1">`AfxRegisterWndClass`</ph> with identical parameters simply return the already-registered classname.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`AfxRegisterWndClass`</ph> for multiple CWnd-derived classes with identical parameters, instead of getting a separate window class for each class, each class shares the same window class.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>This can cause problems if the <bpt id="p1">**</bpt>CS_CLASSDC<ept id="p1">**</ept> class style is used.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Instead of multiple <bpt id="p1">**</bpt>CS_CLASSDC<ept id="p1">**</ept> window classes, you end up with one <bpt id="p2">**</bpt>CS_CLASSDC<ept id="p2">**</ept> window class, and all C++ windows that use that class share the same DC.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>To avoid this problem, call <bpt id="p1">[</bpt>AfxRegisterClass<ept id="p1">](#afxregisterclass)</ept> to register the class.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Refer to Technical Note <bpt id="p1">[</bpt>TN001: Window Class Registration<ept id="p1">](../../mfc/tn001-window-class-registration.md)</ept> for more information on window class registration and the <ph id="ph1">`AfxRegisterWndClass`</ph> function.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#134</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>AfxSetPerUserRegistration</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>Sets whether the application redirects registry access to the <bpt id="p1">**</bpt>HKEY_CURRENT_USER<ept id="p1">**</ept> ( <bpt id="p2">**</bpt>HKCU<ept id="p2">**</ept>) node.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>indicates that the registry information is directed to the <bpt id="p1">**</bpt>HKCU<ept id="p1">**</ept> node; <ph id="ph1">`FALSE`</ph> indicates that the application writes registry information to the default node.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>The default node is <bpt id="p1">**</bpt>HKEY_CLASSES_ROOT<ept id="p1">**</ept> ( <bpt id="p2">**</bpt>HKCR<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>Before <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, applications that access the registry usually use the <bpt id="p1">**</bpt>HKEY_CLASSES_ROOT<ept id="p1">**</ept> node.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>However, with <ph id="ph1">[!INCLUDE[wiprlhext](../../c-runtime-library/reference/includes/wiprlhext_md.md)]</ph>, you must run an application in elevated mode to write to <bpt id="p1">**</bpt>HKCR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>This method enables your application to read and write to the registry without running in elevated mode by redirecting registry access from <bpt id="p1">**</bpt>HKCR<ept id="p1">**</ept> to <bpt id="p2">**</bpt>HKCU<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Linker Property Pages<ept id="p1">](../../ide/linker-property-pages.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>If you enable registry redirection, the framework redirects access from <bpt id="p1">**</bpt>HKCR<ept id="p1">**</ept> to <bpt id="p2">**</bpt>HKEY_CURRENT_USER\Software\Classes<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Only the MFC and ATL frameworks are affected by the redirection.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>The default implementation accesses the registry under <bpt id="p1">**</bpt>HKCR<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>AfxSetResourceHandle</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Use this function to set the <ph id="ph1">`HINSTANCE`</ph> handle that determines where the default resources of the application are loaded.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>The instance or module handle to an .EXE or DLL file from which the application's resources are loaded.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>NVC_MFCWindowing#135</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>AfxSocketInit</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Call this function in your <ph id="ph1">`CWinApp::InitInstance`</ph> override to initialize Windows Sockets.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>A pointer to a <bpt id="p1">[</bpt>WSADATA<ept id="p1">](../../mfc/reference/wsadata-structure.md)</ept> structure.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`lpwsaData`</ph> is not equal to <ph id="ph2">`NULL`</ph>, then the address of the <ph id="ph3">`WSADATA`</ph> structure is filled by the call to <ph id="ph4">`WSAStartup`</ph>.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>This function also ensures that <ph id="ph1">`WSACleanup`</ph> is called for you before the application terminates.</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Nonzero if the function is successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>When using MFC sockets in secondary threads in a statically linked MFC application, you must call <ph id="ph1">`AfxSocketInit`</ph> in each thread that uses sockets to initialize the socket libraries.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>By default, <ph id="ph1">`AfxSocketInit`</ph> is called only in the primary thread.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>AfxWinInit</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>This function is called by the MFC-supplied <ph id="ph1">`WinMain`</ph> function, as part of the <bpt id="p1">[</bpt>CWinApp<ept id="p1">](../../mfc/reference/cwinapp-class.md)</ept> initialization of a GUI-based application, to initialize MFC.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The handle of the currently running module.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>hPrevInstance</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>A handle to a previous instance of the application.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>For a Win32-based application, this parameter is always <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Points to a null-terminated string specifying the command line for the application.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Specifies how the main window of a GUI application would be shown.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>For a console application, which does not use the MFC-supplied <ph id="ph1">`WinMain`</ph> function, you must call <ph id="ph2">`AfxWinInit`</ph> directly to initialize MFC.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>If you call <ph id="ph1">`AfxWinInit`</ph> yourself, you should declare an instance of a <ph id="ph2">`CWinApp`</ph> class.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>For a console application, you might choose not to derive your own class from <ph id="ph1">`CWinApp`</ph> and instead use an instance of <ph id="ph2">`CWinApp`</ph> directly.</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>This technique is appropriate if you decide to leave all functionality for your application in your implementation of <bpt id="p1">**</bpt>main<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>When it creates an activation context for an assembly, MFC uses a manifest resource provided by the user module.</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The activation context is created in <ph id="ph1">`AfxWinInit`</ph>.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Support for Activation Contexts in the MFC Module State<ept id="p1">](../../mfc/support-for-activation-contexts-in-the-mfc-module-state.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AfxWinInit#1</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>Macros and Globals</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>CWinApp Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>