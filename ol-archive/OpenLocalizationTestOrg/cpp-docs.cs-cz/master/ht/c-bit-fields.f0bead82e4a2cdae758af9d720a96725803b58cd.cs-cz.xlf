<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b194b9a177fe2a74221f7990fba3aab7186f1b0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\c-bit-fields.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">274eae15ba4ba94005c928e61cca990d183c3bad</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b599eb21287f63c7162af533f8cbda814f4bae00</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Bit Fields | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Bit Fields</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>In addition to declarators for members of a structure or union, a structure declarator can also be a specified number of bits, called a "bit field."</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Its length is set off from the declarator for the field name by a colon.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A bit field is interpreted as an integral type.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>struct-declarator<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>declarator</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>type-specifier declarator<ept id="p1">*</ept> opt<bpt id="p2">**</bpt>:<ept id="p2">**</ept> <bpt id="p3">*</bpt>constant-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>constant-expression<ept id="p1">*</ept> specifies the width of the field in bits.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>type-specifier<ept id="p1">*</ept> for the <ph id="ph1">`declarator`</ph> must be <ph id="ph2">`unsigned int`</ph>, <bpt id="p2">**</bpt>signed int<ept id="p2">**</ept>, or <ph id="ph3">`int`</ph>, and the <bpt id="p3">*</bpt>constant-expression<ept id="p3">*</ept> must be a nonnegative integer value.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the value is zero, the declaration has no <ph id="ph1">`declarator`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Arrays of bit fields, pointers to bit fields, and functions returning bit fields are not allowed.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The optional <ph id="ph1">`declarator`</ph> names the bit field.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Bit fields can only be declared as part of a structure.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The address-of operator (<bpt id="p1">**</bpt><ph id="ph1">&amp;</ph><ept id="p1">**</ept>) cannot be applied to bit-field components.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Unnamed bit fields cannot be referenced, and their contents at run time are unpredictable.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>They can be used as "dummy" fields, for alignment purposes.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>An unnamed bit field whose width is specified as 0 guarantees that storage for the member following it in the <bpt id="p1">*</bpt>struct-declaration-list<ept id="p1">*</ept> begins on an <ph id="ph1">`int`</ph> boundary.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Bit fields must also be long enough to contain the bit pattern.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>For example, these two statements are not legal:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>This example defines a two-dimensional array of structures named <ph id="ph1">`screen`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The array contains 2,000 elements.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Each element is an individual structure containing four bit-field members: <ph id="ph1">`icon`</ph>, <ph id="ph2">`color`</ph>, <ph id="ph3">`underline`</ph>, and <ph id="ph4">`blink`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The size of each structure is two bytes.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Bit fields have the same semantics as the integer type.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This means a bit field is used in expressions in exactly the same way as a variable of the same base type would be used, regardless of how many bits are in the bit field.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Bit fields defined as <ph id="ph1">`int`</ph> are treated as signed.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A Microsoft extension to the ANSI C standard allows <ph id="ph1">`char`</ph> and <bpt id="p1">**</bpt>long<ept id="p1">**</ept> types (both <bpt id="p2">**</bpt>signed<ept id="p2">**</ept> and <ph id="ph2">`unsigned`</ph>) for bit fields.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Unnamed bit fields with base type <bpt id="p1">**</bpt>long<ept id="p1">**</ept>, <bpt id="p2">**</bpt>short<ept id="p2">**</ept>, or <ph id="ph1">`char`</ph> (<bpt id="p3">**</bpt>signed<ept id="p3">**</ept> or <ph id="ph2">`unsigned`</ph>) force alignment to a boundary appropriate to the base type.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Bit fields are allocated within an integer from least-significant to most-significant bit.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the following code</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>the bits would be arranged as follows:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Since the 8086 family of processors stores the low byte of integer values before the high byte, the integer <ph id="ph1">`0x01F2`</ph> above would be stored in physical memory as <ph id="ph2">`0xF2`</ph> followed by <ph id="ph3">`0x01`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Structure Declarations</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>