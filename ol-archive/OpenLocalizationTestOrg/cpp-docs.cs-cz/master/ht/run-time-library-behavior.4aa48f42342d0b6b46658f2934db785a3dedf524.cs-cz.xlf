<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="cs-cz">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d149da5cdc1c5b2970041ce237fd1a710ec8c49e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\run-time-library-behavior.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d728613689f3ea9aa0d97b7aeeec2213a029046f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eaf9a41c7d020a04233f1ed167ed1080e4c02a6e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Run-Time Library Behavior | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Run-Time Library Behavior</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The C/C++ run-time library code performs the DLL startup sequence, eliminating the need to link with a separate module as was necessary in Windows 3.x.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Included in the C/C++ run-time library code is the DLL entry-point function called <bpt id="p1">**</bpt>_DllMainCRTStartup<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>_DllMainCRTStartup<ept id="p1">**</ept> function does several things, including calling <bpt id="p2">**</bpt>_CRT_INIT<ept id="p2">**</ept>, which initializes the C/C++ run-time library and invokes C++ constructors on static, non-local variables.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Without this function, the run-time library would be left in an uninitialized state.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>_CRT_INIT<ept id="p1">**</ept> is available for both a statically linked CRT or linking to the CRT DLL Msvcr90.dll, from a user DLL.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>While it is possible to specify another entry-point function using the /ENTRY: linker option, it is not recommended because your entry-point function would have to duplicate everything that <bpt id="p1">**</bpt>_DllMainCRTStartup<ept id="p1">**</ept> does.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>When building DLLs in Visual C++, <bpt id="p1">**</bpt>_DllMainCRTStartup<ept id="p1">**</ept> is linked in automatically and you do not need to specify an entry-point function using the /ENTRY: linker option.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In addition to initializing the C run-time library, <bpt id="p1">**</bpt>_DllMainCRTStartup<ept id="p1">**</ept> calls a function called <ph id="ph1">`DllMain`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Depending on the kind of DLL you are building, Visual C++ provides <ph id="ph1">`DllMain`</ph> for you and it gets linked in so that <bpt id="p1">**</bpt>_DllMainCRTStartup<ept id="p1">**</ept> always has something to call.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In this way, if you do not need to initialize your DLL, there is nothing special you have to do when building your DLL.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If you need to initialize your DLL, where you add your code depends on the kind of DLL you are writing.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Initializing a DLL<ept id="p1">](../build/initializing-a-dll.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The C/C++ run-time library code calls constructors and destructors on static, non-local variables.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For example, in the following DLL source code, <ph id="ph1">`Equus`</ph> and <ph id="ph2">`Sugar`</ph> are two static, non-local objects of class <ph id="ph3">`CHorse`</ph>, defined in Horses.h.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>There is no function in source code that contains calls to a constructor function for <ph id="ph1">`CHorse`</ph> or to the destructor function because these objects are defined outside of any function.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Therefore, calls to these constructors and destructors must be performed by the run-time code.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The run-time library code for applications also performs this function.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Each time a new process attempts to use the DLL, the operating system creates a separate copy of the DLL's data: this is called process attach.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The run-time library code for the DLL calls the constructors for all of the global objects, if any, and then calls the <ph id="ph1">`DllMain`</ph> function with process attach selected.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The opposite situation is process detach: the run-time library code calls <ph id="ph1">`DllMain`</ph> with process detach selected and then calls a list of termination functions, including <ph id="ph2">`atexit`</ph> functions, destructors for the global objects, and destructors for the static objects.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Note that the order of events in process attach is the reverse of that in process detach.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The run-time library code is also called during thread attach and thread detach, but the run-time code does no initialization or termination on its own.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>What do you want to do?</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Initialize a DLL</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>DLLs in Visual C++</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>