<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4301ebd6121ac3b30798cccdbdf645a49c84e27</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\regex-traits-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">mt</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Machine Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7fa582c05601e189a225d368c60b8de142ea9d1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">155a623cb9bfc6a3b05557aa2fa7773fc2240141</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>regex_traits Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>regex_traits Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Describes characteristics of elements for matching.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The element type to describe.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The template class describes various regular expression traits for type <ph id="ph1">`Elem`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The template class <bpt id="p1">[</bpt>basic_regex Class<ept id="p1">](../standard-library/basic-regex-class.md)</ept> uses this information to manipulate elements of type <ph id="ph1">`Elem`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`regex_traits`</ph> object holds an object of type <ph id="ph2">`regex_traits::locale`</ph> which is used by some of its member functions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The default locale is a copy of <ph id="ph1">`regex_traits::locale()`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The member function <ph id="ph1">`imbue`</ph> replaces the locale object, and the member function <ph id="ph2">`getloc`</ph> returns a copy of the locale object.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>regex&gt;</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>regex_traits::char_class_type</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The type of character class designators.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The type is a synonym for an unspecified type that designates character classes.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Values of this type can be combined using the <ph id="ph1">`|`</ph> operator to designate character classes that are the union of the classes designated by the operands.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>regex_traits::char_type</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The type of an element.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The typedef is a synonym for the template argument <ph id="ph1">`Elem`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>regex_traits::getloc</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Returns the stored locale object.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The member function returns the stored <ph id="ph1">`locale`</ph> object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>regex_traits::imbue</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Alters the stored locale object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The locale object to store.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The member function copies <ph id="ph1">`loc`</ph> to the stored <ph id="ph2">`locale`</ph> object and returns a copy of the previous value of the stored <ph id="ph3">`locale`</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>regex_traits::isctype</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Tests for class membership.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The element to test.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The classes to test for.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The member function returns true only if the character <ph id="ph1">`ch`</ph> is in the character class designated by <ph id="ph2">`cls`</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>regex_traits::length</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Returns the length of a nul-terminated sequence.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The nul-terminated sequence.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The static member function returns <ph id="ph1">`std::char_traits&lt;char_type&gt;::length(str)`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>regex_traits::locale_type</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The type of the stored locale object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The typedef is a synonym for a type that encapsulates locales.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>In the specializations <ph id="ph1">`regex_traits&lt;char&gt;`</ph> and <ph id="ph2">`regex_traits&lt;wchar_t&gt;`</ph> it is a synonym for <ph id="ph3">`std::locale`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>regex_traits::lookup_classname</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Maps a sequence to a character class.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Beginning of sequence to look up.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>End of sequence to look up.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The member function returns a value that designates the character class named by the character sequence pointed to by its arguments.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The value does not depend on the case of the characters in the sequence.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The specialization <ph id="ph1">`regex_traits&lt;char&gt;`</ph> recognizes the names <ph id="ph2">`"d"`</ph>, <ph id="ph3">`"s"`</ph>, <ph id="ph4">`"w"`</ph>, <ph id="ph5">`"alnum"`</ph>, <ph id="ph6">`"alpha"`</ph>, <ph id="ph7">`"blank"`</ph>, <ph id="ph8">`"cntrl"`</ph>, <ph id="ph9">`"digit"`</ph>, <ph id="ph10">`"graph"`</ph>, <ph id="ph11">`"lower"`</ph>, <ph id="ph12">`"print"`</ph>, <ph id="ph13">`"punct"`</ph>, <ph id="ph14">`"space"`</ph>, <ph id="ph15">`"upper"`</ph>, and <ph id="ph16">`"xdigit"`</ph>, all without regard to case.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The specialization <ph id="ph1">`regex_traits&lt;wchar_t&gt;`</ph> recognizes the names <ph id="ph2">`L"d"`</ph>, <ph id="ph3">`L"s"`</ph>, <ph id="ph4">`L"w"`</ph>, <ph id="ph5">`L"alnum"`</ph>, <ph id="ph6">`L"alpha"`</ph>, <ph id="ph7">`L"blank"`</ph>, <ph id="ph8">`L"cntrl"`</ph>, <ph id="ph9">`L"digit"`</ph>, <ph id="ph10">`L"graph"`</ph>, <ph id="ph11">`L"lower"`</ph>, <ph id="ph12">`L"print"`</ph>, <ph id="ph13">`L"punct"`</ph>, <ph id="ph14">`L"space"`</ph>, <ph id="ph15">`L"upper"`</ph>, and <ph id="ph16">`L"xdigit"`</ph>, all without regard to case.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>regex_traits::lookup_collatename</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Maps a sequence to a collating element.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Beginning of sequence to look up.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>End of sequence to look up.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The member function returns a string object containing the collating element corresponding to the sequence <ph id="ph1">`[first, last)`</ph>, or an empty string if the sequence is not a valid collating element.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>regex_traits::regex_traits</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Constructs the object.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The constructor constructs an object whose stored <ph id="ph1">`locale`</ph> object is initialized to the default locale.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>regex_traits::size_type</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The type of a sequence length.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>The typedef is a synonym for an unsigned integral type.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In the specializations <ph id="ph1">`regex_traits&lt;char&gt;`</ph> and <ph id="ph2">`regex_traits&lt;wchar_t&gt;`</ph> it is a synonym for <ph id="ph3">`std::size_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The typedef is a synonym for <ph id="ph1">`std::size_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>regex_traits::string_type</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The type of a string of elements.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The typedef is a synonym for <ph id="ph1">`basic_string&lt;Elem&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>regex_traits::transform</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Converts to equivalent ordered sequence.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Beginning of sequence to transform.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>End of sequence to transform.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The member function returns a string that it generates by using a transformation rule that depends on the stored <ph id="ph1">`locale`</ph> object.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>For two character sequences designated by the iterator ranges <ph id="ph1">`[first1, last1)`</ph> and <ph id="ph2">`[first2, last2)`</ph>, <ph id="ph3">`transform(first1, last1) &lt; transform(first2, last2)`</ph> if the character sequence designated by the iterator range <ph id="ph4">`[first1, last1)`</ph> sorts before the character sequence designated by the iterator range <ph id="ph5">`[first2, last2)`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>regex_traits::transform_primary</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Converts to equivalent caseless ordered sequence.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Beginning of sequence to transform.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>End of sequence to transform.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The member function returns a string that it generates by using a transformation rule that depends on the stored <ph id="ph1">`locale`</ph> object.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>For two character sequences designated by the iterator ranges <ph id="ph1">`[first1, last1)`</ph> and <ph id="ph2">`[first2, last2)`</ph>, <ph id="ph3">`transform_primary(first1, last1) &lt; transform_primary(first2, last2)`</ph> if the character sequence designated by the iterator range <ph id="ph4">`[first1, last1)`</ph> sorts before the character sequence designated by the iterator range <ph id="ph5">`[first2, last2)`</ph> without regard for case or accents.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>regex_traits::translate</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Converts to equivalent matching element.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The element to convert.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The member function returns a character that it generates by using a transformation rule that depends on the stored <ph id="ph1">`locale`</ph> object.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>For two <ph id="ph1">`char_type`</ph> objects <ph id="ph2">`ch1`</ph> and <ph id="ph3">`ch2`</ph>, <ph id="ph4">`translate(ch1) == translate(ch2)`</ph> only if <ph id="ph5">`ch1`</ph> and <ph id="ph6">`ch2`</ph> should match when one occurs in the regular expression definition and the other occurs at a corresponding position in the target sequence for a locale-sensitive match.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>regex_traits::translate_nocase</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Converts to equivalent caseless matching element.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The element to convert.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The member function returns a character that it generates by using a transformation rule that depends on the stored <ph id="ph1">`locale`</ph> object.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>For two <ph id="ph1">`char_type`</ph> objects <ph id="ph2">`ch1`</ph> and <ph id="ph3">`ch2`</ph>, <ph id="ph4">`translate_nocase(ch1) == translate_nocase(ch2)`</ph> only if <ph id="ph5">`ch1`</ph> and <ph id="ph6">`ch2`</ph> should match when one occurs in the regular expression definition and the other occurs at a corresponding position in the target sequence for a case-insensitive match.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>regex_traits::value</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Converts an element to a digit value.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The element to convert.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The arithmetic base to use.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The member function returns the value represented by the character <ph id="ph1">`ch`</ph> in the base <ph id="ph2">`radix`</ph>, or -1 if <ph id="ph3">`ch`</ph> is not a valid digit in the base <ph id="ph4">`radix`</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The function will only be called with a <ph id="ph1">`radix`</ph> argument of 8, 10, or 16.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>regex&gt;</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>regex_traits</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>regex_traits<ph id="ph1">\&lt;</ph>char&gt; Class</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>regex_traits&lt;wchar_t&gt; Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>