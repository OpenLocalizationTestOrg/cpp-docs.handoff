<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">883a683e456b00b4a2a80004cb8bb5d72f03a91a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\system-clock-structure.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b02c9610e2514416bf02dc088db8c5fc6ae4ef9e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3477dc189ed4726ead634e757a235a8c4c7917a2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>system_clock Structure | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>system_clock Structure</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Represents a <bpt id="p1">*</bpt>clock type<ept id="p1">*</ept> that is based on the real-time clock of the system.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">*</bpt>clock type<ept id="p1">*</ept> is used to obtain the current time as UTC.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type embodies an instantiation of <bpt id="p1">[</bpt>duration<ept id="p1">](../standard-library/duration-class.md)</ept> and the class template <bpt id="p2">[</bpt>time_point<ept id="p2">](../standard-library/time-point-class.md)</ept>, and defines a static member function <ph id="ph1">`now()`</ph> that returns the time.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A clock is <bpt id="p1">*</bpt>monotonic<ept id="p1">*</ept> if the value that is returned by a first call to <ph id="ph1">`now()`</ph> is always less than or equal to the value that is returned by a subsequent call to <ph id="ph2">`now()`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A clock is <bpt id="p1">*</bpt>steady<ept id="p1">*</ept> if it is <bpt id="p2">*</bpt>monotonic<ept id="p2">*</ept> and if the time between clock ticks is constant.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In this implementation, a <ph id="ph1">`system_clock`</ph> is synonymous with a <ph id="ph2">`high_resolution_clock`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Public Typedefs</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A synonym for <ph id="ph1">`duration&lt;rep, period&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A synonym for the type that is used to represent the tick period in the contained instantiation of <ph id="ph1">`duration`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A synonym for the type that is used to represent the number of clock ticks in the contained instantiation of <ph id="ph1">`duration`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A synonym for <ph id="ph1">`time_point&lt;Clock, duration&gt;`</ph>, where <ph id="ph2">`Clock`</ph> is a synonym for either the clock type itself or another clock type that is based on the same epoch and has the same nested <ph id="ph3">`duration`</ph> type.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>system_clock::from_time_t Method</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Static.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`time_point`</ph> that most closely approximates a specified time.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>system_clock::now Method</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Static.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Returns the current time.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>system_clock::to_time_t Method</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Static.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns a <ph id="ph1">`time_t`</ph> object that most closely approximates a specified <ph id="ph2">`time_point`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Public Constants</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>system_clock::is_monotonic Constant</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Specifies whether the clock type is monotonic.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>system_clock::is_steady Constant</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Specifies whether the clock type is steady.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> chrono</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std::chrono</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>system_clock::from_time_t Method</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Static method that returns a <bpt id="p1">[</bpt>time_point<ept id="p1">](../standard-library/time-point-class.md)</ept> that most closely approximates the time that is represented by <ph id="ph1">`Tm`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>time_t<ept id="p1">](../c-runtime-library/standard-types.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>system_clock::is_monotonic Constant</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Static value that specifies whether the clock type is monotonic.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>In this implementation, <ph id="ph1">`system_clock::is_monotonic`</ph> always returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A clock is <bpt id="p1">*</bpt>monotonic<ept id="p1">*</ept> if the value that is returned by a first call to <ph id="ph1">`now()`</ph> is always less than or equal to the value that is returned by a subsequent call to <ph id="ph2">`now()`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>system_clock::is_steady Constant</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Static value that specifies whether the clock type is <bpt id="p1">*</bpt>steady<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In this implementation, <ph id="ph1">`system_clock::is_steady`</ph> always returns <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A clock is <bpt id="p1">*</bpt>steady<ept id="p1">*</ept> if it is <bpt id="p2">[</bpt>monotonic<ept id="p2">](#system_clock__is_monotonic_constant)</ept> and if the time between clock ticks is constant.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>system_clock::now Method</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Static method that returns the current time.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>time_point<ept id="p1">](../standard-library/time-point-class.md)</ept> object that represents the current time.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>system_clock::to_time_t Method</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Static method that returns a <bpt id="p1">[</bpt>time_t<ept id="p1">](../c-runtime-library/standard-types.md)</ept> that most closely approximates the time that is represented by <ph id="ph1">`Time`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>time_point<ept id="p1">](../standard-library/time-point-class.md)</ept> object.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Header Files Reference</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>chrono&gt;</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>steady_clock struct</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>