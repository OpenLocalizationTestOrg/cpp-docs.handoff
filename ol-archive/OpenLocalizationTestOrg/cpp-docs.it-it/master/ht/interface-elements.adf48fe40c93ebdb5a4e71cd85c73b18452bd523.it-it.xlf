<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">883b7b044b4c5020a96feecfa2bf57d6f61d910d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\interface-elements.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59de2c70d20fe386249e9fc322270d2eb881587e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89f0ddf070f1c858c2ea5076cb037561360c8f47</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Interface Elements | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Interface Elements</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document describes interface elements that were introduced in <ph id="ph1">[!INCLUDE[vs_orcas_long](../atl/reference/includes/vs_orcas_long_md.md)]</ph> SP1, and also describes differences with the earlier version of the library.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following illustration shows an application that was built by using the new interface elements.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>MFC Feature Pack example application</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Window Docking</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Window docking functionality resembles the window docking that the <ph id="ph1">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph> graphical user interface uses.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Control Bars are Now Panes</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Control bars are now known as panes and are derived from <bpt id="p1">[</bpt>CBasePane Class<ept id="p1">](../mfc/reference/cbasepane-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In earlier versions of MFC, the base class of control bars was <ph id="ph1">`CControlBar`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The application main frame window is usually represented by the <bpt id="p1">[</bpt>CFrameWndEx Class<ept id="p1">](../mfc/reference/cframewndex-class.md)</ept> or the <bpt id="p2">[</bpt>CMDIFrameWndEx Class<ept id="p2">](../mfc/reference/cmdiframewndex-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The main frame is called the <bpt id="p1">*</bpt>dock site<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Panes can have one of three types of parents: a dock site, a dock bar, or a mini-frame window.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>There are two types of panes: non-resizable and resizable.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Resizable panes, such as status bars and toolbars, can be resized by using splitters or sliders.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Resizable panes can form containers (one pane can be docked to another pane, creating a splitter between them).</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>However, resizable panes cannot be attached (docked) to dock bars.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If your application uses non-resizable panes, derive them from <bpt id="p1">[</bpt>CPane Class<ept id="p1">](../mfc/reference/cpane-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If your application uses resizable panes, derive them from <bpt id="p1">[</bpt>CDockablePane Class<ept id="p1">](../mfc/reference/cdockablepane-class.md)</ept></source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Dock Site</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The dock site (or main frame window) owns all panes and mini-frame windows in an application.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The dock site contains a <bpt id="p1">[</bpt>CDockingManager<ept id="p1">](../mfc/reference/cdockingmanager-class.md)</ept> member.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This member maintains a list of all panes that belong to the dock site.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The list is ordered so that the panes created at the outer edges of the dock site are positioned at the start of the list.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>When the framework redraws the dock site, it loops over this list and adjusts the layout of each pane to include the current bounding rectangle of the dock site.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can call <ph id="ph1">`AdjustDockingLayout`</ph> or <ph id="ph2">`RecalcLayout`</ph> when you have to adjust the docking layout, and the framework redirects this call to the docking manager.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Dock Bars</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Each main frame window can position <bpt id="p1">*</bpt>dock bars<ept id="p1">*</ept> along its borders.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A dock bar is a pane that belongs to a <bpt id="p1">[</bpt>CDockSite Class<ept id="p1">](../mfc/reference/cdocksite-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Dock bars can accept objects derived from <bpt id="p1">[</bpt>CPane<ept id="p1">](../mfc/reference/cpane-class.md)</ept>, such as toolbars.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To create dock bars when the main frame window is initialized, call <ph id="ph1">`EnableDocking`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To enable auto hide bars, call <ph id="ph1">`EnableAutoHideBars`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>creates <bpt id="p1">[</bpt>CAutoHideDockSite<ept id="p1">](../mfc/reference/cautohidedocksite-class.md)</ept> objects, and positions them next to each dock bar.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Each dock bar is divided into dock rows.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Dock rows are represented by the <bpt id="p1">[</bpt>CDockingPanesRow Class<ept id="p1">](../mfc/reference/cdockingpanesrow-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Each dock row contains a list of toolbars.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If a user docks a toolbar or moves the toolbar from one row to another within the same dock bar, the framework either creates a new row and resizes the dock bar accordingly, or it positions the toolbar on an existing row.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Mini-frame Windows</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A floating pane resides in a mini-frame window.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Mini-frame windows are represented by two classes: <bpt id="p1">[</bpt>CMDITabInfo Class<ept id="p1">](../mfc/reference/cmditabinfo-class.md)</ept> (which can contain only one pane) and <bpt id="p2">[</bpt>CMultiPaneFrameWnd Class<ept id="p2">](../mfc/reference/cmultipaneframewnd-class.md)</ept> (which can contain several panes).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To float a pane in your code, call <bpt id="p1">[</bpt>CBasePane::FloatPane<ept id="p1">](../mfc/reference/cbasepane-class.md#cbasepane__floatpane)</ept>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>After a pane floats, the framework automatically creates a mini-frame window and that mini-frame window becomes the floating pane's parent.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>When the floating pane docks, the framework resets its parent, and the floating pane becomes a dock bar (for toolbars) or a dock site (for resizable panes).</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Pane Dividers</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Pane dividers (also named sliders or splitters) are represented by the <bpt id="p1">[</bpt>CPaneDivider Class<ept id="p1">](../mfc/reference/cpanedivider-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>When a user docks a pane, the framework creates pane dividers, regardless of whether the pane is docked at the dock site or at another pane.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>When a pane docks to the dock site, the pane divider is called the <bpt id="p1">*</bpt>default pane divider<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The default pane divider is responsible for the layout of all the docking panes in the dock site.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The dock manager maintains a list of default pane dividers, and a list of panes.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Dock managers are responsible for the layout of all the docking panes.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Containers</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>All resizable panes, when docked to each other, are maintained in containers.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Containers are represented by the <bpt id="p1">[</bpt>CPaneContainer Class<ept id="p1">](../mfc/reference/cpanecontainer-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Each container has pointers to its left pane, right pane, left sub-container, right sub-container, and the splitter between the left and right parts.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>(<bpt id="p1">*</bpt>Left<ept id="p1">*</ept> and <bpt id="p2">*</bpt>right<ept id="p2">*</ept> do not refer to physical sides but rather identify the branches of a tree structure.) In this manner we can build a tree of panes and splitters and therefore achieve complex layouts of panes that can be resized together.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CPaneContainer`</ph> class maintains the tree of containers; it also maintains two lists of panes and sliders that reside in this tree.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Pane container managers are usually embedded into default sliders and mini-frame windows that carry multiple panes.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Auto-hide Control Bars</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>By default, each <ph id="ph1">`CDockablePane`</ph> supports the auto-hide feature.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When a user clicks the pin button on the caption of the <ph id="ph1">`CDockablePane`</ph>, the framework switches the pane to auto-hide mode.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>To handle the click, the framework creates a <bpt id="p1">[</bpt>CMFCAutoHideBar Class<ept id="p1">](../mfc/reference/cmfcautohidebar-class.md)</ept> and a <bpt id="p2">[</bpt>CMFCAutoHideButton Class<ept id="p2">](../mfc/reference/cmfcautohidebutton-class.md)</ept> associated with the <ph id="ph1">`CMFCAutoHideBar`</ph> object.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The framework puts the new <ph id="ph1">`CMFCAutoHideBar`</ph> on the <bpt id="p1">[</bpt>CAutoHideDockSite<ept id="p1">](../mfc/reference/cautohidedocksite-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The framework also attaches the <ph id="ph1">`CMFCAutoHideButton`</ph> to the toolbar.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CDockingManager Class<ept id="p1">](../mfc/reference/cdockingmanager-class.md)</ept> maintains the <ph id="ph1">`CDockablePane`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Tabbed Control Bars and Outlook Bars</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCBaseTabCtrl Class<ept id="p1">](../mfc/reference/cmfcbasetabctrl-class.md)</ept> implements the base functionality of a tabbed window with detachable tabs.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To use a <ph id="ph1">`CMFCBaseTabCtrl`</ph> object, initialize a <bpt id="p1">[</bpt>CBaseTabbedPane Class<ept id="p1">](../mfc/reference/cbasetabbedpane-class.md)</ept> in your application.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>is derived from <ph id="ph1">`CDockablePane`</ph> and maintains a pointer to a <ph id="ph2">`CMFCBaseTabCtrl`</ph> object.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CBaseTabbedPane`</ph> enables users to dock and resize tabbed control bars.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CDockablePane::AttachToTabWnd<ept id="p1">](../mfc/reference/cdockablepane-class.md#cdockablepane__attachtotabwnd)</ept> to dynamically create control bars that are docked and tabbed.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The Outlook bar control is also based on tabbed bars.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>CMFCOutlookBar Class<ept id="p1">](../mfc/reference/cmfcoutlookbar-class.md)</ept> is derived from <ph id="ph1">`CBaseTabbedPane`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information about how to use Outlook bar, see <bpt id="p1">[</bpt>CMFCOutlookBar Class<ept id="p1">](../mfc/reference/cmfcoutlookbar-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Concepts</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>