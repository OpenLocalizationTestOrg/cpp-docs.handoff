<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c79716aefc6abbff8030694f21447960087eae79</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\basic-streambuf-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">32831edbacda250c4372f0ccc06905720f37c8f7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0f5dc34b7370000fc54c98877a4eb529ebe718c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>basic_streambuf Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>basic_streambuf Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Describes an abstract base class for deriving a stream buffer, which controls the transmission of elements to and from a specific representation of a stream.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>char_type<ept id="p1">](#basic_streambuf__char_type)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The character <bpt id="p1">[</bpt>traits_type<ept id="p1">](#basic_streambuf__traits_type)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The template class describes an abstract base class for deriving a stream buffer, which controls the transmission of elements to and from a specific representation of a stream.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>An object of class <ph id="ph1">`basic_streambuf`</ph> helps control a stream with elements of type <ph id="ph2">`Tr`</ph>, also known as <bpt id="p1">[</bpt>char_type<ept id="p1">](#basic_streambuf__char_type)</ept>, whose character traits are determined by the class <bpt id="p2">[</bpt>char_traits<ept id="p2">](../standard-library/char-traits-struct.md)</ept>, also known as <bpt id="p3">[</bpt>traits_type<ept id="p3">](#basic_streambuf__traits_type)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Every stream buffer conceptually controls two independent streams: one for extractions (input) and one for insertions (output).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A specific representation may, however, make either or both of these streams inaccessible.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It typically maintains some relationship between the two streams.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>What you insert into the output stream of a <bpt id="p1">[</bpt>basic_stringbuf<ept id="p1">](../standard-library/basic-stringbuf-class.md)</ept><ph id="ph1">&lt; `Elem`</ph>, <ph id="ph2">`Tr`</ph>&gt; object, for example, is what you later extract from its input stream.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When you position one stream of a <bpt id="p1">[</bpt>basic_filebuf<ept id="p1">](../standard-library/basic-filebuf-class.md)</ept><ph id="ph1">&lt; `Elem`</ph>, <ph id="ph2">`Tr`</ph>&gt; object, you position the other stream in tandem.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The public interface to template class <ph id="ph1">`basic_streambuf`</ph> supplies the operations that are common to all stream buffers, however specialized.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The protected interface supplies the operations needed for a specific representation of a stream to do its work.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The protected virtual member functions let you tailor the behavior of a derived stream buffer for a specific representation of a stream.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Each derived stream buffer in this library describes how it specializes the behavior of its protected virtual member functions.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The default behavior for the base class, which is often to do nothing, is described in this topic.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The remaining protected member functions control copying to and from any storage supplied to buffer transmissions to and from streams.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An input buffer, for example, is characterized by:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>eback<ept id="p1">](#basic_streambuf__eback)</ept>, a pointer to the beginning of the buffer.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>gptr<ept id="p1">](#basic_streambuf__gptr)</ept>, a pointer to the next element to read.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>egptr<ept id="p1">](#basic_streambuf__egptr)</ept>, a pointer just past the end of the buffer.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Similarly, an output buffer is characterized by:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pbase<ept id="p1">](#basic_streambuf__pbase)</ept>, a pointer to the beginning of the buffer.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>pptr<ept id="p1">](#basic_streambuf__pptr)</ept>, a pointer to the next element to write.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>epptr<ept id="p1">](#basic_streambuf__epptr)</ept>, a pointer just past the end of the buffer.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For any buffer, the following protocol is used:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If the next pointer is null, no buffer exists.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Otherwise, all three pointers point into the same sequence.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>They can be safely compared for order.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For an output buffer, if the next pointer compares less than the end pointer, you can store an element at the write position designated by the next pointer.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For an input buffer, if the next pointer compares less than the end pointer, you can read an element at the read position designated by the next pointer.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For an input buffer, if the beginning pointer compares less than the next pointer, you can put back an element at the putback position designated by the decremented next pointer.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Any protected virtual member functions you write for a class derived from <ph id="ph1">`basic_streambuf`&lt; `Elem`</ph>, <ph id="ph2">`Tr`</ph>&gt; must cooperate in maintaining this protocol.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An object of class <ph id="ph1">`basic_streambuf`&lt; `Elem`</ph>, <ph id="ph2">`Tr`</ph>&gt; stores the six pointers previously described.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It also stores a locale object in an object of type <bpt id="p1">[</bpt>locale<ept id="p1">](../standard-library/locale-class.md)</ept> for potential use by a derived stream buffer.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>basic_streambuf</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Constructs an object of type <ph id="ph1">`basic_streambuf`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Typedefs</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>char_type</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Associates a type name with the <ph id="ph1">`Elem`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>int_type</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Associates a type name within <ph id="ph1">`basic_streambuf`</ph> scope with the <ph id="ph2">`Elem`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>off_type</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Associates a type name within <ph id="ph1">`basic_streambuf`</ph> scope with the <ph id="ph2">`Elem`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>pos_type</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Associates a type name within <ph id="ph1">`basic_streambuf`</ph> scope with the <ph id="ph2">`Elem`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>traits_type</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Associates a type name with the <ph id="ph1">`Tr`</ph> template parameter.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Member Functions</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>eback</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A protected function that returns a pointer to the beginning of the input buffer.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>egptr</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A protected function that returns a pointer just past the end of the input buffer.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>epptr</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A protected function that returns a pointer just past the end of the output buffer.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>gbump</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>A protected function that adds <ph id="ph1">` count`</ph> to the next pointer for the input buffer.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>getloc</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">`basic_streambuf`</ph> object's locale.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>gptr</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A protected function that returns a pointer to the next element of the input buffer.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>imbue</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>A protected, virtual function called by <bpt id="p1">[</bpt>pubimbue<ept id="p1">](#basic_streambuf__pubimbue)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>in_avail</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Returns the number of elements that are ready to be read from the buffer.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>overflow</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>A protected virtual function that can be called when a new character is inserted into a full buffer.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>pbackfail</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that tries to put back an element into the input stream, then make it the current element (pointed to by the next pointer).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>pbase</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A protected function that returns a pointer to the beginning of the output buffer.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>pbump</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>A protected function that adds <ph id="ph1">`count`</ph> to the next pointer for the output buffer.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>pptr</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>A protected function that returns a pointer to the next element of the output buffer.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>pubimbue</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Sets the <ph id="ph1">`basic_streambuf`</ph> object's locale.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>pubseekoff</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>seekoff<ept id="p1">](#basic_streambuf__seekoff)</ept>, a protected virtual function that is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>pubseekpos</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>seekpos<ept id="p1">](#basic_streambuf__seekpos)</ept>, a protected virtual function that is overridden in a derived class and resets the current pointer position.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>pubsetbuf</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>setbuf<ept id="p1">](#basic_streambuf__setbuf)</ept>, a protected virtual function that is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>pubsync</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>sync<ept id="p1">](#basic_streambuf__sync)</ept>, a protected virtual function that is overridden in a derived class and updates the external stream associated with this buffer.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>sbumpc</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Reads and returns the current element, moving the stream pointer.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>seekoff</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The protected virtual member function tries to alter the current positions for the controlled streams.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>seekpos</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The protected virtual member function tries to alter the current positions for the controlled streams.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>setbuf</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The protected virtual member function performs an operation particular to each derived stream buffer.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>setg</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A protected function that stores <ph id="ph1">`_Gbeg`</ph> in the beginning pointer, <ph id="ph2">`_Gnext`</ph> in the next pointer, and <ph id="ph3">`_Gend`</ph> in the end pointer for the input buffer.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>setp</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>A protected function that stores <ph id="ph1">`_Pbeg`</ph> in the beginning pointer and <ph id="ph2">`_Pend`</ph> in the end pointer for the output buffer.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>sgetc</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Returns current element without changing position in the stream.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>sgetn</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Returns the number of elements read.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>showmanyc</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Protected virtual member function that returns a count of the number of characters that can be extracted from the input stream and ensure that the program will not be subject to an indefinite wait.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>snextc</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Reads the current element and returns the following element.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>sputbackc</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Puts a <ph id="ph1">`char_type`</ph> in the stream.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>sputc</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Puts a character into the stream.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>sputn</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Puts a character string into the stream.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>stossc</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>Move past the current element in the stream.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>sungetc</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Gets a character from the stream.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Exchanges the values in this object for the values in the provided <ph id="ph1">`basic_streambuf`</ph> object parameter.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>sync</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A protected virtual function that tries to synchronize the controlled streams with any associated external streams.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>uflow</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>A protected virtual function that extracts the current element from the input stream.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>underflow</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A protected virtual function that extracts the current element from the input stream.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>xsgetn</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A protected virtual function that extracts elements from the input stream.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>xsputn</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>A protected virtual function that inserts elements into the output stream.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>operator=</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Assigns the values of this object from another <ph id="ph1">`basic_streambuf`</ph> object.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>streambuf&gt;</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>basic_streambuf::basic_streambuf</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Constructs an object of type <ph id="ph1">`basic_streambuf`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>An lvalue reference to the <ph id="ph1">`basic_streambuf`</ph> object that is used to set the values for this <ph id="ph2">`basic_streambuf`</ph> object.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The first protected constructor stores a null pointer in all pointers controlling the input buffer and the output buffer.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>It also stores <ph id="ph1">`locale::classic`</ph> in the locale object.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>locale::classic<ept id="p1">](../standard-library/locale-class.md#locale__classic)</ept>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The second protected constructor copies the pointers and locale from <ph id="ph1">` right`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>basic_streambuf::char_type</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Associates a type name with the <bpt id="p1">**</bpt>Elem<ept id="p1">**</ept> template parameter.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>basic_streambuf::eback</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A protected function that returns a pointer to the beginning of the input buffer.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>A pointer to the beginning of the input buffer.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>basic_streambuf::egptr</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A protected function that returns a pointer just past the end of the input buffer.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A pointer just past the end of the input buffer.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>basic_streambuf::epptr</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A protected function that returns a pointer just past the end of the output buffer.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A pointer just past the end of the output buffer.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>basic_streambuf::gbump</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>A protected function that adds <ph id="ph1">` count`</ph> to the next pointer for the input buffer.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>The amount by which to advance the pointer.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>basic_streambuf::getloc</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Gets the basic_streambuf object's locale.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The stored locale object.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>For related information, see <bpt id="p1">[</bpt>ios_base::getloc<ept id="p1">](../standard-library/ios-base-class.md#ios_base__getloc)</ept>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>basic_streambuf::gptr</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A protected function that returns a pointer to the next element of the input buffer.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>A pointer to the next element of the input buffer.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>basic_streambuf::imbue</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A protected virtual function called by <bpt id="p1">[</bpt>pubimbue<ept id="p1">](#basic_streambuf__pubimbue)</ept>.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>A reference to a locale.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The default behavior is to do nothing.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>basic_streambuf::in_avail</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Returns the number of elements that are ready to be read from the buffer.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The number of elements that are ready to be read from the buffer.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>If a <bpt id="p1">[</bpt>read position<ept id="p1">](../standard-library/basic-streambuf-class.md)</ept> is available, the member function returns <bpt id="p2">[</bpt>egptr<ept id="p2">](#basic_streambuf__egptr)</ept> – <bpt id="p3">[</bpt>gptr<ept id="p3">](#basic_streambuf__gptr)</ept>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns <bpt id="p1">[</bpt>showmanyc<ept id="p1">](#basic_streambuf__showmanyc)</ept>.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>basic_streambuf::int_type</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Associates a type name within basic_streambuf scope with one of the types in a template parameter.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>basic_streambuf::off_type</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Associates a type name within basic_streambuf scope with one of the types in a template parameter.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>basic_streambuf::operator=</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Assigns the values of this object from another <ph id="ph1">`basic_streambuf`</ph> object.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>An lvalue reference to the <ph id="ph1">`basic_streambuf`</ph> object that is used to assign values to this object.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>The protected member operator copies from <ph id="ph1">` right`</ph> the pointers that control the input buffer and the output buffer.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>It also stores <ph id="ph1">` right``.`</ph><bpt id="p1">[</bpt>getloc()<ept id="p1">](#basic_streambuf__getloc)</ept> in the <ph id="ph2">`locale object`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>It returns <ph id="ph1">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>basic_streambuf::overflow</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>A protected virtual function that can be called when a new character is inserted into a full buffer.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The character to insert into the buffer, or <bpt id="p1">**</bpt>traits_type::<ept id="p1">**</ept><bpt id="p2">[</bpt>eof<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>If the function cannot succeed, it returns <bpt id="p1">**</bpt>traits_type::eof<ept id="p1">**</ept> or throws an exception.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns <bpt id="p1">**</bpt>traits_type::<ept id="p1">**</ept><bpt id="p2">[</bpt>not_eof<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__not_eof)</ept>(_ <bpt id="p3">*</bpt>Meta<ept id="p3">*</ept>).</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>The default behavior is to return <bpt id="p1">**</bpt>traits_type::eof<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>If _ <bpt id="p1">*</bpt>Meta<ept id="p1">*</ept> does not compare equal to <bpt id="p2">**</bpt>traits_type::eof<ept id="p2">**</ept>, the protected virtual member function endeavors to insert the element <bpt id="p3">**</bpt>traits_type::<ept id="p3">**</ept><bpt id="p4">[</bpt>to_char_type<ept id="p4">](../standard-library/char-traits-struct.md#char_traits__to_char_type)</ept>(<ph id="ph1">\_</ph> <bpt id="p5">*</bpt>Meta<ept id="p5">*</ept>) into the output stream.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>It can do so in various ways:</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`write position`</ph> is available, it can store the element into the write position and increment the next pointer for the output buffer.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>It can make a write position available by allocating new or additional storage for the output buffer.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>It can make a write position available by writing out, to some external destination, some or all of the elements between the beginning and next pointers for the output buffer.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The virtual overflow function, together with the <bpt id="p1">[</bpt>sync<ept id="p1">](#basic_streambuf__sync)</ept> and <bpt id="p2">[</bpt>underflow<ept id="p2">](#basic_streambuf__underflow)</ept> functions, defines the characteristics of the streambuf-derived class.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>Each derived class might implement overflow differently, but the interface with the calling stream class is the same.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`overflow`</ph> function is most frequently called by public <ph id="ph2">`streambuf`</ph> functions like <ph id="ph3">`sputc`</ph> and <ph id="ph4">`sputn`</ph> when the put area is full, but other classes, including the stream classes, can call <ph id="ph5">`overflow`</ph> anytime.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The function consumes the characters in the put area between the <ph id="ph1">`pbase`</ph> and <ph id="ph2">`pptr`</ph> pointers and then reinitializes the put area.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`overflow`</ph> function must also consume <ph id="ph2">`nCh`</ph> (if <ph id="ph3">`nCh`</ph> is not <ph id="ph4">`EOF`</ph>), or it might choose to put that character in the new put area so that it will be consumed on the next call.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The definition of consume varies among derived classes.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`filebuf`</ph> class writes its characters to a file, while the <ph id="ph2">`strstreambuf`</ph> class keeps them in its buffer and (if the buffer is designated as dynamic) expands the buffer in response to a call to overflow.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>This expansion is achieved by freeing the old buffer and replacing it with a new, larger one.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>The pointers are adjusted as necessary.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>basic_streambuf::pbackfail</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that tries to put back an element into the input stream, then make it the current element (pointed to by the next pointer).</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>The character to insert into the buffer, or <bpt id="p1">**</bpt>traits_type::<ept id="p1">**</ept><bpt id="p2">[</bpt>eof<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>If the function cannot succeed, it returns <bpt id="p1">**</bpt>traits_type::eof<ept id="p1">**</ept> or throws an exception.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns some other value.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>The default behavior is to return <bpt id="p1">**</bpt>traits_type::eof<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>If _ <bpt id="p1">*</bpt>Meta<ept id="p1">*</ept> compares equal to <bpt id="p2">**</bpt>traits_type::eof<ept id="p2">**</ept>, the element to push back is effectively the one already in the stream before the current element.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Otherwise, that element is replaced by <bpt id="p1">**</bpt>traits_type::<ept id="p1">**</ept><bpt id="p2">[</bpt>to_char_type<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__to_char_type)</ept>(<ph id="ph1">\_</ph> <bpt id="p3">*</bpt>Meta<ept id="p3">*</ept>).</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>The function can put back an element in various ways:</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>If a putback position is available, it can store the element into the putback position and decrement the next pointer for the input buffer.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>It can make a putback position available by allocating new or additional storage for the input buffer.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>For a stream buffer with common input and output streams, it can make a putback position available by writing out, to some external destination, some or all of the elements between the beginning and next pointers for the output buffer.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>basic_streambuf::pbase</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>A protected function that returns a pointer to the beginning of the output buffer.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>A pointer to the beginning of the output buffer.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>basic_streambuf::pbump</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>A protected function that adds <ph id="ph1">` count`</ph> to the next pointer for the output buffer.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>The number of characters by which to move the write position forward.</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>basic_streambuf::pos_type</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Associates a type name within basic_streambuf scope with one of the types in a template parameter.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>basic_streambuf::pptr</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>A protected function that returns a pointer to the next element of the output buffer.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>A pointer to the next element of the output buffer.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>basic_streambuf::pubimbue</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Sets the basic_streambuf object's locale.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>A reference to a locale.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>The previous value stored in the locale object.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The member function stores _ <bpt id="p1">*</bpt>Loc<ept id="p1">*</ept> in the locale object and calls <bpt id="p2">[</bpt>imbue<ept id="p2">](#basic_streambuf__imbue)</ept>.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>basic_ios::imbue<ept id="p1">](../standard-library/basic-ios-class.md#basic_ios__imbue)</ept> for an example that uses <ph id="ph1">`pubimbue`</ph>.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>basic_streambuf::pubseekoff</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>seekoff<ept id="p1">](#basic_streambuf__seekoff)</ept>, a protected virtual function that is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>The position to seek for relative to <ph id="ph1">`_Way`</ph>.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The starting point for offset operations.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>seekdir<ept id="p1">](../standard-library/ios-base-class.md#ios_base__seekdir)</ept> for possible values.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>Specifies the mode for the pointer position.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>The default is to allow you to modify the read and write positions.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>Returns the new position or an invalid stream position ( <bpt id="p1">[</bpt>seekoff<ept id="p1">](#basic_streambuf__seekoff)</ept>(_ <bpt id="p2">*</bpt>Off<ept id="p2">*</ept>, <ph id="ph1">`_Way`</ph>, <ph id="ph2">`_Which`</ph>) ).</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>Moves the pointer relative to <ph id="ph1">`_Way`</ph>.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>basic_streambuf::pubseekpos</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>seekpos<ept id="p1">](#basic_streambuf__seekpos)</ept>, a protected virtual function that is overridden in a derived class, and resets the current pointer position.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>The position to seek for.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>Specifies the mode for the pointer position.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>The default is to allow you to modify the read and write positions.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>The new position or an invalid stream position.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>To determine if the stream position is invalid, compare the return value with <ph id="ph1">`pos_type(off_type(-1))`</ph>.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>seekpos<ept id="p1">](#basic_streambuf__seekpos)</ept>(_ <bpt id="p2">*</bpt>Sp<ept id="p2">*</ept>, <ph id="ph1">`_Which`</ph>).</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>basic_streambuf::pubsetbuf</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>setbuf<ept id="p1">](#basic_streambuf__setbuf)</ept>, a protected virtual function that is overridden in a derived class.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>A pointer to <ph id="ph1">`char_type`</ph> for this instantiation.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>The size of the buffer.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">[</bpt>setbuf<ept id="p1">](#basic_streambuf__setbuf)</ept>( <ph id="ph1">`_Buffer`</ph>, <ph id="ph2">` count`</ph>).</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>basic_streambuf::pubsync</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Calls <bpt id="p1">[</bpt>sync<ept id="p1">](#basic_streambuf__sync)</ept>, a protected virtual function that is overridden in a derived class, and updates the external stream associated with this buffer.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Returns <bpt id="p1">[</bpt>sync<ept id="p1">](#basic_streambuf__sync)</ept> or –1 if failure.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>basic_streambuf::sbumpc</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Reads and returns the current element, moving the stream pointer.</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>The current element.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>If a read position is available, the member function returns <bpt id="p1">**</bpt>traits_type::<ept id="p1">**</ept><bpt id="p2">[</bpt>to_int_type<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <bpt id="p3">**</bpt><ph id="ph1">\*</ph><ept id="p3">**</ept><bpt id="p4">[</bpt>gptr<ept id="p4">](#basic_streambuf__gptr)</ept>) and increments the next pointer for the input buffer.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns <bpt id="p1">[</bpt>uflow<ept id="p1">](#basic_streambuf__uflow)</ept>.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>basic_streambuf::seekoff</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that tries to alter the current positions for the controlled streams.</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>The position to seek for relative to <ph id="ph1">`_Way`</ph>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>The starting point for offset operations.</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>seekdir<ept id="p1">](../standard-library/ios-base-class.md#ios_base__seekdir)</ept> for possible values.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>Specifies the mode for the pointer position.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>The default is to allow you to modify the read and write positions.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>Returns the new position or an invalid stream position ( <ph id="ph1">`seekoff`</ph> (_ <bpt id="p1">*</bpt>Off<ept id="p1">*</ept>, <ph id="ph2">`_Way`</ph>, <ph id="ph3">`_Which`</ph>) ).</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>The new position is determined as follows:</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_Way` == `ios_base::beg`</ph>, the new position is the beginning of the stream plus _ <bpt id="p1">*</bpt>Off<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_Way` == `ios_base::cur`</ph>, the new position is the current stream position plus _ <bpt id="p1">*</bpt>Off<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_Way` == `ios_base::end`</ph>, the new position is the end of the stream plus _ <bpt id="p1">*</bpt>Off<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>Typically, if <bpt id="p1">**</bpt>which &amp; ios_base::in<ept id="p1">**</ept> is nonzero, the input stream is affected, and if <bpt id="p2">**</bpt>which &amp; ios_base::out<ept id="p2">**</ept> is nonzero, the output stream is affected.</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Actual use of this parameter varies among derived stream buffers, however.</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>If the function succeeds in altering the stream position or positions, it returns the resulting stream position or one of the resulting stream positions.</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns an invalid stream position.</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>The default behavior is to return an invalid stream position.</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>basic_streambuf::seekpos</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that tries to alter the current positions for the controlled streams.</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>The position to seek for.</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>Specifies the mode for the pointer position.</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>The default is to allow you to modify the read and write positions.</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>The new position, or an invalid stream position.</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>To determine if the stream position is invalid, compare the return value with <ph id="ph1">`pos_type(off_type(-1))`</ph>.</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>The new position is _ <bpt id="p1">*</bpt>Sp<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>Typically, if <bpt id="p1">**</bpt>which &amp; ios_base::in<ept id="p1">**</ept> is nonzero, the input stream is affected, and if <bpt id="p2">**</bpt>which &amp; ios_base::out<ept id="p2">**</ept> is nonzero, the output stream is affected.</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>Actual use of this parameter varies among derived stream buffers, however.</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>If the function succeeds in altering the stream position or positions, it returns the resulting stream position or one of the resulting stream positions.</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns an invalid stream position (-1).</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>The default behavior is to return an invalid stream position.</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>basic_streambuf::setbuf</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that performs an operation particular to each derived stream buffer.</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>Pointer to a buffer.</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>Size of the buffer.</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>The default behavior is to return <bpt id="p1">**</bpt>this<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>basic_filebuf<ept id="p1">](../standard-library/basic-filebuf-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>provides an area of memory for the <ph id="ph1">`streambuf`</ph> object to use.</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>How the buffer is used in defined in the derived classes.</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>basic_streambuf::setg</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>A protected function that stores _ <bpt id="p1">*</bpt>Gbeg<ept id="p1">*</ept> in the beginning pointer, <ph id="ph1">`_Gnext`</ph> in the next pointer, and <ph id="ph2">`_Gend`</ph> in the end pointer for the input buffer.</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>_Gbeg</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>A pointer to the beginning of the buffer.</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>A pointer to somewhere in the middle of the buffer.</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>A pointer to the end of the buffer.</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>basic_streambuf::setp</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>A protected function that stores <ph id="ph1">`_Pbeg`</ph> in the beginning pointer and <ph id="ph2">`_Pend`</ph> in the end pointer for the output buffer.</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>A pointer to the beginning of the buffer.</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>A pointer to the end of the buffer.</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>basic_streambuf::sgetc</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>Returns current element without changing position in the stream.</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>The current element.</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>If a read position is available, the member function returns <bpt id="p1">**</bpt>traits_type::<ept id="p1">**</ept><bpt id="p2">[</bpt>to_int_type<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <ph id="ph1">`*`</ph><bpt id="p3">[</bpt>gptr<ept id="p3">](#basic_streambuf__gptr)</ept>).</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns <bpt id="p1">[</bpt>underflow<ept id="p1">](#basic_streambuf__underflow)</ept>.</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>basic_streambuf::sgetn</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>Extracts up to <ph id="ph1">` count`</ph> characters from the input buffer and stores them in the provided buffer <ph id="ph2">` ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>This method is potentially unsafe, as it relies on the caller to check that the passed values are correct.</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>The buffer to contain the extracted characters.</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>The number of elements to read.</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>The number of elements read.</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>streamsize<ept id="p1">](../standard-library/ios-typedefs.md#streamsize)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>xsgetn<ept id="p1">](#basic_streambuf__xsgetn)</ept>( <ph id="ph1">` ptr`</ph>, <ph id="ph2">` count`</ph>).</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>basic_streambuf::showmanyc</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>A protected virtual member function that returns a count of the number of characters that can be extracted from the input stream and ensure that the program will not be subject to an indefinite wait.</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>The default behavior is to return zero.</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>basic_streambuf::snextc</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>Reads the current element and returns the following element.</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>The next element in the stream.</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>The member function calls <bpt id="p1">[</bpt>sbumpc<ept id="p1">](#basic_streambuf__sbumpc)</ept> and, if that function returns <bpt id="p2">**</bpt>traits_type::<ept id="p2">**</ept><bpt id="p3">[</bpt>eof<ept id="p3">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>, returns <bpt id="p4">**</bpt>traits_type::eof<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns <bpt id="p1">[</bpt>sgetc<ept id="p1">](#basic_streambuf__sgetc)</ept>.</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>basic_streambuf::sputbackc</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>Puts a char_type in the stream.</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>The character.</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>Returns the character or failure.</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>If a putback position is available and <ph id="ph1">`_Ch`</ph> compares equal to the character stored in that position, the member function decrements the next pointer for the input buffer and returns <bpt id="p1">**</bpt>traits_type::<ept id="p1">**</ept><bpt id="p2">[</bpt>to_int_type<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <ph id="ph2">`_Ch`</ph>).</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns <bpt id="p1">[</bpt>pbackfail<ept id="p1">](#basic_streambuf__pbackfail)</ept>( <ph id="ph1">`_Ch`</ph>).</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>basic_streambuf::sputc</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>Puts a character into the stream.</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>The character.</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Returns the character, if successful.</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>If a <ph id="ph1">`write position`</ph> is available, the member function stores <ph id="ph2">`_Ch`</ph> in the write position, increments the next pointer for the output buffer, and returns <bpt id="p1">**</bpt>traits_type::<ept id="p1">**</ept><bpt id="p2">[</bpt>to_int_type<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <ph id="ph3">`_Ch`</ph>).</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns <bpt id="p1">[</bpt>overflow<ept id="p1">](#basic_streambuf__overflow)</ept>( <ph id="ph1">`_Ch`</ph>).</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>basic_streambuf::sputn</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>Puts a character string into the stream.</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>The character string.</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>The count of characters.</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>The number of characters actually inserted into the stream.</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>The member function returns <bpt id="p1">[</bpt>xsputn<ept id="p1">](#basic_streambuf__xsputn)</ept>( <ph id="ph1">` ptr`</ph>, <ph id="ph2">` count`</ph>).</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>See the Remarks section of this member for more information.</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>basic_streambuf::stossc</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>Move past the current element in the stream.</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>The member function calls <bpt id="p1">[</bpt>sbumpc<ept id="p1">](#basic_streambuf__sbumpc)</ept>.</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>Note that an implementation is not required to supply this member function.</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>basic_streambuf::sungetc</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>Gets a character from the stream.</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>Returns either the character or failure.</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>If a putback position is available, the member function decrements the next pointer for the input buffer and returns <ph id="ph1">`traits_type::`</ph><bpt id="p1">[</bpt>to_int_type<ept id="p1">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <ph id="ph2">`*`</ph><bpt id="p2">[</bpt>gptr<ept id="p2">](#basic_streambuf__gptr)</ept>).</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>However, it is not always possible to determine the last character read so that it can be captured in the state of the current buffer.</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>If this is true, then the function returns <bpt id="p1">[</bpt>pbackfail<ept id="p1">](#basic_streambuf__pbackfail)</ept>.</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>To avoid this situation, keep track of the character to put back and call <ph id="ph1">`sputbackc(ch)`</ph>, which will not fail provided you don't call it at the beginning of the stream and you don't try to put back more than one character.</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>basic_streambuf::swap</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>Exchanges the values in this object for the values in the provided <ph id="ph1">`basic_streambuf`</ph> object.</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>An lvalue reference to the <ph id="ph1">`basic_streambuf`</ph> object that is used to exchange values.</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>The protected member function exchanges with <ph id="ph1">` right`</ph> all the pointers controlling the <ph id="ph2">`input buffer`</ph> and the <ph id="ph3">`output buffer`</ph>.</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>It also exchanges <ph id="ph1">` right``.`</ph><bpt id="p1">[</bpt>getloc()<ept id="p1">](#basic_streambuf__getloc)</ept> with the <ph id="ph2">`locale`</ph> object.</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>basic_streambuf::sync</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>A protected virtual function that tries to synchronize the controlled streams with any associated external streams.</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>If the function cannot succeed, it returns -1.</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>The default behavior is to return zero.</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>involves writing out any elements between the beginning and next pointers for the output buffer.</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>It does not involve putting back any elements between the next and end pointers for the input buffer.</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>basic_streambuf::traits_type</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>Associates a type name with the <bpt id="p1">**</bpt>Tr<ept id="p1">**</ept> template parameter.</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>basic_streambuf::uflow</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>A protected virtual function that extracts the current element from the input stream.</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>The current element.</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>The protected virtual member function tries to extract the current element <bpt id="p1">**</bpt>ch<ept id="p1">**</ept> from the input stream, then advance the current stream position, and return the element as <bpt id="p2">**</bpt>traits_type::<ept id="p2">**</ept><bpt id="p3">[</bpt>to_int_type<ept id="p3">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <bpt id="p4">**</bpt>ch<ept id="p4">**</ept>).</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>It can do so in various ways:</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>If a read position is available, it takes <bpt id="p1">**</bpt>ch<ept id="p1">**</ept> as the element stored in the read position and advances the next pointer for the input buffer.</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>It can read an element directly, from some external source, and deliver it as the value <bpt id="p1">**</bpt>ch<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>For a stream buffer with common input and output streams, it can make a read position available by writing out, to some external destination, some or all of the elements between the beginning and next pointers for the output buffer.</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>Or it can allocate new or additional storage for the input buffer.</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>The function then reads in, from some external source, one or more elements.</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>If the function cannot succeed, it returns <bpt id="p1">**</bpt>traits_type::<ept id="p1">**</ept><bpt id="p2">[</bpt>eof<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__eof)</ept>, or throws an exception.</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns the current element <ph id="ph1">`ch`</ph> in the input stream, converted as described above, and advances the next pointer for the input buffer.</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>The default behavior is to call <bpt id="p1">[</bpt>underflow<ept id="p1">](#basic_streambuf__underflow)</ept> and, if that function returns <bpt id="p2">**</bpt>traits_type::eof<ept id="p2">**</ept>, to return <bpt id="p3">**</bpt>traits_type::eof<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>Otherwise, the function returns the current element <bpt id="p1">**</bpt>ch<ept id="p1">**</ept> in the input stream, converted as previously described, and advances the next pointer for the input buffer.</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>basic_streambuf::underflow</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>Protected, virtual function to extract the current element from the input stream.</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>The current element.</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>The protected virtual member function endeavors to extract the current element <bpt id="p1">**</bpt>ch<ept id="p1">**</ept> from the input stream, without advancing the current stream position, and return it as <ph id="ph1">`traits_type::`</ph><bpt id="p2">[</bpt>to_int_type<ept id="p2">](../standard-library/char-traits-struct.md#char_traits__to_int_type)</ept>( <bpt id="p3">**</bpt>ch<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>It can do so in various ways:</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>If a read position is available, <bpt id="p1">**</bpt>ch<ept id="p1">**</ept> is the element stored in the read position.</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>For more information on this, see the Remarks section of the <bpt id="p1">[</bpt>basic_streambuf Class<ept id="p1">](../standard-library/basic-streambuf-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>It can make a read position available by allocating new or additional storage for the input buffer, then reading in, from some external source, one or more elements.</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>For more information on this, see the Remarks section of the <bpt id="p1">[</bpt>basic_streambuf Class<ept id="p1">](../standard-library/basic-streambuf-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>If the function cannot succeed, it returns <ph id="ph1">`traits_type::`</ph><bpt id="p1">[</bpt>eof<ept id="p1">](../standard-library/char-traits-struct.md#char_traits__eof)</ept><ph id="ph2">`()`</ph> or throws an exception.</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns the current element in the input stream, converted as previously described.</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>The default behavior is to return <ph id="ph1">`traits_type::eof()`</ph>.</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>The virtual <ph id="ph1">`underflow`</ph> function, with the <bpt id="p1">[</bpt>sync<ept id="p1">](#basic_streambuf__sync)</ept> and <bpt id="p2">[</bpt>overflow<ept id="p2">](#basic_streambuf__overflow)</ept> functions, defines the characteristics of the <ph id="ph2">`streambuf`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>Each derived class might implement <ph id="ph1">`underflow`</ph> differently, but the interface with the calling stream class is the same.</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`underflow`</ph> function is most frequently called by public <ph id="ph2">`streambuf`</ph> functions like <bpt id="p1">[</bpt>sgetc<ept id="p1">](#basic_streambuf__sgetc)</ept> and <bpt id="p2">[</bpt>sgetn<ept id="p2">](#basic_streambuf__sgetn)</ept> when the get area is empty, but other classes, including the stream classes, can call <ph id="ph3">`underflow`</ph> anytime.</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`underflow`</ph> function supplies the get area with characters from the input source.</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>If the get area contains characters, <ph id="ph1">`underflow`</ph> returns the first character.</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>If the get area is empty, it fills the get area and returns the next character (which it leaves in the get area).</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>If there are no more characters available, then <ph id="ph1">`underflow`</ph> returns <ph id="ph2">`EOF`</ph> and leaves the get area empty.</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`strstreambuf`</ph> class, <ph id="ph2">`underflow`</ph> adjusts the <bpt id="p1">[</bpt>egptr<ept id="p1">](#basic_streambuf__egptr)</ept> pointer to access storage that was dynamically allocated by a call to <ph id="ph3">`overflow`</ph>.</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>basic_streambuf::xsgetn</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>Protected, virtual function to extract elements from the input stream.</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>This method is potentially unsafe, as it relies on the caller to check that the passed values are correct.</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>The buffer to contain the extracted characters.</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>The number of elements to extract.</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>The number of elements extracted.</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>The protected virtual member function extracts up to <ph id="ph1">` count`</ph> elements from the input stream, as if by repeated calls to <bpt id="p1">[</bpt>sbumpc<ept id="p1">](#basic_streambuf__sbumpc)</ept>, and stores them in the array beginning at <ph id="ph2">` ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>It returns the number of elements actually extracted.</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>basic_streambuf::xsputn</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Protected, virtual function to insert elements into the output stream.</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>Pointer to elements to insert.</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Number of elements to insert.</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>The number of elements actually inserted into the stream.</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>The protected virtual member function inserts up to <ph id="ph1">` count`</ph> elements into the output stream, as if by repeated calls to <bpt id="p1">[</bpt>sputc<ept id="p1">](#basic_streambuf__sputc)</ept>, from the array beginning at <ph id="ph2">` ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>The insertion of characters into the output stream stops once all <ph id="ph1">` count`</ph> characters have been written, or if calling <ph id="ph2">`sputc( count)`</ph> would return <ph id="ph3">`traits::eof()`</ph>.</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>It returns the number of elements actually inserted.</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>iostream Programming</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>iostreams Conventions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>