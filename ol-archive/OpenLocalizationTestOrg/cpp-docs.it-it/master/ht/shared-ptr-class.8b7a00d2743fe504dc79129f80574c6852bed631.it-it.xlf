<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">002aabd56c7cf059dae3298e9145264509dd8b4a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\shared-ptr-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2240fea85b81de4a94e16bc850582831ac66a71a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52afe82aa181533a83d6a2714e5732618c07ece2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>shared_ptr Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>shared_ptr Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Wraps a reference-counted smart pointer around a dynamically allocated object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The shared_ptr class describes an object that uses reference counting to manage resources.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`shared_ptr`</ph> object effectively holds a pointer to the resource that it owns or holds a null pointer.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A resource can be owned by more than one <ph id="ph1">`shared_ptr`</ph> object; when the last <ph id="ph2">`shared_ptr`</ph> object that owns a particular resource is destroyed, the resource is freed.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`shared_ptr`</ph> stops owning a resource when it is reassigned or reset.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The template argument <ph id="ph1">`T`</ph> might be an incomplete type except as noted for certain member functions.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`shared_ptr&lt;T&gt;`</ph> object is constructed from a resource pointer of type <ph id="ph2">`G*`</ph> or from a <ph id="ph3">`shared_ptr&lt;G&gt;`</ph>, the pointer type <ph id="ph4">`G*`</ph> must be convertible to <ph id="ph5">`T*`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If it is not, the code will not compile.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>class F {};</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`shared_ptr`</ph> object owns a resource:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>if it was constructed with a pointer to that resource,</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>if it was constructed from a <ph id="ph1">`shared_ptr`</ph> object that owns that resource,</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>if it was constructed from a <bpt id="p1">[</bpt>weak_ptr Class<ept id="p1">](../standard-library/weak-ptr-class.md)</ept> object that points to that resource, or</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>if ownership of that resource was assigned to it, either with <bpt id="p1">[</bpt>shared_ptr::operator=<ept id="p1">](#shared_ptr__operator_eq)</ept> or by calling the member function <bpt id="p2">[</bpt>shared_ptr::reset<ept id="p2">](#shared_ptr__reset)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`shared_ptr`</ph> objects that own a resource share a control block.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The control block holds:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>the number of <ph id="ph1">`shared_ptr`</ph> objects that own the resource,</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>the number of <ph id="ph1">`weak_ptr`</ph> objects that point to the resource,</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>the deleter for that resource if it has one,</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>the custom allocator for the control block if it has one.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`shared_ptr`</ph> object that is initialized by using a null pointer has a control block and is not empty.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>After a <ph id="ph1">`shared_ptr`</ph> object releases a resource, it no longer owns that resource.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>After a <ph id="ph1">`weak_ptr`</ph> object releases a resource, it no longer points to that resource.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When the number of <ph id="ph1">`shared_ptr`</ph> objects that own a resource becomes zero, the resource is freed, either by deleting it or by passing its address to a deleter, depending on how ownership of the resource was originally created.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When the number of <ph id="ph1">`shared_ptr`</ph> objects that own a resource is zero, and the number of <ph id="ph2">`weak_ptr`</ph> objects that point to that resource is zero, the control block is freed, using the custom allocator for the control block if it has one.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>An empty <ph id="ph1">`shared_ptr`</ph> object does not own any resources and has no control block.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A deleter is a function object that has a member function <ph id="ph1">`operator()`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Its type must be copy constructible, and its copy constructor and destructor must not throw exceptions.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>It accepts one parameter, the object to be deleted.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Some functions take an argument list that defines properties of the resulting <ph id="ph1">`shared_ptr&lt;T&gt;`</ph> or <ph id="ph2">`weak_ptr&lt;T&gt;`</ph> object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You can specify such an argument list in several ways:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>no arguments -- the resulting object is an empty <ph id="ph1">`shared_ptr`</ph> object or an empty <ph id="ph2">`weak_ptr`</ph> object.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>-- a pointer of type <ph id="ph1">`Other*`</ph> to the resource to be managed.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>must be a complete type.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If the function fails (because the control block cannot be allocated) it evaluates the expression <ph id="ph1">`delete ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>-- a pointer of type <ph id="ph1">`Other*`</ph> to the resource to be managed and a deleter for that resource.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If the function fails (because the control block cannot be allocated), it calls <ph id="ph1">`dtor(ptr)`</ph>, which must be well defined.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>-- a pointer of type <ph id="ph1">`Other*`</ph> to the resource to be managed, a deleter for that resource, and an allocator to manage any storage that must be allocated and freed.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>If the function fails (because the control block can't be allocated) it calls <ph id="ph1">`dtor(ptr)`</ph>, which must be well defined.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>-- a <ph id="ph1">`shared_ptr&lt;Other&gt;`</ph> object that owns the resource to be managed.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>-- a <ph id="ph1">`weak_ptr&lt;Other&gt;`</ph> object that points to the resource to be managed.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>-- an <ph id="ph1">`auto_ptr&lt;Other&gt;`</ph> object that holds a pointer to the resource to be managed.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If the function succeeds it calls <ph id="ph1">`ap.release()`</ph>; otherwise it leaves <ph id="ph2">`ap`</ph> unchanged.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>In all cases, the pointer type <ph id="ph1">`Other*`</ph> must be convertible to <ph id="ph2">`T*`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Thread Safety</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Multiple threads can read and write different <ph id="ph1">`shared_ptr`</ph> objects at the same time, even when the objects are copies that share ownership.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>shared_ptr::shared_ptr</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`shared_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>shared_ptr::~shared_ptr</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Destroys a <ph id="ph1">`shared_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Methods</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>shared_ptr::element_type</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The type of an element.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>shared_ptr::get</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Gets address of owned resource.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>shared_ptr::owner_before</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Returns true if this <ph id="ph1">`shared_ptr`</ph> is ordered before (or less than) the provided pointer.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>shared_ptr::reset</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Replace owned resource.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>shared_ptr::swap</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Swaps two <ph id="ph1">`shared_ptr`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>shared_ptr::unique</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Tests if owned resource is unique.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>shared_ptr::use_count</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Counts numbers of resource owners.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>shared_ptr::operator boolean-type</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Tests if an owned resource exists.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>shared_ptr::operator*</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Gets the designated value.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>shared_ptr::operator=</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Replaces the owned resource.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>shared_ptr::operator-</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Gets a pointer to the designated value.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> &lt;memory</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>shared_ptr::element_type</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The type of an element.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <ph id="ph1">`T`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>shared_ptr::get</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Gets address of owned resource.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The member function returns the address of the owned resource.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If the object does not own a resource it returns 0.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>shared_ptr::operator boolean-type</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Tests if an owned resource exists.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The operator returns a value of a type that is convertible to <ph id="ph1">`bool`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>The result of the conversion to <ph id="ph1">`bool`</ph> is <ph id="ph2">`true`</ph> when <ph id="ph3">`get() != 0`</ph>, otherwise <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>shared_ptr::operator*</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Gets the designated value.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The indirection operator returns <ph id="ph1">`*get()`</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Hence, the stored pointer must not be null.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>shared_ptr::operator=</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Replaces the owned resource.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The shared pointer to copy.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The auto pointer to copy.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The operators all decrement the reference count for the resource currently owned by <ph id="ph1">`*this`</ph> and assign ownership of the resource named by the operand sequence to <ph id="ph2">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>If the reference count falls to zero, the resource is released.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>If an operator fails it leaves <ph id="ph1">`*this`</ph> unchanged.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>shared_ptr::operator-</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Gets a pointer to the designated value.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The selection operator returns <ph id="ph1">`get()`</ph>, so that the expression <ph id="ph2">`sp-&gt;member`</ph> behaves the same as <ph id="ph3">`(sp.get())-&gt;member`</ph> where <ph id="ph4">`sp`</ph> is an object of class <ph id="ph5">`shared_ptr&lt;T&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Hence, the stored pointer must not be null, and <ph id="ph1">`T`</ph> must be a class, structure, or union type with a member <ph id="ph2">`member`</ph>.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>shared_ptr::owner_before</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Returns true if this <ph id="ph1">`shared_ptr`</ph> is ordered before (or less than) the provided pointer.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`lvalue`</ph> reference to either a <ph id="ph2">`shared_ptr`</ph> or a <ph id="ph3">`weak_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>The template member function returns true if <ph id="ph1">`*this`</ph> is <ph id="ph2">`ordered before``ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>shared_ptr::reset</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Replace owned resource.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The type controlled by the argument pointer.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The type of the deleter.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>The pointer to copy.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The deleter to copy.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>The type of the allocator.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>The allocator to copy.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The operators all decrement the reference count for the resource currently owned by <ph id="ph1">`*this`</ph> and assign ownership of the resource named by the operand sequence to <ph id="ph2">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If the reference count falls to zero, the resource is released.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If an operator fails it leaves <ph id="ph1">`*this`</ph> unchanged.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>shared_ptr::shared_ptr</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`shared_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The type controlled by the argument pointer.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The pointer to copy.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The type of the deleter.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The type of the allocator.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The deleter.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The allocator.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The smart pointer to copy.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>The weak pointer.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>The auto pointer to copy.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>The constructors each construct an object that owns the resource named by the operand sequence.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The constructor <ph id="ph1">`shared_ptr(const weak_ptr&lt;Other&gt;&amp; wp)`</ph> throws an exception object of type <bpt id="p1">[</bpt>bad_weak_ptr Class<ept id="p1">](../standard-library/bad-weak-ptr-class.md)</ept> if <ph id="ph2">`wp.expired()`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>shared_ptr::~shared_ptr</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Destroys a <ph id="ph1">`shared_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The destructor decrements the reference count for the resource currently owned by <ph id="ph1">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If the reference count falls to zero, the resource is released.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>shared_ptr::swap</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Swaps two <ph id="ph1">`shared_ptr`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>The shared pointer to swap with.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>The member function leaves the resource originally owned by <ph id="ph1">`*this`</ph> subsequently owned by <ph id="ph2">`sp`</ph>, and the resource originally owned by <ph id="ph3">`sp`</ph> subsequently owned by <ph id="ph4">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The function does not change the reference counts for the two resources and it does not throw any exceptions.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>shared_ptr::unique</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Tests if owned resource is unique.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>The member function returns <ph id="ph1">`true`</ph> if no other <ph id="ph2">`shared_ptr`</ph> object owns the resource that is owned by <ph id="ph3">`*this`</ph>, otherwise <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>shared_ptr::use_count</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Counts numbers of resource owners.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The member function returns the number of <ph id="ph1">`shared_ptr`</ph> objects that own the resource that is owned by <ph id="ph2">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>weak_ptr Class</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>Thread Safety in the C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>