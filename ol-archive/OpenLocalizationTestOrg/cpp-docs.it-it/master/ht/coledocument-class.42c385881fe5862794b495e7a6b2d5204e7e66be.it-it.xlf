<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71b9fad9fac4167ff12f8cde84c6d569802e92e1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\coledocument-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">94e9ca071ec61d69a9b7f8bfbaf6d009c404dcf3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90aa432c797a6424c0e1d3ab05b663d81b361e1b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>COleDocument Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>COleDocument Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The base class for OLE documents that support visual editing.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>COleDocument::COleDocument</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`COleDocument`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>COleDocument::AddItem</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds an item to the list of items maintained by the document.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>COleDocument::ApplyPrintDevice</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Sets the print-target device for all client items in the document.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>COleDocument::EnableCompoundFile</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Causes documents to be stored using the OLE Structured Storage file format.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>COleDocument::GetInPlaceActiveItem</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Returns the OLE item that is currently in-place active.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>COleDocument::GetNextClientItem</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets the next client item for iterating.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>COleDocument::GetNextItem</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Gets the next document item for iterating.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>COleDocument::GetNextServerItem</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets the next server item for iterating.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>COleDocument::GetPrimarySelectedItem</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Returns the primary selected OLE item in the document.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>COleDocument::GetStartPosition</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Gets the initial position to begin iteration.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>COleDocument::HasBlankItems</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Checks for blank items in the document.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>COleDocument::OnShowViews</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Called when the document becomes visible or invisible.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>COleDocument::RemoveItem</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Removes an item from the list of items maintained by the document.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>COleDocument::UpdateModifiedFlag</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Marks the document as modified if any of the contained OLE items have been modified.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Protected Methods</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>COleDocument::OnEditChangeIcon</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Handles events in the Change Icon menu command.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>COleDocument::OnEditConvert</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Handles the conversion of an embedded or linked object from one type to another.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>COleDocument::OnEditLinks</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Handles events in the Links command on the Edit menu.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>COleDocument::OnFileSendMail</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Sends a mail message with the document attached.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>COleDocument::OnUpdateEditChangeIcon</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Called by the framework to update the command UI for the Edit/Change Icon menu option.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>COleDocument::OnUpdateEditLinksMenu</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Called by the framework to update the command UI for the Edit/Links menu option.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>COleDocument::OnUpdateObjectVerbMenu</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Called by the framework to update the command UI for the Edit/ <bpt id="p1">*</bpt>ObjectName<ept id="p1">*</ept> menu option and the Verb submenu accessed from Edit/ <bpt id="p2">*</bpt>ObjectName<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>COleDocument::OnUpdatePasteLinkMenu</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Called by the framework to update the command UI for the Paste Special menu option.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>COleDocument::OnUpdatePasteMenu</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Called by the framework to update the command UI for the Paste menu option.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>is derived from <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept>, which allows your OLE applications to use the document/view architecture provided by the Microsoft Foundation Class Library.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>treats a document as a collection of <bpt id="p1">[</bpt>CDocItem<ept id="p1">](../../mfc/reference/cdocitem-class.md)</ept> objects to handle OLE items.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Both container and server applications require such an architecture because their documents must be able to contain OLE items.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>COleServerItem<ept id="p1">](../../mfc/reference/coleserveritem-class.md)</ept> and <bpt id="p2">[</bpt>COleClientItem<ept id="p2">](../../mfc/reference/coleclientitem-class.md)</ept> classes, both derived from <ph id="ph1">`CDocItem`</ph>, manage the interactions between applications and OLE items.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>If you are writing a simple container application, derive your document class from <ph id="ph1">`COleDocument`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If you are writing a container application that supports linking to the embedded items contained by its documents, derive your document class from <bpt id="p1">[</bpt>COleLinkingDoc<ept id="p1">](../../mfc/reference/colelinkingdoc-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you are writing a server application or combination container/server, derive your document class from <bpt id="p1">[</bpt>COleServerDoc<ept id="p1">](../../mfc/reference/coleserverdoc-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`COleServerDoc`</ph> are derived from <ph id="ph2">`COleDocument`</ph>, so these classes inherit all the services available in <ph id="ph3">`COleDocument`</ph> and <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>To use <ph id="ph1">`COleDocument`</ph>, derive a class from it and add functionality to manage the application's non-OLE data as well as embedded or linked items.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If you define <ph id="ph1">`CDocItem`</ph>-derived classes to store the application's native data, you can use the default implementation defined by <ph id="ph2">`COleDocument`</ph> to store both your OLE and non-OLE data.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>You can also design your own data structures for storing your non-OLE data separately from the OLE items.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For more information, see the article <bpt id="p1">[</bpt>Containers: Compound Files<ept id="p1">](../../mfc/containers-compound-files.md)</ept>..</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> supports sending your document via mail if mail support (MAPI) is present.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>has updated <bpt id="p1">[</bpt>OnFileSendMail<ept id="p1">](#coledocument__onfilesendmail)</ept> to handle compound documents correctly.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>For more information, see the articles <bpt id="p1">[</bpt>MAPI<ept id="p1">](../../mfc/mapi.md)</ept> and <bpt id="p2">[</bpt>MAPI Support in MFC<ept id="p2">](../../mfc/mapi-support-in-mfc.md)</ept>..</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>CObject</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>CCmdTarget</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>CDocument</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxole.h</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>COleDocument::AddItem</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Call this function to add an item to the document.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Pointer to the document item being added.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>You do not need to call this function explicitly when it is called by the <ph id="ph1">`COleClientItem`</ph> or <ph id="ph2">`COleServerItem`</ph> constructor that accepts a pointer to a document.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>COleDocument::ApplyPrintDevice</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Call this function to change the print-target device for all embedded <bpt id="p1">[</bpt>COleClientItem<ept id="p1">](../../mfc/reference/coleclientitem-class.md)</ept> items in your application's container document.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">**</bpt>DVTARGETDEVICE<ept id="p1">**</ept> data structure, which contains information about the new print-target device.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Pointer to a <bpt id="p1">**</bpt>PRINTDLG<ept id="p1">**</ept> data structure, which contains information about the new print-target device.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Can be <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Nonzero if the function was successful; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>This function updates the print-target device for all items but does not refresh the presentation cache for those items.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>To update the presentation cache for an item, call <bpt id="p1">[</bpt>COleClientItem::UpdateLink<ept id="p1">](../../mfc/reference/coleclientitem-class.md#coleclientitem__updatelink)</ept>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The arguments to this function contain information that OLE uses to identify the target device.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>PRINTDLG<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646843)</ept> structure contains information that Windows uses to initialize the common Print dialog box.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>After the user closes the dialog box, Windows returns information about the user's selections in this structure.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`m_pd`</ph> member of a <bpt id="p1">[</bpt>CPrintDialog<ept id="p1">](../../mfc/reference/cprintdialog-class.md)</ept> object is a <bpt id="p2">**</bpt>PRINTDLG<ept id="p2">**</ept> structure.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>PRINTDLG<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646843)</ept> structure in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>DVTARGETDEVICE<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686613)</ept> structure in the <ph id="ph1">[!INCLUDE[winSDK](../../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>COleDocument::COleDocument</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`COleDocument`</ph> object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>COleDocument::EnableCompoundFile</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Call this function if you want to store the document using the compound-file format.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Specifies whether compound file support is enabled or disabled.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>This is also called structured storage.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You typically call this function from the constructor of your <ph id="ph1">`COleDocument`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>For more information about compound documents, see the article <bpt id="p1">[</bpt>Containers: Compound Files<ept id="p1">](../../mfc/containers-compound-files.md)</ept>..</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>If you do not call this member function, documents will be stored in a nonstructured ("flat") file format.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>After compound file support is enabled or disabled for a document, the setting should not be changed during the document's lifetime.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>COleDocument::GetInPlaceActiveItem</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Call this function to get the OLE item that is currently activated in place in the frame window containing the view identified by <ph id="ph1">`pWnd`</ph>.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Pointer to the window that displays the container document.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>A pointer to the single, in-place active OLE item; <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if there is no OLE item currently in the "in-place active" state.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>COleDocument::GetNextClientItem</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Call this function repeatedly to access each of the client items in your document.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value set by a previous call to <ph id="ph1">`GetNextClientItem`</ph>; the initial value is returned by the <ph id="ph2">`GetStartPosition`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>A pointer to the next client item in the document, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if there are no more client items.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>After each call, the value of <ph id="ph1">`pos`</ph> is set for the next item in the document, which might or might not be a client item.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>NVC_MFCOleContainer#1</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>COleDocument::GetNextItem</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Call this function repeatedly to access each of the items in your document.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value set by a previous call to <ph id="ph1">`GetNextItem`</ph>; the initial value is returned by the <ph id="ph2">`GetStartPosition`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>A pointer to the document item at the specified position.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>After each call, the value of <ph id="ph1">`pos`</ph> is set to the <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value of the next item in the document.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>If the retrieved element is the last element in the document, the new value of <ph id="ph1">`pos`</ph> is <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>NVC_MFCOleContainer#2</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>COleDocument::GetNextServerItem</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Call this function repeatedly to access each of the server items in your document.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A reference to a <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value set by a previous call to <ph id="ph1">`GetNextServerItem`</ph>; the initial value is returned by the <ph id="ph2">`GetStartPosition`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A pointer to the next server item in the document, or <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if there are no more server items.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>After each call, the value of <ph id="ph1">`pos`</ph> is set for the next item in the document, which might or might not be a server item.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>NVC_MFCOleServer#2</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>COleDocument::GetPrimarySelectedItem</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Called by the framework to retrieve the currently selected OLE item in the specified view.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Pointer to the active view object displaying the document.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>A pointer to the single, selected OLE item; <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> if no OLE items are selected or if more than one is selected.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The default implementation searches the list of contained OLE items for a single selected item and returns a pointer to it.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>If there is no item selected, or if there is more than one item selected, the function returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>You must override the <ph id="ph1">`CView::IsSelected`</ph> member function in your view class for this function to work.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Override this function if you have your own method of storing contained OLE items.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>COleDocument::GetStartPosition</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Call this function to get the position of the first item in the document.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>POSITION<ept id="p1">**</ept> value that can be used to begin iterating through the document's items; <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept> if the document has no items.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Pass the value returned to <ph id="ph1">`GetNextItem`</ph>, <ph id="ph2">`GetNextClientItem`</ph>, or <ph id="ph3">`GetNextServerItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>COleDocument::HasBlankItems</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Call this function to determine whether the document contains any blank items.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Nonzero if the document contains any blank items; otherwise 0.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>A blank item is one whose rectangle is empty.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>COleDocument::OnEditChangeIcon</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Displays the OLE Change Icon dialog box and changes the icon representing the currently selected OLE item to the icon the user selects in the dialog box.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>creates and launches a <ph id="ph1">`COleChangeIconDialog`</ph> Change Icon dialog box.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>COleDocument::OnEditConvert</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Displays the OLE Convert dialog box and converts or activates the currently selected OLE item according to user selections in the dialog box.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>creates and launches a <ph id="ph1">`COleConvertDialog`</ph> Convert dialog box.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>An example of conversion is converting a Microsoft Word document into a WordPad document.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>COleDocument::OnEditLinks</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Displays the OLE Edit/Links dialog box.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>creates and launches a <ph id="ph1">`COleLinksDialog`</ph> Links dialog box that allows the user to change the linked objects.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>COleDocument::OnFileSendMail</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Sends a message via the resident mail host (if any) with the document as an attachment.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>calls <ph id="ph1">`OnSaveDocument`</ph> to serialize (save) untitled and modified documents to a temporary file, which is then sent via electronic mail.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>If the document has not been modified, a temporary file is not needed; the original is sent.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>loads MAPI32.DLL if it has not already been loaded.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>Unlike the implementation of <ph id="ph1">`OnFileSendMail`</ph> for <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept>, this function handles compound files correctly.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>For more information, see the <bpt id="p1">[</bpt>MAPI Topics<ept id="p1">](../../mfc/mapi.md)</ept> and <bpt id="p2">[</bpt>MAPI Support in MFC<ept id="p2">](../../mfc/mapi-support-in-mfc.md)</ept> articles..</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>COleDocument::OnShowViews</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The framework calls this function after the document's visibility state changes.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>Indicates whether the document has become visible or invisible.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The default version of this function does nothing.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>Override it if your application must perform any special processing when the document's visibility changes.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>COleDocument::OnUpdateEditChangeIcon</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Called by the framework to update the Change Icon command on the Edit menu.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CCmdUI`</ph> structure that represents the menu that generated the update command.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The update handler calls the <bpt id="p1">**</bpt>Enable<ept id="p1">**</ept> member function of the <ph id="ph1">`CCmdUI`</ph> structure through <ph id="ph2">`pCmdUI`</ph> to update the user interface.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>updates the command's user interface depending on whether or not a valid icon exists in the document.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>Override this function to change the behavior.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>COleDocument::OnUpdateEditLinksMenu</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Called by the framework to update the Links command on the Edit menu.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CCmdUI`</ph> structure that represents the menu that generated the update command.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The update handler calls the <bpt id="p1">**</bpt>Enable<ept id="p1">**</ept> member function of the <ph id="ph1">`CCmdUI`</ph> structure through <ph id="ph2">`pCmdUI`</ph> to update the user interface.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Starting with the first OLE item in the document, <ph id="ph1">`OnUpdateEditLinksMenu`</ph> accesses each item, tests whether the item is a link, and, if it is a link, enables the Links command.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Override this function to change the behavior.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>COleDocument::OnUpdateObjectVerbMenu</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Called by the framework to update the <bpt id="p1">*</bpt>ObjectName<ept id="p1">*</ept> command on the Edit menu and the Verb submenu accessed from the <bpt id="p2">*</bpt>ObjectName<ept id="p2">*</ept> command, where <bpt id="p3">*</bpt>ObjectName<ept id="p3">*</ept> is the name of the OLE object embedded in the document.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CCmdUI`</ph> structure that represents the menu that generated the update command.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>The update handler calls the <bpt id="p1">**</bpt>Enable<ept id="p1">**</ept> member function of the <ph id="ph1">`CCmdUI`</ph> structure through <ph id="ph2">`pCmdUI`</ph> to update the user interface.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>updates the <bpt id="p1">*</bpt>ObjectName<ept id="p1">*</ept> command's user interface depending on whether or not a valid object exists in the document.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>If an object exists, the <bpt id="p1">*</bpt>ObjectName<ept id="p1">*</ept> command on the Edit menu is enabled.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>When this menu command is selected, the Verb submenu is displayed.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>The Verb submenu contains all the verb commands available for the object, such as Edit, Properties, and so on.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>Override this function to change the behavior.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>COleDocument::OnUpdatePasteLinkMenu</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Called by the framework to determine whether a linked OLE item can be pasted from the Clipboard.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CCmdUI`</ph> structure that represents the menu that generated the update command.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>The update handler calls the <bpt id="p1">**</bpt>Enable<ept id="p1">**</ept> member function of the <ph id="ph1">`CCmdUI`</ph> structure through <ph id="ph2">`pCmdUI`</ph> to update the user interface.</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>The Paste Special menu command is enabled or disabled depending on whether the item can be pasted into the document or not.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>COleDocument::OnUpdatePasteMenu</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>Called by the framework to determine whether an embedded OLE item can be pasted from the Clipboard.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">`CCmdUI`</ph> structure that represents the menu that generated the update command.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>The update handler calls the <bpt id="p1">**</bpt>Enable<ept id="p1">**</ept> member function of the <ph id="ph1">`CCmdUI`</ph> structure through <ph id="ph2">`pCmdUI`</ph> to update the user interface.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>The Paste menu command and button are enabled or disabled depending on whether the item can be pasted into the document or not.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>COleDocument::RemoveItem</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>Call this function to remove an item from the document.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>Pointer to the document item to be removed.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>You typically do not need to call this function explicitly; it is called by the destructors for <ph id="ph1">`COleClientItem`</ph> and <ph id="ph2">`COleServerItem`</ph>.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>COleDocument::UpdateModifiedFlag</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>Call this function to mark the document as modified if any of the contained OLE items have been modified.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>This allows the framework to prompt the user to save the document before closing, even if the native data in the document has not been modified.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>MFC Sample CONTAINER</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>MFC Sample MFCBIND</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>CDocument Class</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>