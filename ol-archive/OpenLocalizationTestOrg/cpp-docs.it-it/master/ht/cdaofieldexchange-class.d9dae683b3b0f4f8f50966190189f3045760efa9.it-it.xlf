<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3163a69714abbdd3eb445eade60d48ca8cdb2b88</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\cdaofieldexchange-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a00feee8dc2f3a7a07cc3daf1371595ee7cfd124</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1a93aa14ac027d10d52a08ffe5d0f349998c1010</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CDaoFieldExchange Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CDaoFieldExchange Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Supports the DAO record field exchange (DFX) routines used by the DAO database classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CDaoFieldExchange::IsValidOperation</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Returns nonzero if the current operation is appropriate for the type of field being updated.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>CDaoFieldExchange::SetFieldType</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Specifies the type of recordset data member — column or parameter — represented by all subsequent calls to DFX functions until the next call to <ph id="ph1">`SetFieldType`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CDaoFieldExchange::m_nOperation</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The DFX operation being performed by the current call to the recordset's <ph id="ph1">`DoFieldExchange`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CDaoFieldExchange::m_prs</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A pointer to the recordset on which DFX operations are being performed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>does not have a base class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use this class if you are writing data exchange routines for custom data types; otherwise, you will not directly use this class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>DFX exchanges data between the field data members of your <bpt id="p1">[</bpt>CDaoRecordset<ept id="p1">](../../mfc/reference/cdaorecordset-class.md)</ept> object and the corresponding fields of the current record on the data source.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>DFX manages the exchange in both directions, from the data source and to the data source.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Technical Note 53<ept id="p1">](../../mfc/tn053-custom-dfx-routines-for-dao-database-classes.md)</ept> for information about writing custom DFX routines.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The DAO database classes are distinct from the MFC database classes based on Open Database Connectivity (ODBC).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>All DAO database class names have the "CDao" prefix.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can still access ODBC data sources with the DAO classes.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In general, the MFC classes based on DAO are more capable than the MFC classes based on ODBC.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The DAO-based classes can access data, including through ODBC drivers, via their own database engine.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>They also support Data Definition Language (DDL) operations, such as adding tables via the classes instead of having to call DAO yourself.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>DAO record field exchange (DFX) is very similar to record field exchange (RFX) in the ODBC-based MFC database classes ( <ph id="ph1">`CDatabase`</ph>, <ph id="ph2">`CRecordset`</ph>).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If you understand RFX, you will find it easy to use DFX.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CDaoFieldExchange`</ph> object provides the context information needed for DAO record field exchange to take place.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>objects support a number of operations, including binding parameters and field data members and setting various flags on the fields of the current record.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>DFX operations are performed on recordset-class data members of types defined by the <ph id="ph1">`enum`</ph><bpt id="p1">**</bpt>FieldType<ept id="p1">**</ept> in <ph id="ph2">`CDaoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Possible <bpt id="p1">**</bpt>FieldType<ept id="p1">**</ept> values are:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDaoFieldExchange::outputColumn<ept id="p1">**</ept> for field data members.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>CDaoFieldExchange::param<ept id="p1">**</ept> for parameter data members.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>IsValidOperation<ept id="p1">](#cdaofieldexchange__isvalidoperation)</ept> member function is provided for writing your own custom DFX routines.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>You will use <bpt id="p1">[</bpt>SetFieldType<ept id="p1">](#cdaofieldexchange__setfieldtype)</ept> frequently in your <bpt id="p2">[</bpt>CDaoRecordset::DoFieldExchange<ept id="p2">](../../mfc/reference/cdaorecordset-class.md#cdaorecordset__dofieldexchange)</ept> functions.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For details about the DFX global functions, see <bpt id="p1">[</bpt>Record Field Exchange Functions<ept id="p1">](../../mfc/reference/record-field-exchange-functions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For information about writing custom DFX routines for your own data types, see <bpt id="p1">[</bpt>Technical Note 53<ept id="p1">](../../mfc/tn053-custom-dfx-routines-for-dao-database-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> afxdao.h</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>CDaoFieldExchange::IsValidOperation</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>If you write your own DFX function, call <ph id="ph1">`IsValidOperation`</ph> at the beginning of your function to determine whether the current operation can be performed on a particular field data member type (a <bpt id="p1">**</bpt>CDaoFieldExchange::outputColumn<ept id="p1">**</ept> or a <bpt id="p2">**</bpt>CDaoFieldExchange::param<ept id="p2">**</ept>).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Nonzero if the current operation is appropriate for the type of field being updated.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Some of the operations performed by the DFX mechanism apply only to one of the possible field types.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Follow the model of the existing DFX functions.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>For additional information on writing custom DFX routines, see <bpt id="p1">[</bpt>Technical Note 53<ept id="p1">](../../mfc/tn053-custom-dfx-routines-for-dao-database-classes.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>CDaoFieldExchange::m_nOperation</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Identifies the operation to be performed on the <bpt id="p1">[</bpt>CDaoRecordset<ept id="p1">](../../mfc/reference/cdaorecordset-class.md)</ept> object associated with the field exchange object.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CDaoFieldExchange`</ph> object supplies the context for a number of different DFX operations on the recordset.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>PSEUDONULL<ept id="p1">**</ept> value described under the MarkForAddNew and SetFieldNull operations below is a value used to mark fields Null.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The DAO record field exchange mechanism (DFX) uses this value to determine which fields have been explicitly marked Null.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>PSEUDONULL<ept id="p1">**</ept> is not required for <bpt id="p2">[</bpt>COleDateTime<ept id="p2">](../../atl-mfc-shared/reference/coledatetime-class.md)</ept> and <bpt id="p3">[</bpt>COleCurrency<ept id="p3">](../../mfc/reference/colecurrency-class.md)</ept> fields.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Possible values of <bpt id="p1">**</bpt>m_nOperation<ept id="p1">**</ept> are:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Operation</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>AddToParameterList</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Builds the <bpt id="p1">**</bpt>PARAMETERS<ept id="p1">**</ept> clause of the SQL statement.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>AddToSelectList</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Builds the <bpt id="p1">**</bpt>SELECT<ept id="p1">**</ept> clause of the SQL statement.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>BindField</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Binds a field in the database to a memory location in your application.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>BindParam</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Sets parameter values for the recordset's query.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Fixup</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Sets the Null status for a field.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>AllocCache</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Allocates the cache used to check for "dirty" fields in the recordset.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>StoreField</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Saves the current record to the cache.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>LoadField</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Restores the cached data member variables in the recordset.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>FreeCache</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Frees the cache used to check for "dirty" fields in the recordset.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Sets a field's status to Null and value to <bpt id="p1">**</bpt>PSEUDONULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>MarkForAddNew</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Marks fields "dirty" if not <bpt id="p1">**</bpt>PSEUDONULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>MarkForEdit</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Marks fields "dirty" if they do not match the cache.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>SetDirtyField</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Sets field values marked as "dirty."</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>DumpField</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Dumps a field's contents (debug only).</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>MaxDFXOperation</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Used for input checking.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>CDaoFieldExchange::m_prs</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Contains a pointer to the <bpt id="p1">[</bpt>CDaoRecordset<ept id="p1">](../../mfc/reference/cdaorecordset-class.md)</ept> object associated with the <ph id="ph1">`CDaoFieldExchange`</ph> object.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>CDaoFieldExchange::SetFieldType</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`SetFieldType`</ph> in your <ph id="ph2">`CDaoRecordset`</ph> class's <ph id="ph3">`DoFieldExchange`</ph> override.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>A value of the <bpt id="p1">**</bpt>enum FieldType<ept id="p1">**</ept>, declared in <ph id="ph1">`CDaoFieldExchange`</ph>, which can be either of the following:</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>CDaoFieldExchange::outputColumn</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>CDaoFieldExchange::param</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Normally, ClassWizard writes this call for you.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>If you write your own function and are using the wizard to write your <ph id="ph1">`DoFieldExchange`</ph> function, add calls to your own function outside the field map.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If you do not use the wizard, there will not be a field map.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The call precedes calls to DFX functions, one for each field data member of your class, and identifies the field type as <bpt id="p1">**</bpt>CDaoFieldExchange::outputColumn<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>If you parameterize your recordset class, you should add DFX calls for all parameter data members (outside the field map) and precede these calls with a call to <ph id="ph1">`SetFieldType`</ph>.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Pass the value <bpt id="p1">**</bpt>CDaoFieldExchange::param<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>(You can, instead, use a <bpt id="p1">[</bpt>CDaoQueryDef<ept id="p1">](../../mfc/reference/cdaoquerydef-class.md)</ept> and set its parameter values.)</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>In general, each group of DFX function calls associated with field data members or parameter data members must be preceded by a call to <ph id="ph1">`SetFieldType`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`nFieldType`</ph> parameter of each <ph id="ph2">`SetFieldType`</ph> call identifies the type of the data members represented by the DFX function calls that follow the <ph id="ph3">`SetFieldType`</ph> call.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>CDaoRecordset Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>