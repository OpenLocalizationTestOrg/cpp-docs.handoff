<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a810f7833912bf96194fc4dc28ed7732c1267fe8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\openmp\1-2-definition-of-terms.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dce1e7d0feb8586af1fc3d7609a40e43b3a522cd</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">85334cdf77268312dce7462cd1750316381a1438</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>1.2 Definition of Terms | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>1.2 Definition of Terms</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following terms are used in this document:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>barrier</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A synchronization point that must be reached by all threads in a team.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Each thread waits until all threads in the team arrive at this point.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There are explicit barriers identified by directives and implicit barriers created by the implementation.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>construct</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>A construct is a statement.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>It consists of a directive and the subsequent structured block.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Note that some directives are not part of a construct.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">*</bpt>openmp-directive<ept id="p1">*</ept> in <bpt id="p2">[</bpt>Appendix C<ept id="p2">](../../parallel/openmp/c-openmp-c-and-cpp-grammar.md)</ept>).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>directive</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A C or C++ <bpt id="p1">**</bpt>#pragma<ept id="p1">**</ept> followed by the <bpt id="p2">**</bpt>omp<ept id="p2">**</ept> identifier, other text, and a new line.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The directive specifies program behavior.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>dynamic extent</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>All statements in the <bpt id="p1">*</bpt>lexical extent<ept id="p1">*</ept>, plus any statement inside a function that is executed as a result of the execution of statements within the lexical extent.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A dynamic extent is also referred to as a <bpt id="p1">*</bpt>region<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>lexical extent</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Statements lexically contained within a <bpt id="p1">*</bpt>structured block<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>master thread</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The thread that creates a team when a <bpt id="p1">*</bpt>parallel region<ept id="p1">*</ept> is entered.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>parallel region</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Statements that bind to an OpenMP parallel construct and may be executed by multiple threads.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>private</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A private variable names a block of storage that is unique to the thread making the reference.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note that there are several ways to specify that a variable is private: a definition within a parallel region, a <bpt id="p1">**</bpt>threadprivate<ept id="p1">**</ept> directive, a <bpt id="p2">**</bpt>private<ept id="p2">**</ept>, <bpt id="p3">**</bpt>firstprivate<ept id="p3">**</ept>, <bpt id="p4">**</bpt>lastprivate<ept id="p4">**</ept>, or <bpt id="p5">**</bpt>reduction<ept id="p5">**</ept> clause, or use of the variable as a <bpt id="p6">**</bpt>for<ept id="p6">**</ept>loop control variable in a <bpt id="p7">**</bpt>for<ept id="p7">**</ept> loop immediately following a <bpt id="p8">**</bpt>for<ept id="p8">**</ept> or <bpt id="p9">**</bpt>parallel for<ept id="p9">**</ept> directive.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>region</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A dynamic extent.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>serial region</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Statements executed only by the <bpt id="p1">*</bpt>master thread<ept id="p1">*</ept> outside of the dynamic extent of any <bpt id="p2">*</bpt>parallel region<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>serialize</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To execute a parallel construct with a team of threads consisting of only a single thread (which is the master thread for that parallel construct), with serial order of execution for the statements within the structured block (the same order as if the block were not part of a parallel construct), and with no effect on the value returned by <bpt id="p1">**</bpt>omp_in_parallel()<ept id="p1">**</ept> (apart from the effects of any nested parallel constructs).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>shared</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A shared variable names a single block of storage.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>All threads in a team that access this variable will access this single block of storage.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>structured block</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A structured block is a statement (single or compound) that has a single entry and a single exit.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>No statement is a structured block if there is a jump into or out of that statement (including a call to <bpt id="p1">**</bpt>longjmp<ept id="p1">**</ept>(3C) or the use of <bpt id="p2">**</bpt>throw<ept id="p2">**</ept>, but a call to <bpt id="p3">**</bpt>exit<ept id="p3">**</ept> is permitted).</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A compound statement is a structured block if its execution always begins at the opening <bpt id="p1">**</bpt>{<ept id="p1">**</ept> and always ends at the closing <bpt id="p2">**</bpt>}<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An expression statement, selection statement, iteration statement, or <bpt id="p1">**</bpt>try<ept id="p1">**</ept> block is a structured block if the corresponding compound statement obtained by enclosing it in <bpt id="p2">**</bpt>{<ept id="p2">**</ept> and <bpt id="p3">**</bpt>}<ept id="p3">**</ept>would be a structured block.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A jump statement, labeled statement, or declaration statement is not a structured block.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>team</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>One or more threads cooperating in the execution of a construct.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>thread</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>An execution entity having a serial flow of control, a set of private variables, and access to shared variables.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>variable</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>An identifier, optionally qualified by namespace names, that names an object.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>