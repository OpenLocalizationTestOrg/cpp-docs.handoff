<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aff4a5ebaa597f198e8ceb79966b3cfb02f50179</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\preprocessor\hash-if-hash-elif-hash-else-and-hash-endif-directives-c-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4dd8462e12b5d8a188fb0130f0db63f688360e05</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c9630dabcd8d5ab5d0d8367ef1fccbcbb8974ce4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>if, #elif, #else, and #endif Directives (C-C++) | Microsoft Doc</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>if, #elif, #else, and #endif Directives (C/C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`#if`</ph> directive, with the <ph id="ph2">`#elif`</ph>, <ph id="ph3">`#else`</ph>, and <ph id="ph4">`#endif`</ph> directives, controls compilation of portions of a source file.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If the expression you write (after the <ph id="ph1">`#if`</ph>) has a nonzero value, the line group immediately following the <ph id="ph2">`#if`</ph> directive is retained in the translation unit.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Grammar</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>conditional<ept id="p1">*</ept> :</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> *</bpt>if-part elif-parts<ept id="p1">*</ept>opt<bpt id="p2">*</bpt>else-part<ept id="p2">*</ept>opt<bpt id="p3">*</bpt>endif-line<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>if-part<ept id="p1">*</ept> :</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>if-line text</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>if-line<ept id="p1">*</ept> :</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>#if<ept id="p1">**</ept>  <bpt id="p2">*</bpt>constant-expression<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>#ifdef<ept id="p1">**</ept>  <bpt id="p2">*</bpt>identifier<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>#ifndef<ept id="p1">**</ept>  <bpt id="p2">*</bpt>identifier<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>elif-parts<ept id="p1">*</ept> :</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>elif-line text</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>elif-parts elif-line text</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>elif-line<ept id="p1">*</ept> :</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><bpt id="p1"> **</bpt>#elif<ept id="p1">**</ept>  <bpt id="p2">*</bpt>constant-expression<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>else-part<ept id="p1">*</ept> :</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>else-line text</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>else-line<ept id="p1">*</ept> :</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>endif-line<ept id="p1">*</ept> :</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Each <ph id="ph1">`#if`</ph> directive in a source file must be matched by a closing <ph id="ph2">`#endif`</ph> directive.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Any number of <ph id="ph1">`#elif`</ph> directives can appear between the <ph id="ph2">`#if`</ph> and <ph id="ph3">`#endif`</ph> directives, but at most one <ph id="ph4">`#else`</ph> directive is allowed.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`#else`</ph> directive, if present, must be the last directive before <ph id="ph2">`#endif`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`#if`</ph>, <ph id="ph2">`#elif`</ph>, <ph id="ph3">`#else`</ph>, and <ph id="ph4">`#endif`</ph> directives can nest in the text portions of other <ph id="ph5">`#if`</ph> directives.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Each nested <ph id="ph1">`#else`</ph>, <ph id="ph2">`#elif`</ph>, or <ph id="ph3">`#endif`</ph> directive belongs to the closest preceding <ph id="ph4">`#if`</ph> directive.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>All conditional-compilation directives, such as <ph id="ph1">`#if`</ph> and <bpt id="p1">**</bpt>#ifdef<ept id="p1">**</ept>, must be matched with closing <ph id="ph2">`#endif`</ph> directives prior to the end of file; otherwise, an error message is generated.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>When conditional-compilation directives are contained in include files, they must satisfy the same conditions: There must be no unmatched conditional-compilation directives at the end of the include file.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Macro replacement is performed within the part of the command line that follows an <ph id="ph1">`#elif`</ph> command, so a macro call can be used in the <bpt id="p1">*</bpt>constant-expression<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The preprocessor selects one of the given occurrences of <bpt id="p1">*</bpt>text<ept id="p1">*</ept> for further processing.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A block specified in <bpt id="p1">*</bpt>text<ept id="p1">*</ept> can be any sequence of text.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>It can occupy more than one line.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Usually <bpt id="p1">*</bpt>text<ept id="p1">*</ept> is program text that has meaning to the compiler or the preprocessor.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The preprocessor processes the selected <bpt id="p1">*</bpt>text<ept id="p1">*</ept> and passes it to the compiler.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">*</bpt>text<ept id="p1">*</ept> contains preprocessor directives, the preprocessor carries out those directives.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Only text blocks selected by the preprocessor are compiled.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The preprocessor selects a single <bpt id="p1">*</bpt>text<ept id="p1">*</ept> item by evaluating the constant expression following each <ph id="ph1">`#if`</ph> or <ph id="ph2">`#elif`</ph> directive until it finds a true (nonzero) constant expression.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>It selects all text (including other preprocessor directives beginning with <bpt id="p1">**</bpt><ph id="ph1">#</ph><ept id="p1">**</ept>) up to its associated <ph id="ph2">`#elif`</ph>, <ph id="ph3">`#else`</ph>, or <ph id="ph4">`#endif`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>If all occurrences of <bpt id="p1">*</bpt>constant-expression<ept id="p1">*</ept> are false, or if no <ph id="ph1">`#elif`</ph> directives appear, the preprocessor selects the text block after the <ph id="ph2">`#else`</ph> clause.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`#else`</ph> clause is omitted and all instances of <bpt id="p1">*</bpt>constant-expression<ept id="p1">*</ept> in the <ph id="ph2">`#if`</ph> block are false, no text block is selected.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">*</bpt>constant-expression<ept id="p1">*</ept> is an integer constant expression with these additional restrictions:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Expressions must have integral type and can include only integer constants, character constants, and the <bpt id="p1">**</bpt>defined<ept id="p1">**</ept> operator.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The expression cannot use <ph id="ph1">`sizeof`</ph> or a type-cast operator.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The target environment may not be able to represent all ranges of integers.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The translation represents type <ph id="ph1">`int`</ph> the same as type <bpt id="p1">**</bpt>long<ept id="p1">**</ept>, and <ph id="ph2">`unsigned int`</ph> the same as <ph id="ph3">`unsigned long`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The translator can translate character constants to a set of code values different from the set for the target environment.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>To determine the properties of the target environment, check values of macros from LIMITS.H in an application built for the target environment.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The expression must not perform any environmental inquiries and must remain insulated from implementation details on the target computer.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The preprocessor operator <bpt id="p1">**</bpt>defined<ept id="p1">**</ept> can be used in special constant expressions, as shown by the following syntax:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>defined( <ph id="ph1">`identifier`</ph> )</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>defined</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>This constant expression is considered true (nonzero) if the <bpt id="p1">*</bpt>identifier<ept id="p1">*</ept> is currently defined; otherwise, the condition is false (0).</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>An identifier defined as empty text is considered defined.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>defined<ept id="p1">**</ept> directive can be used in an <ph id="ph1">`#if`</ph> and an <ph id="ph2">`#elif`</ph> directive, but nowhere else.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`#if`</ph> and <ph id="ph2">`#endif`</ph> directives control compilation of one of three function calls:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The function call to <ph id="ph1">`credit`</ph> is compiled if the identifier <ph id="ph2">`CREDIT`</ph> is defined.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>If the identifier <ph id="ph1">`DEBIT`</ph> is defined, the function call to <ph id="ph2">`debit`</ph> is compiled.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If neither identifier is defined, the call to <ph id="ph1">`printerror`</ph> is compiled.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`CREDIT`</ph> and <ph id="ph2">`credit`</ph> are distinct identifiers in C and C++ because their cases are different.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The conditional compilation statements in the following example assume a previously defined symbolic constant named <ph id="ph1">`DLEVEL`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">`#if`</ph> block shows two sets of nested <ph id="ph2">`#if`</ph>, <ph id="ph3">`#else`</ph>, and <ph id="ph4">`#endif`</ph> directives.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The first set of directives is processed only if <ph id="ph1">`DLEVEL &gt; 5`</ph> is true.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Otherwise, the statements after #<bpt id="p1">**</bpt>else<ept id="p1">**</ept> are processed.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`#elif`</ph> and <ph id="ph2">`#else`</ph> directives in the second example are used to make one of four choices, based on the value of <ph id="ph3">`DLEVEL`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The constant <ph id="ph1">`STACK`</ph> is set to 0, 100, or 200, depending on the definition of <ph id="ph2">`DLEVEL`</ph>.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`DLEVEL`</ph> is greater than 5, then the statement</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>is compiled and <ph id="ph1">`STACK`</ph> is not defined.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A common use for conditional compilation is to prevent multiple inclusions of the same header file.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In C++, where classes are often defined in header files, constructs like the following can be used to prevent multiple definitions:</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The preceding code checks to see if the symbolic constant <ph id="ph1">`EXAMPLE_H`</ph> is defined.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If so, the file has already been included and need not be reprocessed.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If not, the constant <ph id="ph1">`EXAMPLE_H`</ph> is defined to mark EXAMPLE.H as already processed.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Preprocessor Directives</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>