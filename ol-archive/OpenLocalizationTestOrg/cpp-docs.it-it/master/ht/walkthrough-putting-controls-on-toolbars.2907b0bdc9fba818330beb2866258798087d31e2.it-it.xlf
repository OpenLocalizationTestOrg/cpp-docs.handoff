<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">454194a627ec2f21cf1733de48516320007fec65</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\walkthrough-putting-controls-on-toolbars.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">da0c245bc2c325959ebcc4d6b1222d88dc4aebca</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c2eb64b78ef467631317494f57c2b8e2e8d0eb4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Putting Controls On Toolbars | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Putting Controls On Toolbars</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic describes how to add a toolbar button that contains a Windows control to a toolbar.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In MFC, a toolbar button must be a <bpt id="p1">[</bpt>CMFCToolBarButton Class<ept id="p1">](../mfc/reference/cmfctoolbarbutton-class.md)</ept>-derived class, for example <bpt id="p2">[</bpt>CMFCToolBarComboBoxButton Class<ept id="p2">](../mfc/reference/cmfctoolbarcomboboxbutton-class.md)</ept>, <bpt id="p3">[</bpt>CMFCToolBarEditBoxButton Class<ept id="p3">](../mfc/reference/cmfctoolbareditboxbutton-class.md)</ept>, <bpt id="p4">[</bpt>CMFCDropDownToolbarButton Class<ept id="p4">](../mfc/reference/cmfcdropdowntoolbarbutton-class.md)</ept>, or <bpt id="p5">[</bpt>CMFCToolBarMenuButton Class<ept id="p5">](../mfc/reference/cmfctoolbarmenubutton-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Adding Controls to Toolbars</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To add a control to a toolbar, follow these steps:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Reserve a dummy resource ID for the button in the parent toolbar resource.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For more information about how to create buttons by using the Toolbar Editor in Visual Studio, see the <bpt id="p1">[</bpt>Toolbar Editor<ept id="p1">](../mfc/toolbar-editor.md)</ept> topic.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Reserve a toolbar image (button icon) for the button in all bitmaps of the parent toolbar.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In the message handler that processes the <ph id="ph1">`AFX_WM_RESETTOOLBAR`</ph> message, do the following:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Construct the button control by using a <ph id="ph1">`CMFCToolbarButton`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Replace the dummy button with the new control by using <bpt id="p1">[</bpt>CMFCToolBar::ReplaceButton<ept id="p1">](../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__replacebutton)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can construct the button object on the stack, because <ph id="ph1">`ReplaceButton`</ph> copies the button object and maintains the copy.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If you enabled customization in your application, you may have to reset the toolbar by using the <bpt id="p1">**</bpt>Reset<ept id="p1">**</ept> button on the <bpt id="p2">**</bpt>Toolbars<ept id="p2">**</ept> tab of the <bpt id="p3">**</bpt>Customize<ept id="p3">**</ept> dialog box to see the updated control in your application after recompiling.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The toolbar state is saved in the Windows registry, and the registry information is loaded and applied after the <ph id="ph1">`ReplaceButton`</ph> method is executed during application startup.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Toolbar Controls and Customization</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>Commands<ept id="p1">**</ept> tab of the <bpt id="p2">**</bpt>Customize<ept id="p2">**</ept> dialog box contains a list of commands that are available in the application.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>By default, the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box processes the application menus and builds a list of standard toolbar buttons in each menu category.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To retain the extended functionality that the toolbar controls provide, you must replace the standard toolbar button with the custom control in the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>When you enable customization, you create the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box in the customization handler <ph id="ph1">`OnViewCustomize`</ph> by using the <bpt id="p2">[</bpt>CMFCToolBarsCustomizeDialog Class<ept id="p2">](../mfc/reference/cmfctoolbarscustomizedialog-class.md)</ept> class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Before you display the <bpt id="p1">**</bpt>Customize<ept id="p1">**</ept> dialog box by calling <bpt id="p2">[</bpt>CMFCToolBarsCustomizeDialog::Create<ept id="p2">](../mfc/reference/cmfctoolbarscustomizedialog-class.md#cmfctoolbarscustomizedialog__create)</ept>, call <bpt id="p3">[</bpt>CMFCToolBarsCustomizeDialog::ReplaceButton<ept id="p3">](../mfc/reference/cmfctoolbarscustomizedialog-class.md#cmfctoolbarscustomizedialog__replacebutton)</ept> to replace the standard button with the new control.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Example: Creating a Find Combo Box</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This section describes how to create a <ph id="ph1">`Find`</ph> combo box control that appears on a toolbar and contains recently-used search strings.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The user can type a string in the control and then press the enter key to search a document, or press the escape key to return the focus to the main frame.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This example assumes that the document is displayed in a <bpt id="p1">[</bpt>CEditView Class<ept id="p1">](../mfc/reference/ceditview-class.md)</ept>-derived view.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Creating the Find Control</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>First, create the <ph id="ph1">`Find`</ph> combo box control:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Add the button and its commands to the application resources:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the application resources, add a new button with an <ph id="ph1">`ID_EDIT_FIND`</ph> command ID to a toolbar in your application and to any bitmaps associated with the toolbar.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Create a new menu item with the ID_EDIT_FIND command ID.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Add a new string "Find the text\nFind" to the string table and assign it an <ph id="ph1">`ID_EDIT_FIND_COMBO`</ph> command ID.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>This ID will be used as the command ID of the <ph id="ph1">`Find`</ph> combo box button.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Because <ph id="ph1">`ID_EDIT_FIND`</ph> is a standard command that is processed by <ph id="ph2">`CEditView`</ph>, you are not required to implement a special handler for this command.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>However, you must implement a handler for the new command <ph id="ph1">`ID_EDIT_FIND_COMBO`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Create a new class, <ph id="ph1">`CFindComboBox`</ph>, derived from <bpt id="p1">[</bpt>CComboBox Class<ept id="p1">](../mfc/reference/ccombobox-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`CFindComboBox`</ph> class, override the <ph id="ph2">`PreTranslateMessage`</ph> virtual method.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This method will enable the combo box to process the <bpt id="p1">[</bpt>WM_KEYDOWN<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms646280)</ept> message.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the user hits the escape key (<ph id="ph1">`VK_ESCAPE`</ph>), return the focus to the main frame window.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If the user hits the Enter key (<ph id="ph1">`VK_ENTER`</ph>), post to the main frame window a <ph id="ph2">`WM_COMMAND`</ph> message that contains the <ph id="ph3">`ID_EDIT_FIND_COMBO`</ph> command ID.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Create a class for the <ph id="ph1">`Find`</ph> combo box button, derived from <bpt id="p1">[</bpt>CMFCToolBarComboBoxButton Class<ept id="p1">](../mfc/reference/cmfctoolbarcomboboxbutton-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In this example, it is named <ph id="ph1">`CFindComboButton`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The constructor of <ph id="ph1">`CMFCToolbarComboBoxButton`</ph> takes three parameters: the command ID of the button, the button image index, and the style of the combo box.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Set these parameters as follows:</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Pass the <ph id="ph1">`ID_EDIT_FIND_COMBO`</ph> as the command ID.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CCommandManager::GetCmdImage<ept id="p1">](http://msdn.microsoft.com/en-us/4094d08e-de74-4398-a483-76d27a742dca)</ept> with <ph id="ph1">`ID_EDIT_FIND`</ph> to obtain the image index.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For a list of available combo box styles, see <bpt id="p1">[</bpt>Combo-Box Styles<ept id="p1">](../mfc/reference/combo-box-styles.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`CFindComboButton`</ph> class, override the <ph id="ph2">`CMFCToolbarComboBoxButton::CreateCombo`</ph> method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Here you should create the <ph id="ph1">`CFindComboButton`</ph> object and return a pointer to it.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Use the <bpt id="p1">[</bpt>IMPLEMENT_SERIAL<ept id="p1">](../mfc/reference/run-time-object-model-services.md#implement_serial)</ept> macro to make the combo button persistent.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The workspace manager automatically loads and saves the button's state in the Windows registry.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Implement the <ph id="ph1">`ID_EDIT_FIND_COMBO`</ph> handler in your document view.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>CMFCToolBar::GetCommandButtons<ept id="p1">](../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__getcommandbuttons)</ept> with <ph id="ph1">`ID_EDIT_FIND_COMBO`</ph> to retrieve all <ph id="ph2">`Find`</ph> combo box buttons.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>There can be several copies of a button with the same command ID because of customization.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>In the ID_EDIT_FIND message handler <ph id="ph1">`OnFind`</ph>, use <bpt id="p1">[</bpt>CMFCToolBar::IsLastCommandFromButton<ept id="p1">](../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__islastcommandfrombutton)</ept> to determine whether the find command was sent from the <ph id="ph2">`Find`</ph> combo box button.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If so, find the text and add the search string to the combo box.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Adding the Find Control to the Main Toolbar</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To add the combo box button to the toolbar, follow these steps:</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Implement the <ph id="ph1">`AFX_WM_RESETTOOLBAR`</ph> message handler <ph id="ph2">`OnToolbarReset`</ph> in the main frame window.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The framework sends this message to the main frame window when a toolbar is initialized during application startup, or when a toolbar is reset during customization.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>In either case, you must replace the standard toolbar button with the custom <ph id="ph1">`Find`</ph> combo box button.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>In the <ph id="ph1">`AFX_WM_RESETTOOLBAR`</ph> handler, examine the toolbar ID, that is, the <ph id="ph2">`WPARAM`</ph> of the <ph id="ph3">`AFX_WM_RESETTOOLBAR`</ph> message.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>If the toolbar ID is equal to that of the toolbar that contains the <ph id="ph1">`Find`</ph> combo box button, call <bpt id="p1">[</bpt>CMFCToolBar::ReplaceButton<ept id="p1">](../mfc/reference/cmfctoolbar-class.md#cmfctoolbar__replacebutton)</ept> to replace the <ph id="ph2">`Find`</ph> button (that is, the button with the command ID <ph id="ph3">`ID_EDIT_FIND)`</ph> with a <ph id="ph4">`CFindComboButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can construct a <ph id="ph1">`CFindComboBox`</ph> object on the stack, because <ph id="ph2">`ReplaceButton`</ph> copies the button object and maintains the copy.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Adding the Find Control to the Customize Dialog Box</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>In the customization handler <ph id="ph1">`OnViewCustomize`</ph>, call <bpt id="p1">[</bpt>CMFCToolBarsCustomizeDialog::ReplaceButton<ept id="p1">](../mfc/reference/cmfctoolbarscustomizedialog-class.md#cmfctoolbarscustomizedialog__replacebutton)</ept> to replace the <ph id="ph2">`Find`</ph> button (that is, the button with the command ID <ph id="ph3">`ID_EDIT_FIND)`</ph> with a <ph id="ph4">`CFindComboButton`</ph> object.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Hierarchy Chart</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Classes</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>CMFCToolBar Class</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>CMFCToolBarButton Class</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>CMFCToolBarComboBoxButton Class</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>CMFCToolBarsCustomizeDialog Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>