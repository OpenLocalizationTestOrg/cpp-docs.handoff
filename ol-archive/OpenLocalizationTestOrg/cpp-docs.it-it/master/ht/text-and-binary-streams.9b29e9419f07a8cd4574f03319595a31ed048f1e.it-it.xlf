<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">974df88af4c5bebdb27c60442bbdb35d01084751</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\text-and-binary-streams.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2f08a694cafaa5271186d404a04e4fc2af66d065</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9212a13cd25789ed23cb8379349b44b39e068ce5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Text and Binary Streams | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Text and Binary Streams</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A text stream consists of one or more lines of text that can be written to a text-oriented display so that they can be read.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When reading from a text stream, the program reads an <ph id="ph1">`NL`</ph> (newline) at the end of each line.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>When writing to a text stream, the program writes an <ph id="ph1">`NL`</ph> to signal the end of a line.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To match differing conventions among target environments for representing text in files, the library functions can alter the number and representations of characters transmitted between the program and a text stream.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Thus, positioning within a text stream is limited.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can obtain the current file-position indicator by calling <bpt id="p1">[</bpt>fgetpos<ept id="p1">](../c-runtime-library/reference/fgetpos.md)</ept> or <bpt id="p2">[</bpt>ftell<ept id="p2">](../c-runtime-library/reference/ftell-ftelli64.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can position a text stream at a position obtained this way, or at the beginning or end of the stream, by calling <bpt id="p1">[</bpt>fsetpos<ept id="p1">](../c-runtime-library/reference/fsetpos.md)</ept> or <bpt id="p2">[</bpt>fseek<ept id="p2">](../c-runtime-library/reference/fseek-fseeki64.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Any other change of position might well be not supported.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For maximum portability, the program should not write:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Empty files.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Space characters at the end of a line.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Partial lines (by omitting the <ph id="ph1">`NL`</ph> at the end of a file).</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>characters other than the printable characters, NL, and <ph id="ph1">`HT`</ph> (horizontal tab).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you follow these rules, the sequence of characters you read from a text stream (either as byte or multibyte characters) will match the sequence of characters you wrote to the text stream when you created the file.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Otherwise, the library functions can remove a file you create if the file is empty when you close it.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Or they can alter or delete characters you write to the file.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A binary stream consists of one or more bytes of arbitrary information.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can write the value stored in an arbitrary object to a (byte-oriented) binary stream and read exactly what was stored in the object when you wrote it.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The library functions do not alter the bytes you transmit between the program and a binary stream.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>They can, however, append an arbitrary number of null bytes to the file that you write with a binary stream.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The program must deal with these additional null bytes at the end of any binary stream.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Thus, positioning within a binary stream is well defined, except for positioning relative to the end of the stream.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>You can obtain and alter the current file-position indicator the same as for a text stream.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Moreover, the offsets used by <bpt id="p1">[</bpt>ftell<ept id="p1">](../c-runtime-library/reference/ftell-ftelli64.md)</ept> and <bpt id="p2">[</bpt>fseek<ept id="p2">](../c-runtime-library/reference/fseek-fseeki64.md)</ept> count bytes from the beginning of the stream (which is byte zero), so integer arithmetic on these offsets yields predictable results.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>A byte stream treats a file as a sequence of bytes.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Within the program, the stream looks like the same sequence of bytes, except for the possible alterations described above.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Files and Streams</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>