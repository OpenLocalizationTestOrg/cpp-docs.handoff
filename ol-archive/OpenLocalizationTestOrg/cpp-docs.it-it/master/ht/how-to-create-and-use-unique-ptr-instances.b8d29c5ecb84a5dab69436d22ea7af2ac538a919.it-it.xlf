<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7dfa58929c9707635abdc0e2fc0e98681323929b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\how-to-create-and-use-unique-ptr-instances.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc480c709cb39445b1fd7f36737f7fef8c967343</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">37231a377f8755fa0a3d1b9d7f5c5d184b0e8dc8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Create and Use unique_ptr Instances | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Create and Use unique_ptr Instances</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>unique_ptr<ept id="p1">](../standard-library/unique-ptr-class.md)</ept> does not share its pointer.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It cannot be copied to another <ph id="ph1">`unique_ptr`</ph>, passed by value to a function, or used in any Standard Template Library (STL) algorithm that requires copies to be made.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`unique_ptr`</ph> can only be moved.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This means that the ownership of the memory resource is transferred to another <ph id="ph1">`unique_ptr`</ph> and the original <ph id="ph2">`unique_ptr`</ph> no longer owns it.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>We recommend that you restrict an object to one owner, because multiple ownership adds complexity to the program logic.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Therefore, when you need a smart pointer for a plain C++ object, use <ph id="ph1">`unique_ptr`</ph>, and when you construct a <ph id="ph2">`unique_ptr`</ph>, use the <bpt id="p1">[</bpt>make_unique<ept id="p1">](http://msdn.microsoft.com/Library/4b5fa0d6-fd1b-42b3-a35d-d71c3b6529f8)</ept> helper function.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The following diagram illustrates the transfer of ownership between two <ph id="ph1">`unique_ptr`</ph> instances.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Moving the ownership of a unique&amp;#95;ptr</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>is defined in the <ph id="ph1">`&lt;memory&gt;`</ph> header in the STL.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It is exactly is efficient as a raw pointer and can be used in STL containers.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The addition of <ph id="ph1">`unique_ptr`</ph> instances to STL containers is efficient because the move constructor of the <ph id="ph2">`unique_ptr`</ph> eliminates the need for a copy operation.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example shows how to create <ph id="ph1">`unique_ptr`</ph> instances and pass them between functions.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>stl_smart_pointers#210</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These examples demonstrate this basic characteristic of <ph id="ph1">`unique_ptr`</ph>: it can be moved, but not copied.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>"Moving" transfers ownership to a new <ph id="ph1">`unique_ptr`</ph> and resets the old <ph id="ph2">`unique_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example shows how to create <ph id="ph1">`unique_ptr`</ph> instances and use them in a vector.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>stl_smart_pointers#211</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In the range for  loop, notice that the <ph id="ph1">`unique_ptr`</ph> is passed by reference.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If you try to pass by value here, the compiler will throw an error because the <ph id="ph1">`unique_ptr`</ph> copy constructor is deleted.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following example shows how to initialize a <ph id="ph1">`unique_ptr`</ph> that is a class member.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>stl_smart_pointers#212</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You can use <bpt id="p1">[</bpt>make_unique<ept id="p1">](http://msdn.microsoft.com/Library/4b5fa0d6-fd1b-42b3-a35d-d71c3b6529f8)</ept> to create a <ph id="ph1">`unique_ptr`</ph> to an array, but you cannot use <ph id="ph2">`make_unique`</ph> to initialize the array elements.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>stl_smart_pointers#213</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more examples, see <bpt id="p1">[</bpt>make_unique<ept id="p1">](http://msdn.microsoft.com/Library/4b5fa0d6-fd1b-42b3-a35d-d71c3b6529f8)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Smart Pointers</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>make_unique</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>