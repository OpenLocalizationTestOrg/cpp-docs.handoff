<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6c3f689831613589dc158c793d744c8fa948caff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\containers-compound-files.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5453afd1b6eb13fec7fbfd6df210ba4897141fb8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">59d971531f74401287c0bae9d0a33a5599e03a0a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Containers: Compound Files | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Containers: Compound Files</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article explains the components and implementation of compound files and the advantages and disadvantages of using compound files in your OLE applications.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Compound files are an integral part of OLE.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>They are used to facilitate data transfer and OLE document storage.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Compound files are an implementation of the Active structured storage model.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Consistent interfaces exist that support serialization to a storage, a stream, or a file object.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Compound files are supported in the Microsoft Foundation Class Library by the classes <ph id="ph1">`COleStreamFile`</ph> and <ph id="ph2">`COleDocument`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Using a compound file does not imply that the information comes from an OLE document or a compound document.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Compound files are just one of the ways to store compound documents, OLE documents, and other data.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Components of a Compound File</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The OLE implementation of compound files uses three object types: stream objects, storage objects, and <ph id="ph1">`ILockBytes`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These objects are similar to the components of a standard file system in the following ways:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Stream objects, like files, store data of any type.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Storage objects, like directories, can contain other storage and stream objects.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LockBytes<ept id="p1">**</ept> objects represent the interface between the storage objects and the physical hardware.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>They determine how the actual bytes are written to whatever storage device the <bpt id="p1">**</bpt>LockBytes<ept id="p1">**</ept> object is accessing, such as a hard drive or an area of global memory.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about <bpt id="p1">**</bpt>LockBytes<ept id="p1">**</ept> objects and the <ph id="ph1">`ILockBytes`</ph> interface, see the <bpt id="p2">*</bpt>OLE Programmer's Reference<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Advantages and Disadvantages of Compound Files</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Compound files provide benefits not available with earlier methods of file storage.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>They include:</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Incremental file accessing.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>File access modes.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Standardization of file structure.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The potential disadvantages of compound files — large size and performance issues relating to storage on floppy discs — should be considered when deciding whether to use them in your application.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Incremental Access to Files</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Incremental access to files is an automatic benefit of using compound files.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Because a compound file can be viewed as a "file system within a file," individual object types, such as stream or storage, can be accessed without the need to load the entire file.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>This can dramatically decrease the time an application needs to access new objects for editing by the user.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Incremental updating, based on the same concept, offers similar benefits.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Instead of saving the entire file just to save the changes made to one object, OLE saves only the stream or storage object edited by the user.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>File Access Modes</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Being able to determine when changes to objects in a compound file are committed to disk is another benefit of using compound files.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The mode in which files are accessed, either transacted or direct, determines when changes are committed.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Transacted mode uses a two-phase commit operation to make changes to objects in a compound file, thereby keeping both the old and the new copies of the document available until the user chooses to either save or undo the changes.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Direct mode incorporates changes to the document as they are made, without the ability to later undo them.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For more information about access modes, see the <bpt id="p1">*</bpt>OLE Programmer's Reference<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Standardization</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The standardized structure of compound files allows different OLE applications to browse through compound files created by your OLE application with no knowledge of the application that actually created the file.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Size and Performance Considerations</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Because of the complexity of the compound file storage structure and the ability to save data incrementally, files using this format tend to be larger than other files using unstructured or "flat file" storage.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>If your application frequently loads and saves files, using compound files can cause the file size to increase much more quickly than noncompound files.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Because compound files can get large, the access time for files stored on and loaded from floppy disks can also be affected, resulting in slower access to files.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Another issue that affects performance is compound-file fragmentation.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The size of a compound file is determined by the difference between the first and last disk sectors used by the file.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A fragmented file can contain many areas of free space that do not contain data, but are counted when calculating the size.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>During the lifetime of a compound file, these areas are created by the insertion or deletion of storage objects.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Using Compound Files Format for Your Data</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>After successfully creating an application that has a document class derived from <ph id="ph1">`COleDocument`</ph>, ensure that your main document constructor calls <ph id="ph2">`EnableCompoundFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>When the application wizard creates OLE container applications, this call is inserted for you.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">*</bpt>OLE Programmer's Reference<ept id="p1">*</ept>, see <bpt id="p2">[</bpt>IStream<ept id="p2">](http://msdn.microsoft.com/library/windows/desktop/aa380034)</ept>, <bpt id="p3">[</bpt>IStorage<ept id="p3">](http://msdn.microsoft.com/library/windows/desktop/aa380015)</ept>, and <bpt id="p4">[</bpt>ILockBytes<ept id="p4">](http://msdn.microsoft.com/library/windows/desktop/aa379238)</ept>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Containers</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Containers: User-Interface Issues</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>COleStreamFile Class</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>COleDocument Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>