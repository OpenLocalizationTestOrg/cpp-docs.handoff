<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">241d744286e1ca29fe517a2e15ef4193c7f50987</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\relationships-among-mfc-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a56b2a10784dc2a6ad44fc4e5b592aed4ce15eac</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47ef20f143c7bde988bd56b6ef289ab5a408a0d7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Relationships Among MFC Objects | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Relationships Among MFC Objects</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To help put the document/view creation process in perspective, consider a running program: a document, the frame window used to contain the view, and the view associated with the document.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A document keeps a list of the views of that document and a pointer to the document template that created the document.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A view keeps a pointer to its document and is a child of its parent frame window.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A document frame window keeps a pointer to its current active view.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>A document template keeps a list of its open documents.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The application keeps a list of its document templates.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows keeps track of all open windows so it can send messages to them.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>These relationships are established during document/view creation.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following table shows how objects in a running program can access other objects.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Any object can obtain a pointer to the application object by calling the global function <bpt id="p1">[</bpt>AfxGetApp<ept id="p1">](../mfc/reference/application-information-and-management.md#afxgetapp)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Gaining Access to Other Objects in Your Application</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>From object</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>How to access other objects</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Document</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>GetFirstViewPosition<ept id="p1">](../mfc/reference/cdocument-class.md#cdocument__getfirstviewposition)</ept> and <bpt id="p2">[</bpt>GetNextView<ept id="p2">](../mfc/reference/cdocument-class.md#cdocument__getnextview)</ept> to access the document's view list.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>GetDocTemplate<ept id="p1">](../mfc/reference/cdocument-class.md#cdocument__getdoctemplate)</ept> to get the document template.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>View</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>GetDocument<ept id="p1">](../mfc/reference/cview-class.md#cview__getdocument)</ept> to get the document.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>GetParentFrame<ept id="p1">](../mfc/reference/cwnd-class.md#cwnd__getparentframe)</ept> to get the frame window.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Document frame window</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>GetActiveView<ept id="p1">](../mfc/reference/cframewnd-class.md#cframewnd__getactiveview)</ept> to get the current view.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>GetActiveDocument<ept id="p1">](../mfc/reference/cframewnd-class.md#cframewnd__getactivedocument)</ept> to get the document attached to the current view.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>MDI frame window</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Call <bpt id="p1">[</bpt>MDIGetActive<ept id="p1">](../mfc/reference/cmdiframewnd-class.md#cmdiframewnd__mdigetactive)</ept> to get the currently active <bpt id="p2">[</bpt>CMDIChildWnd<ept id="p2">](../mfc/reference/cmdichildwnd-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Typically, a frame window has one view, but sometimes, as in splitter windows, the same frame window contains multiple views.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The frame window keeps a pointer to the currently active view; the pointer is updated any time another view is activated.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A pointer to the main frame window is stored in the <bpt id="p1">[</bpt>m_pMainWnd<ept id="p1">](../mfc/reference/cwinthread-class.md#cwinthread__m_pmainwnd)</ept> member variable of the application object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A call to <ph id="ph1">`OnFileNew`</ph> in your override of the <ph id="ph2">`InitInstance`</ph> member function of <ph id="ph3">`CWinApp`</ph> sets <ph id="ph4">`m_pMainWnd`</ph> for you.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>If you do not call <ph id="ph1">`OnFileNew`</ph>, you must set the variable's value in <ph id="ph2">`InitInstance`</ph> yourself.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>(SDI COM component (server) applications may not set the variable if /Embedding is on the command line.) Note that <ph id="ph1">`m_pMainWnd`</ph> is now a member of class <ph id="ph2">`CWinThread`</ph> rather than <ph id="ph3">`CWinApp`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Document Templates and the Document/View Creation Process</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Document Template Creation</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Document/View Creation</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Creating New Documents, Windows, and Views</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>