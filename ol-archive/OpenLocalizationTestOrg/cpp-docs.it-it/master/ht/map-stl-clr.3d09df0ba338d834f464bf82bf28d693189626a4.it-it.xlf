<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fb05d99fe53beacc936081e5fcd61b5c48b203e9</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\map-stl-clr.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a0fd6982327452b402b6f656a9d071e9be69d37</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02f2dd1a628348a3e39ecfaa24de28400e0014b3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>map (STL-CLR) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>map (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class describes an object that controls a varying-length sequence of elements that has bidirectional access.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You use the container <ph id="ph1">`map`</ph> to manage a sequence of elements as a (nearly) balanced ordered tree of nodes, each storing one element.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>An element consists of a key, for ordering the sequence, and a mapped value, which goes along for the ride.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In the description below, <ph id="ph1">`GValue`</ph> is the same as:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>where:</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>is the same as <ph id="ph1">`Key`</ph> unless the latter is a ref type, in which case it is</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>is the same as <ph id="ph1">`Mapped`</ph> unless the latter is a ref type, in which case it is</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Key</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The type of the key component of an element in the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Mapped</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The type of the additional component of an element in the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Type Definition</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>map::const_iterator (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The type of a constant iterator for the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>map::const_reference (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The type of a constant reference to an element.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>map::const_reverse_iterator (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The type of a constant reverse iterator for the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>map::difference_type (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The type of a (possibly signed) distance between two elements.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>map::generic_container (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The type of the generic interface for the container.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>map::generic_iterator (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The type of an iterator for the generic interface for the container.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>map::generic_reverse_iterator (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The type of a reverse iterator for the generic interface for the container.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>map::generic_value (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The type of an element for the generic interface for the container.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>map::iterator (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The type of an iterator for the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>map::key_compare (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The ordering delegate for two keys.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>map::key_type (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The type of an ordering key.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>map::mapped_type (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The type of the mapped value associated with each key.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>map::reference (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The type of a reference to an element.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>map::reverse_iterator (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The type of a reverse iterator for the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>map::size_type (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The type of a (non-negative) distance between two elements.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>map::value_compare (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The ordering delegate for two element values.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>map::value_type (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The type of an element.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Member Function</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>map::begin (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Designates the beginning of the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>map::clear (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Removes all elements.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>map::count (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Counts elements matching a specified key.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>map::empty (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Tests whether no elements are present.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>map::end (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Designates the end of the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>map::equal_range (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Finds range that matches a specified key.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>map::erase (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Removes elements at specified positions.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>map::find (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Finds an element that matches a specified key.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>map::insert (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Adds elements.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>map::key_comp (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Copies the ordering delegate for two keys.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>map::lower_bound (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Finds beginning of range that matches a specified key.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>map::make_value (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Constructs a value object.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>map::map (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Constructs a container object.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>map::rbegin (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Designates the beginning of the reversed controlled sequence.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>map::rend (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Designates the end of the reversed controlled sequence.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>map::size (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Counts the number of elements.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>map::swap (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Swaps the contents of two containers.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>map::to_array (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Copies the controlled sequence to a new array.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>map::upper_bound (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Finds end of range that matches a specified key.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>map::value_comp (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Copies the ordering delegate for two element values.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Operator</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>map::operator= (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Replaces the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>map::operator(STL/CLR)</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Maps a key to its associated mapped value.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>operator!= (map) (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Determines if a <ph id="ph1">`map`</ph> object is not equal to another <ph id="ph2">`map`</ph> object.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>operator&lt; (map) (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Determines if a <ph id="ph1">`map`</ph> object is less than another <ph id="ph2">`map`</ph> object.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>operator&lt;= (map) (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Determines if a <ph id="ph1">`map`</ph> object is less than or equal to another <ph id="ph2">`map`</ph> object.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>operator== (map) (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Determines if a <ph id="ph1">`map`</ph> object is equal to another <ph id="ph2">`map`</ph> object.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>operator&gt; (map) (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Determines if a <ph id="ph1">`map`</ph> object is greater than another <ph id="ph2">`map`</ph> object.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>operator&gt;= (map) (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Determines if a <ph id="ph1">`map`</ph> object is greater than or equal to another <ph id="ph2">`map`</ph> object.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Interface</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.ICloneable&gt;</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Duplicate an object.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.IEnumerable&gt;</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Sequence through elements.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.ICollection&gt;</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Maintain group of elements.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Sequence through typed elements.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.ICollection%601&gt;</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>Maintain group of typed elements.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>&lt;xref:System.Collections.Generic.IDictionary%602&gt;</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Maintain group of {key, value} pairs.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>ITree&lt;Key, Value&gt;</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Maintain generic container.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The object allocates and frees storage for the sequence it controls as individual nodes.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>It inserts elements into a (nearly) balanced tree that it keeps ordered by altering the links between nodes, never by copying the contents of one node to another.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>That means you can insert and remove elements freely without disturbing remaining elements.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The object orders the sequence it controls by calling a stored delegate object of type <bpt id="p1">[</bpt>map::key_compare (STL/CLR)<ept id="p1">](../dotnet/map-key-compare-stl-clr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>You can specify the stored delegate object when you construct the map; if you specify no delegate object, the default is the comparison <ph id="ph1">`operator&lt;(key_type, key_type)`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>You access this stored object by calling the member function <bpt id="p1">[</bpt>map::key_comp (STL/CLR)<ept id="p1">](../dotnet/map-key-comp-stl-clr.md)</ept><ph id="ph1">`()`</ph>.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Such a delegate object must impose a strict weak ordering on keys of type <bpt id="p1">[</bpt>map::key_type (STL/CLR)<ept id="p1">](../dotnet/map-key-type-stl-clr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>That means, for any two keys <ph id="ph1">`X`</ph> and <ph id="ph2">`Y`</ph>:</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>returns the same Boolean result on every call.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`key_comp()(X, Y)`</ph> is true, then <ph id="ph2">`key_comp()(Y, X)`</ph> must be false.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`key_comp()(X, Y)`</ph> is true, then <ph id="ph2">`X`</ph> is said to be ordered before <ph id="ph3">`Y`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`!key_comp()(X, Y) &amp;&amp; !key_comp()(Y, X)`</ph> is true, then <ph id="ph2">`X`</ph> and <ph id="ph3">`Y`</ph> are said to have equivalent ordering.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>For any element <ph id="ph1">`X`</ph> that precedes <ph id="ph2">`Y`</ph> in the controlled sequence, <ph id="ph3">`key_comp()(Y, X)`</ph> is false.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>(For the default delegate object, keys never decrease in value.) Unlike template class <bpt id="p1">[</bpt>map<ept id="p1">](../dotnet/map-stl-clr.md)</ept>, an object of template class <ph id="ph1">`map`</ph> does not require that keys for all elements are unique.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>(Two or more keys can have equivalent ordering.)</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Each element contains a separate key and a mapped value.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>The sequence is represented in a way that permits lookup, insertion, and removal of an arbitrary element with a number of operations proportional to the logarithm of the number of elements in the sequence (logarithmic time).</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Moreover, inserting an element invalidates no iterators, and removing an element invalidates only those iterators which point at the removed element.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>A map supports bidirectional iterators, which means you can step to adjacent elements given an iterator that designates an element in the controlled sequence.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>A special head node corresponds to the iterator returned by <bpt id="p1">[</bpt>map::end (STL/CLR)<ept id="p1">](../dotnet/map-end-stl-clr.md)</ept><ph id="ph1">`()`</ph>.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>You can decrement this iterator to reach the last element in the controlled sequence, if present.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>You can increment a map iterator to reach the head node, and it will then compare equal to <ph id="ph1">`end()`</ph>.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>But you cannot dereference the iterator returned by <ph id="ph1">`end()`</ph>.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Note that you cannot refer to a map element directly given its numerical position -- that requires a random-access iterator.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A map iterator stores a handle to its associated map node, which in turn stores a handle to its associated container.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>You can use iterators only with their associated container objects.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A map iterator remains valid so long as its associated map node is associated with some map.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Moreover, a valid iterator is dereferencable -- you can use it to access or alter the element value it designates -- so long as it is not equal to <ph id="ph1">`end()`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Erasing or removing an element calls the destructor for its stored value.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Destroying the container erases all elements.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Thus, a container whose element type is a ref class ensures that no elements outlive the container.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Note, however, that a container of handles does <ph id="ph1">`not`</ph> destroy its elements.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>cliext/map&gt;</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> cliext</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>hash_map (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>hash_map (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>hash_multiset (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>hash_set (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>map</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>multiset (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>set (STL/CLR)</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>STL/CLR Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>