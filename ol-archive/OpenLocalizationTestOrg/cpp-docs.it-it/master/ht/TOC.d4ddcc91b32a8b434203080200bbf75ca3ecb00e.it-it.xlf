<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="it-it">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c24bda393f474e83cd4fd8af0cef1b3de278cfe5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\dotnet\TOC.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12cc60d38e333e8e90fc5c8f483950113abbfcc8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29184c58b445afbb7c3f5df6f4615ff06fe05813</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>.NET Programming with C++-CLI (Visual C++)</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C++-CLI Tasks</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>How to: Create CLR Empty Projects</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>How to: Create CLR Console Applications (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>How to: Use Tracking References in C++-CLI</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>How to: Use Arrays in C++-CLI</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>How to: Define and Consume Classes and Structs (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>C++ Stack Semantics for Reference Types</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>User-Defined Operators (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>User-Defined Conversions (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>initonly (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>How to: Define and Use Delegates (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>How to: Define and consume enums in C++-CLI</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>How to: Use Events in C++-CLI</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>How to: Define an Interface Static Constructor (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>How to: Declare Override Specifiers in Native Compilations (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>How to: Use Properties in C++-CLI</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>How to: Use safe_cast in C++-CLI</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Native and .NET Interoperability</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Mixed (Native and Managed) Assemblies</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>How to: Migrate to -clr</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>How to: Compile MFC and ATL Code By Using -clr</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Initialization of Mixed Assemblies</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Library Support for Mixed Assemblies</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Performance Considerations for Interop (C++)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Application Domains and Visual C++</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Double Thunking (C++)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Avoiding Exceptions on CLR Shutdown When Consuming COM Objects Built with -clr</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>How to: Create a Partially Trusted Application by Removing Dependency on the CRT Library DLL</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Using a Windows Form User Control in MFC</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Windows Forms-MFC Programming Differences</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Hosting a Windows Form User Control in an MFC Dialog Box</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>How to: Create the User Control and Host in a Dialog Box</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>How to: Do DDX-DDV Data Binding with Windows Forms</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>How to: Sink Windows Forms Events from Native C++ Classes</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Hosting a Windows Forms User Control as an MFC View</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>How to: Create the User Control and Host MDI View</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>How to: Add Command Routing to the Windows Forms Control</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>How to: Call Properties and Methods of the Windows Forms Control</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Hosting a Windows Form User Control as an MFC Dialog Box</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Calling Native Functions from Managed Code</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Using Explicit PInvoke in C++ (DllImport Attribute)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>How to: Call Native DLLs from Managed Code Using PInvoke</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>How to: Marshal Strings Using PInvoke</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>How to: Marshal Structures Using PInvoke</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>How to: Marshal Arrays Using PInvoke</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>How to: Marshal Function Pointers Using PInvoke</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>How to: Marshal Embedded Pointers Using PInvoke</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Using C++ Interop (Implicit PInvoke)</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>How to: Marshal ANSI Strings Using C++ Interop</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>How to: Marshal Unicode Strings Using C++ Interop</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>How to: Marshal COM Strings Using C++ Interop</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>How to: Marshal Structures Using C++ Interop</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>How to: Marshal Arrays Using C++ Interop</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>How to: Marshal Callbacks and Delegates By Using C++ Interop</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>How to: Marshal Embedded Pointers Using C++ Interop</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>How to: Extend the Marshaling Library</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>How to: Access Characters in a System::String</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>How to: Convert char * String to System::Byte Array</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>How to: Convert System::String to wchar_t<bpt id="p1">*</bpt> or char<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>How to: Convert System::String to Standard String</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>How to: Convert Standard String to System::String</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>How to: Obtain a Pointer to Byte Array</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>How to: Load Unmanaged Resources into a Byte Array</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>How to: Modify Reference Class in a Native Function</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>How to: Determine if an Image is Native or CLR</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>How to: Add Native DLL to Global Assembly Cache</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>How to: Hold Reference to Value Type in Native Type</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>How to: Hold Object Reference in Unmanaged Memory</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>How to: Detect -clr Compilation</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>How to: Convert Between System::Guid and _GUID</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>How to: Specify an out Parameter</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>How to: Use a Native Type in a -clr Compilation</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>How to: Declare Handles in Native Types</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>How to: Wrap Native Class for Use by C</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>C++-CLI Migration Primer</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Outline of Changes (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Language Keywords (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Managed Types (C++-CL)</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Declaration of a Managed Class Type</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Declaration of a CLR Reference Class Object</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Declaration of a CLR Array</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Changes in Constructor Initialization Order</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Changes in Destructor Semantics</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Member Declarations within a Class or Interface (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Property Declaration</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Property Index Declaration</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Delegates and Events</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Sealing a Virtual Function</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Overloaded Operators</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Changes to Conversion Operators</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Explicit Override of an Interface Member</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Private Virtual Functions</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Static Const Int Linkage Is No Longer Literal</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Value Types and Their Behaviors (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>CLR Enum Type</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Implicit Boxing of Value Types</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>A Tracking Handle to a Boxed Value</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Value Type Semantics</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>General Language Changes (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>String Literal</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Param Array and Ellipsis</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>typeof Goes to T::typeid</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Initializer Lists</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Cast Notation and Introduction of safe_cast&lt;&gt;</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Pure and Verifiable Code (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Mixed, Pure, and Verifiable Feature Comparison (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>How to: Migrate to -clr:pure (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>How to: Create Verifiable C++ Projects (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>How to: Migrate to -clr:safe (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Using Verifiable Assemblies with SQL Server (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Converting Projects from Mixed Mode to Pure Intermediate Language</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Regular Expressions (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>How to: Use Regular Expressions for Simple Matching (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>How to: Use Regular Expressions to Extract Data Fields (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>How to: Use Regular Expressions to Rearrange Data (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>How to: Use Regular Expressions to Search and Replace (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>How to: Use Regular Expressions to Validate Data Formatting (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>How to: Parse Strings Using the Split Method (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>How to: Parse Strings Using Regular Expressions (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>File Handling and I-O (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>How to: Enumerate Files in a Directory (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>How to: Monitor File System Changes (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>How to: Read a Binary File (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>How to: Read a Text File (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>How to: Retrieve File Information (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>How to: Write a Binary File (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>How to: Write a Text File (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Graphics Operations (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>How to: Convert Image File Formats with the .NET Framework</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>How to: Display Images with the .NET Framework</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>How to: Draw Shapes with the .NET Framework</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>How to: Rotate Images with the .NET Framework</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Windows Operations (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>How to: Determine if Shutdown Has Started (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>How to: Determine the User Interactive State (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>How to: Read Data from the Windows Registry (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>How to: Read Windows Performance Counters (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>How to: Retrieve Text from the Clipboard (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>How to: Retrieve the .NET Framework Version (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>How to: Retrieve the Current Username (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>How to: Retrieve the Local Machine Name (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>How to: Retrieve the Windows Version (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>How to: Retrieve Time Elapsed Since Startup (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>How to: Store Text in the Clipboard (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>How to: Write Data to the Windows Registry (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Data Access Using ADO.NET (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>How to: Marshal ANSI Strings for ADO.NET (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>How to: Marshal BSTR Strings for ADO.NET (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>How to: Marshal Unicode Strings for ADO.NET (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>How to: Marshal a VARIANT for ADO.NET (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>How to: Marshal a SAFEARRAY for ADO.NET (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Interoperability with Other .NET Languages (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>How to: Implement is and as C# Keywords (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>How to: Implement the lock C# Keyword (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>How to: Consume a C# Indexer (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>Serialization (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Friend Assemblies (C++)</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Managed Types (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Managed Types and the main Function (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalents to C++ Native Types (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>Version Issues for Value Types Nested in Native Types (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>How to: Test for Equality (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>How to: Diagnose and Fix Assembly Compatibility Problems (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Reflection (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>How to: Implement a Plug-In Component Architecture using Reflection (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>How to: Enumerate Data Types in Assemblies using Reflection (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Strong Name Assemblies (Assembly Signing) (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Debug Class (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>STL-CLR Library Reference</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>cliext Namespace</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>STL-CLR Containers</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Requirements for STL-CLR Container Elements</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>How to: Convert from a .NET Collection to a STL-CLR Container</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>How to: Convert from a STL-CLR Container to a .NET Collection</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>How to: Expose an STL-CLR Container from an Assembly</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>adapter (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>collection_adapter (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>collection_adapter::base (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>collection_adapter::begin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>collection_adapter::collection_adapter (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>collection_adapter::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>collection_adapter::end (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>collection_adapter::iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>collection_adapter::key_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>collection_adapter::mapped_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>collection_adapter::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>collection_adapter::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>collection_adapter::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>collection_adapter::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>collection_adapter::swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>collection_adapter::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>make_collection (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>range_adapter (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>range_adapter::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>range_adapter::range_adapter (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>algorithm (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>adjacent_find (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>binary_search (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>copy (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>copy_backward (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>count (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>count_if (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>equal (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>equal_range (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>fill (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>fill_n (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>find (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>find_end (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>find_first_of (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>find_if (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>for_each (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>generate (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>generate_n (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>includes (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>inplace_merge (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>iter_swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>lexicographical_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>lower_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>make_heap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>max (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>max_element (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>merge (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>min (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>min_element (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>mismatch (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>next_permutation (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>nth_element (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>partial_sort (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>partial_sort_copy (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>partition (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>pop_heap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>prev_permutation (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>push_heap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>random_shuffle (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>remove (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>remove_copy (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>remove_copy_if (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>remove_if (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>replace (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>replace_copy (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>replace_copy_if (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>replace_if (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>reverse (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>reverse_copy (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>rotate (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>rotate_copy (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>search (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>search_n (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>set_difference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>set_intersection (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>set_symmetric_difference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>set_union (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>sort (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>sort_heap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>stable_partition (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>stable_sort (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>swap_ranges (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>transform (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>unique (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>unique_copy (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>upper_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>deque (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>deque::assign (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>deque::at (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>deque::back (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>deque::back_item (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>deque::begin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>deque::clear (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>deque::const_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>deque::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>deque::const_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>deque::deque (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>deque::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>deque::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>deque::end (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>deque::erase (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>deque::front (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>deque::front_item (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>deque::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>deque::generic_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>deque::generic_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>deque::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>deque::insert (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>deque::iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>deque::operator!= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>deque::operator(STL-CLR)</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>deque::pop_back (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>deque::pop_front (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>deque::push_back (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>deque::push_front (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>deque::rbegin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>deque::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>deque::rend (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>deque::resize (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>deque::reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>deque::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>deque::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>deque::swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>deque::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>deque::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>operator&lt; (deque) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>operator&lt;= (deque) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>operator= (deque) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>operator== (deque) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>operator&gt; (deque) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>operator&gt;= (deque) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>for each, in</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Iterating Over STL Collection By Using for each</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>How to: Iterate Over Arrays with for each</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>How to: Iterate Over a Generic Collection with for each</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>How to: Iterate Over a User-Defined Collection with for each</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>functional (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>binary_delegate (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>binary_delegate_noreturn (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>binary_negate (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>bind1st (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>bind2nd (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>binder1st (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>binder2nd (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>divides (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>equal_to (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>greater (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>greater_equal (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>less (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>less_equal (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>logical_and (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>logical_not (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>logical_or (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>minus (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>modulus (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>multiplies (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>negate (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>not_equal_to (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>not1 (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>not2 (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>plus (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>unary_delegate (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>unary_delegate_noreturn (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>unary_negate (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>hash_map (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>hash_map::begin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>hash_map::bucket_count (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>hash_map::clear (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>hash_map::const_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>hash_map::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>hash_map::const_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>hash_map::count (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>hash_map::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>hash_map::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>hash_map::end (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>hash_map::equal_range (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>hash_map::erase (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>hash_map::find (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>hash_map::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>hash_map::generic_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>hash_map::generic_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>hash_map::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>hash_map::hash_delegate (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>hash_map::hash_map (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>hash_map::hasher (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>hash_map::insert (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>hash_map::iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>hash_map::key_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>hash_map::key_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>hash_map::key_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>hash_map::load_factor (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>hash_map::lower_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>hash_map::make_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>hash_map::mapped_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>hash_map::max_load_factor (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>hash_map::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>hash_map::operator(STL-CLR)</source>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>hash_map::rbegin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>hash_map::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>hash_map::rehash (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>hash_map::rend (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>hash_map::reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>hash_map::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>hash_map::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>hash_map::swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>hash_map::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>hash_map::upper_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>hash_map::value_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>hash_map::value_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>hash_map::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>hash_multimap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>hash_multimap::begin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>hash_multimap::bucket_count (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>hash_multimap::clear (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>hash_multimap::const_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>hash_multimap::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>hash_multimap::const_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>hash_multimap::count (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>hash_multimap::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>hash_multimap::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>hash_multimap::end (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>hash_multimap::equal_range (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>hash_multimap::erase (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>hash_multimap::find (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>hash_multimap::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>hash_multimap::generic_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>hash_multimap::generic_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>hash_multimap::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>hash_multimap::hash_delegate (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>hash_multimap::hash_multimap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>hash_multimap::hasher (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>hash_multimap::insert (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>hash_multimap::iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>hash_multimap::key_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>hash_multimap::key_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>hash_multimap::key_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>hash_multimap::load_factor (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>hash_multimap::lower_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>hash_multimap::make_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>hash_multimap::mapped_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>hash_multimap::max_load_factor (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>hash_multimap::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>hash_multimap::rbegin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>hash_multimap::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>hash_multimap::rehash (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>hash_multimap::rend (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>hash_multimap::reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>hash_multimap::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>hash_multimap::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>hash_multimap::swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>hash_multimap::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>hash_multimap::upper_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>hash_multimap::value_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>hash_multimap::value_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>hash_multimap::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>hash_multiset (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>hash_multiset::begin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>hash_multiset::bucket_count (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>hash_multiset::clear (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>hash_multiset::const_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>hash_multiset::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>hash_multiset::const_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>hash_multiset::count (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>hash_multiset::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>hash_multiset::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>hash_multiset::end (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>hash_multiset::equal_range (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>hash_multiset::erase (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>hash_multiset::find (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>hash_multiset::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>hash_multiset::generic_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>hash_multiset::generic_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>hash_multiset::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>hash_multiset::hash_delegate (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>hash_multiset::hash_multiset (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>hash_multiset::hasher (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>hash_multiset::insert (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>hash_multiset::iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>hash_multiset::key_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>hash_multiset::key_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>hash_multiset::key_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>hash_multiset::load_factor (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>hash_multiset::lower_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>hash_multiset::make_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>hash_multiset::max_load_factor (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>hash_multiset::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>hash_multiset::rbegin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>hash_multiset::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>hash_multiset::rehash (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>hash_multiset::rend (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>hash_multiset::reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>hash_multiset::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>hash_multiset::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>hash_multiset::swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>hash_multiset::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>hash_multiset::upper_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>hash_multiset::value_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>hash_multiset::value_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>hash_multiset::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>hash_set (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>hash_set::begin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>hash_set::bucket_count (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>hash_set::clear (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>hash_set::const_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>hash_set::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>hash_set::const_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>hash_set::count (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>hash_set::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>hash_set::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>hash_set::end (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>hash_set::equal_range (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>hash_set::erase (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>hash_set::find (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>hash_set::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>hash_set::generic_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>hash_set::generic_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>hash_set::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>hash_set::hash_delegate (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>hash_set::hash_set (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>hash_set::hasher (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>hash_set::insert (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>hash_set::iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>hash_set::key_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>hash_set::key_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>hash_set::key_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>hash_set::load_factor (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>hash_set::lower_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>hash_set::make_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>hash_set::max_load_factor (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>hash_set::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>hash_set::rbegin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>hash_set::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>hash_set::rehash (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>hash_set::rend (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>hash_set::reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>hash_set::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>hash_set::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>hash_set::swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>hash_set::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>hash_set::upper_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>hash_set::value_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>hash_set::value_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>hash_set::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>list (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>list::assign (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>list::back (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>list::back_item (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>list::begin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>list::clear (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>list::const_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>list::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>list::const_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>list::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>list::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>list::end (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>list::erase (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>list::front (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>list::front_item (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>list::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>list::generic_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>list::generic_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>list::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>list::insert (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>list::iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>list::list (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>list::merge (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>list::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>list::pop_back (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>list::pop_front (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>list::push_back (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>list::push_front (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>list::rbegin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>list::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>list::remove (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>list::remove_if (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>list::rend (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>list::resize (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>list::reverse (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>list::reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>list::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>list::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>list::sort (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>list::splice (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>list::swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>list::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>list::unique (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>list::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>operator!= (list) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>operator&lt; (list) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>operator&lt;= (list) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>operator== (list) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>operator&gt; (list) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>operator&gt;= (list) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>map (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>map::begin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>map::clear (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>map::const_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>map::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>map::const_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>map::count (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>map::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>map::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>map::end (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>map::equal_range (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>map::erase (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>map::find (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>map::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>map::generic_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>map::generic_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>map::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>map::insert (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>map::iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>map::key_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>map::key_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>map::key_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>map::lower_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>map::make_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>map::map (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>map::mapped_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>map::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>map::operator(STL-CLR)</source>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>map::rbegin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>map::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>map::rend (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>map::reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>map::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>map::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>map::swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>map::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>map::upper_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>map::value_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>map::value_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>map::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>operator!= (map) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>operator&lt; (map) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>operator&lt;= (map) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>operator== (map) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>operator&gt; (map) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>operator&gt;= (map) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>multimap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>multimap::begin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>multimap::clear (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>multimap::const_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>multimap::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>multimap::const_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>multimap::count (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>multimap::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>multimap::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>multimap::end (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>multimap::equal_range (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>multimap::erase (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>multimap::find (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>multimap::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>multimap::generic_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>multimap::generic_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>multimap::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>multimap::insert (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>multimap::iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>multimap::key_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>multimap::key_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>multimap::key_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>multimap::lower_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>multimap::make_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>multimap::mapped_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>multimap::multimap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>multimap::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>multimap::rbegin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>multimap::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>multimap::rend (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>multimap::reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>multimap::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>multimap::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>multimap::swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>multimap::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>multimap::upper_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>multimap::value_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>multimap::value_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>multimap::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>operator!= (multimap) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>operator&lt; (multimap) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>operator&lt;= (multimap) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>operator== (multimap) (STL-LR)</source>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>operator&gt; (multimap) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>operator&gt;= (multimap) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>multiset (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>multiset::begin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>multiset::clear (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>multiset::const_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>multiset::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>multiset::const_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>multiset::count (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>multiset::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>multiset::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>multiset::end (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>multiset::equal_range (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>multiset::erase (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>multiset::find (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>multiset::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>multiset::generic_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>multiset::generic_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>multiset::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>multiset::insert (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>multiset::iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>multiset::key_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>multiset::key_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>multiset::key_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>multiset::lower_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>multiset::make_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>multiset::multiset (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>multiset::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>multiset::rbegin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>multiset::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>multiset::rend (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>multiset::reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>multiset::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>multiset::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>multiset::swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>multiset::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>multiset::upper_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>multiset::value_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>multiset::value_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>multiset::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>operator!= (multiset) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>operator&lt; (multiset) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>operator&lt;= (multiset) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>operator== (multiset) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>operator&gt; (multiset) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>operator&gt;= (multiset) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>numeric (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>accumulate (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>adjacent_difference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>inner_product (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>partial_sum (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>priority_queue (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>priority_queue::assign (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>priority_queue::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>priority_queue::container_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>priority_queue::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>priority_queue::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>priority_queue::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>priority_queue::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>priority_queue::get_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>priority_queue::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>priority_queue::pop (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>priority_queue::priority_queue (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>priority_queue::push (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>priority_queue::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>priority_queue::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>priority_queue::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>priority_queue::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>priority_queue::top (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>priority_queue::top_item (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>priority_queue::value_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>priority_queue::value_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>priority_queue::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>queue (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>operator!= (queue) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>operator&lt; (queue) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>operator&lt;= (queue) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>operator== (queue) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>operator&gt; (queue) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>operator&gt;= (queue) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>queue::assign (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>queue::back (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>queue::back_item (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>queue::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>queue::container_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>queue::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>queue::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>queue::front (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>queue::front_item (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>queue::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>queue::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>queue::get_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>queue::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>queue::pop (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>queue::push (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>queue::queue (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>queue::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>queue::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>queue::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>queue::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>queue::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>set (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>operator!= (set) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>operator&lt; (set) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>operator&lt;= (set) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>operator== (set) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>operator&gt; (set) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>operator&gt;= (set) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>set::begin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>set::clear (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>set::const_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>set::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>set::const_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>set::count (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>set::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>set::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>set::end (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>set::equal_range (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>set::erase (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>set::find (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>set::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>set::generic_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>set::generic_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>set::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>set::insert (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>set::iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>set::key_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>set::key_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>set::key_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>set::lower_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>set::make_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>set::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>set::rbegin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>set::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>set::rend (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>set::reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>set::set (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>set::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>set::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>set::swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>set::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>set::upper_bound (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>set::value_comp (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>set::value_compare (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>set::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>stack (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>operator!= (stack) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>operator&lt; (stack) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>operator&lt;= (stack) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>operator== (stack) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>operator&gt; (stack) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>operator&gt;= (stack) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>stack::assign (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>stack::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>stack::container_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>stack::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>stack::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>stack::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>stack::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>stack::get_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>stack::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>stack::pop (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>stack::push (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>stack::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>stack::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>stack::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>stack::stack (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>stack::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>stack::top (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>stack::top_item (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>stack::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>utility (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>make_pair (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>operator!= (pair) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>operator&lt; (pair) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>operator&lt;= (pair) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>operator== (pair) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>operator&gt; (pair) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>operator&gt;= (pair) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>pair (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>pair::first (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>pair::first_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>pair::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>pair::pair (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>pair::second (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>pair::second_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>pair::swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>vector (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>operator!= (vector) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>operator&lt; (vector) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>operator&lt;= (vector) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>operator== (vector) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>operator&gt; (vector) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>operator&gt;= (vector) (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>vector::assign (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>vector::at (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>vector::back (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>vector::back_item (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>vector::begin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>vector::capacity (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>vector::clear (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>vector::const_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>vector::const_reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>vector::const_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>vector::difference_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>vector::empty (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>vector::end (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>vector::erase (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>vector::front (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>vector::front_item (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>vector::generic_container (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>vector::generic_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>vector::generic_reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>vector::generic_value (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>vector::insert (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>vector::iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>vector::operator= (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>vector::operator(STL-CLR)</source>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>vector::pop_back (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>vector::push_back (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>vector::rbegin (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>vector::reference (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>vector::rend (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>vector::reserve (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>vector::resize (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>vector::reverse_iterator (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>vector::size (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>vector::size_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>vector::swap (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>vector::to_array (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>vector::value_type (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>vector::vector (STL-CLR)</source>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>C++ Support Library</source>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>Overview of Marshaling in C++</source>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>marshal_as</source>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>marshal_context Class</source>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>marshal_context::marshal_context</source>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>marshal_context::~marshal_context</source>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>marshal_context::marshal_as</source>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>msclr namespace</source>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>Resource Management Classes</source>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>auto_gcroot</source>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>auto_gcroot Class</source>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>auto_gcroot Members</source>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>auto_gcroot::auto_gcroot</source>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>auto_gcroot::~auto_gcroot</source>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>auto_gcroot::attach</source>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>auto_gcroot::get</source>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>auto_gcroot::release</source>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>auto_gcroot::reset</source>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>auto_gcroot::swap</source>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>auto_gcroot::operator=</source>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>auto_gcroot::operator-&gt;</source>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>auto_gcroot::operator!</source>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>auto_gcroot::operator auto_gcroot</source>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>auto_gcroot::operator bool</source>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>swap Function (auto_gcroot)</source>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>auto_handle</source>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>auto_handle Class</source>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>auto_handle Members</source>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>auto_handle::auto_handle</source>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>auto_handle::~auto_handle</source>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>auto_handle::get</source>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>auto_handle::release</source>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>auto_handle::reset</source>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>auto_handle::swap</source>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>auto_handle::operator=</source>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>auto_handle::operator-&gt;</source>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>auto_handle::operator!</source>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>auto_handle::operator auto_handle</source>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>auto_handle::operator bool</source>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>swap Function (auto_handle)</source>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>Synchronization (lock Class)</source>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>lock</source>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>lock Class</source>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>lock Members</source>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>lock::lock</source>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>lock::~lock</source>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>lock::is_locked</source>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>lock::operator bool</source>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>lock::acquire</source>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>lock::try_acquire</source>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>lock::release</source>
        </trans-unit>
        <trans-unit id="1043" translate="yes" xml:space="preserve">
          <source>lock::operator==</source>
        </trans-unit>
        <trans-unit id="1044" translate="yes" xml:space="preserve">
          <source>lock::operator!=</source>
        </trans-unit>
        <trans-unit id="1045" translate="yes" xml:space="preserve">
          <source>lock_when Enum</source>
        </trans-unit>
        <trans-unit id="1046" translate="yes" xml:space="preserve">
          <source>Calling Functions in a Specific Application Domain</source>
        </trans-unit>
        <trans-unit id="1047" translate="yes" xml:space="preserve">
          <source>call_in_appdomain Function</source>
        </trans-unit>
        <trans-unit id="1048" translate="yes" xml:space="preserve">
          <source>com::ptr</source>
        </trans-unit>
        <trans-unit id="1049" translate="yes" xml:space="preserve">
          <source>com::ptr Class</source>
        </trans-unit>
        <trans-unit id="1050" translate="yes" xml:space="preserve">
          <source>ptr Members</source>
        </trans-unit>
        <trans-unit id="1051" translate="yes" xml:space="preserve">
          <source>ptr::ptr</source>
        </trans-unit>
        <trans-unit id="1052" translate="yes" xml:space="preserve">
          <source>ptr::~ptr</source>
        </trans-unit>
        <trans-unit id="1053" translate="yes" xml:space="preserve">
          <source>ptr::Attach</source>
        </trans-unit>
        <trans-unit id="1054" translate="yes" xml:space="preserve">
          <source>ptr::CreateInstance</source>
        </trans-unit>
        <trans-unit id="1055" translate="yes" xml:space="preserve">
          <source>ptr::Detach</source>
        </trans-unit>
        <trans-unit id="1056" translate="yes" xml:space="preserve">
          <source>ptr::GetInterface</source>
        </trans-unit>
        <trans-unit id="1057" translate="yes" xml:space="preserve">
          <source>ptr::QueryInterface</source>
        </trans-unit>
        <trans-unit id="1058" translate="yes" xml:space="preserve">
          <source>ptr::Release</source>
        </trans-unit>
        <trans-unit id="1059" translate="yes" xml:space="preserve">
          <source>ptr::operator=</source>
        </trans-unit>
        <trans-unit id="1060" translate="yes" xml:space="preserve">
          <source>ptr::operator-&gt;</source>
        </trans-unit>
        <trans-unit id="1061" translate="yes" xml:space="preserve">
          <source>ptr::operator!</source>
        </trans-unit>
        <trans-unit id="1062" translate="yes" xml:space="preserve">
          <source>ptr::operator bool</source>
        </trans-unit>
        <trans-unit id="1063" translate="yes" xml:space="preserve">
          <source>Exceptions in C++-CLI</source>
        </trans-unit>
        <trans-unit id="1064" translate="yes" xml:space="preserve">
          <source>Basic Concepts in Using Managed Exceptions</source>
        </trans-unit>
        <trans-unit id="1065" translate="yes" xml:space="preserve">
          <source>Differences in Exception Handling Behavior Under -CLR</source>
        </trans-unit>
        <trans-unit id="1066" translate="yes" xml:space="preserve">
          <source>finally</source>
        </trans-unit>
        <trans-unit id="1067" translate="yes" xml:space="preserve">
          <source>How to: Catch Exceptions in Native Code Thrown from MSIL</source>
        </trans-unit>
        <trans-unit id="1068" translate="yes" xml:space="preserve">
          <source>How to: Define and Install a Global Exception Handler</source>
        </trans-unit>
        <trans-unit id="1069" translate="yes" xml:space="preserve">
          <source>Boxing (C++-CLI)</source>
        </trans-unit>
        <trans-unit id="1070" translate="yes" xml:space="preserve">
          <source>How to: Explicitly Request Boxing</source>
        </trans-unit>
        <trans-unit id="1071" translate="yes" xml:space="preserve">
          <source>How to: Use gcnew to Create Value Types and Use Implicit Boxing</source>
        </trans-unit>
        <trans-unit id="1072" translate="yes" xml:space="preserve">
          <source>How to: Unbox</source>
        </trans-unit>
        <trans-unit id="1073" translate="yes" xml:space="preserve">
          <source>Standard Conversions and Implicit Boxing</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>