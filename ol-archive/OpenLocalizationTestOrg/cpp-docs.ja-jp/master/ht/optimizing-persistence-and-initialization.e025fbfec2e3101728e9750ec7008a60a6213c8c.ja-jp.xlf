<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">00236f31ea60c0ce11e4d459a851188361e06fb7</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\optimizing-persistence-and-initialization.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">604755b88bbb46cfa48f655a2b23b816a29b79d0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">567a3753b719dbd3c1f42e29dc5b22e37816d018</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Optimizing Persistence and Initialization | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Optimizing Persistence and Initialization</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>By default, persistence and initialization in a control are handled by the <ph id="ph1">`DoPropExchange`</ph> member function.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In a typical control, this function contains calls to several <bpt id="p1">**</bpt>PX_<ept id="p1">**</ept> functions (<ph id="ph1">`PX_Color`</ph>, <ph id="ph2">`PX_Font`</ph>, and so on), one for each property.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This approach has the advantage that a single <ph id="ph1">`DoPropExchange`</ph> implementation can be used for initialization, for persistence in binary format, and for persistence in the so-called "property-bag" format used by some containers.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This one function provides all information about the properties and their default values in one convenient place.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>However, this generality comes at the expense of efficiency.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">**</bpt>PX_<ept id="p1">**</ept> functions get their flexibility through multilayered implementations that are inherently less efficient than more direct, but less flexible, approaches.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Furthermore, if a control passes a default value to a <bpt id="p1">**</bpt>PX_<ept id="p1">**</ept> function, that default value must be provided every time, even in situations when the default value may not necessarily be used.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If generating the default value is a nontrivial task (for example, when the value is obtained from an ambient property), then extra, unnecessary work is done in cases where the default value is not used.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>You can improve your control's binary persistence performance by overriding your control's <ph id="ph1">`Serialize`</ph> function.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The default implementation of this member function makes a call to your <ph id="ph1">`DoPropExchange`</ph> function.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By overriding it, you can provide a more direct implementation for binary persistence.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example, consider this <ph id="ph1">`DoPropExchange`</ph> function:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxOpt#1</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>To improve the performance of this control's binary persistence, you can override the <ph id="ph1">`Serialize`</ph> function as follows:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxOpt#2</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dwVersion`</ph> local variable can be used to detect the version of the control's persistent state being loaded or saved.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You can use this variable instead of calling <bpt id="p1">[</bpt>CPropExchange::GetVersion<ept id="p1">](../mfc/reference/cpropexchange-class.md#cpropexchange__getversion)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>To save a little space in the persistent format for a <bpt id="p1">**</bpt>BOOL<ept id="p1">**</ept> property (and to keep it compatible with the format produced by <ph id="ph1">`PX_Bool`</ph>), you can store the property as a <bpt id="p2">**</bpt>BYTE<ept id="p2">**</ept>, as follows:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxOpt#3</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Note that in the load case, a temporary variable is used and then its value is assigned, rather than casting <ph id="ph1">`m_boolProp`</ph> to a <bpt id="p1">**</bpt>BYTE<ept id="p1">**</ept> reference.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The casting technique would result in only one byte of <ph id="ph1">`m_boolProp`</ph> being modified, leaving the remaining bytes uninitialized.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For the same control, you can optimize the control's initialization by overriding <bpt id="p1">[</bpt>COleControl::OnResetState<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__onresetstate)</ept> as follows:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxOpt#4</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Although <ph id="ph1">`Serialize`</ph> and <ph id="ph2">`OnResetState`</ph> have been overridden, the <ph id="ph3">`DoPropExchange`</ph> function should be kept intact because it is still used for persistence in the property-bag format.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>It is important to maintain all three of these functions to ensure that the control manages its properties consistently, regardless of which persistence mechanism the container uses.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Optimization</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>