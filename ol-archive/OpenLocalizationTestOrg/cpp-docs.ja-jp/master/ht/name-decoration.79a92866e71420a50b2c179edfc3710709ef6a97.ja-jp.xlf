<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d66aaf837d4db66aeb9fe254c5570de002f941e0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\error-messages\tool-errors\name-decoration.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4566951f0a52c35b4580af48848c3a2777119abb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b70a0b782272cb497da3d56edb6ec8035560ba38</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ame Decoration | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Name Decoration</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Name decoration usually refers to C++ naming conventions, but can apply to a number of C cases as well.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>By default, C++ uses the function name, parameters, and return type to create a linker name for the function.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Consider the following function:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following table shows the linker name for various calling conventions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Calling convention</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>extern "C" or .c file</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>.cpp, .cxx or /TP</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>C naming convention (<ph id="ph1">`__cdecl`</ph>)</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>_test</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>?test@@ZAXXZ</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Fastcall naming convention (<ph id="ph1">`__fastcall`</ph>)</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>@test@0</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>?test@@YIXXZ</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Standard Call naming convention (<ph id="ph1">`__stdcall`</ph>)</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>_test@0</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>?test@@YGXXZ</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Vectorcall naming convention (<ph id="ph1">`__vectorcall`</ph>)</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>test@@0</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>?test@@YQXXZ</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use extern "C" to call a C function from C++.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Extern "C" forces use of the C naming convention for non-class C++ functions.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Be aware of compiler switches <bpt id="p1">**</bpt>/Tc<ept id="p1">**</ept> or <bpt id="p2">**</bpt>/Tp<ept id="p2">**</ept>, which tell the compiler to ignore the filename extension and compile the file as C or C++, respectively.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>These options may cause names you do not expect.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Having function prototypes that have mismatched parameters can also cause this error.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Name decoration incorporates the parameters of a function into the final decorated function name.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Calling a function with the parameter types that do not match those in the function declaration may also cause LNK2001.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>There is currently no standard for C++ naming between compiler vendors or even between different versions of a compiler.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Therefore linking object files compiled with other compilers may not produce the same naming scheme and thus causes unresolved externals.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Linker Tools Error LNK2001</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>