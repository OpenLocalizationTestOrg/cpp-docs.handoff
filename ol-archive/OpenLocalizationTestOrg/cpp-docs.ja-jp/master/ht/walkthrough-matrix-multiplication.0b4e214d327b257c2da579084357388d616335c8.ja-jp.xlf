<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7d1c1d2b535be601f85844c34852ac406944f28</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\amp\walkthrough-matrix-multiplication.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">63a2410bc324b370847d6258e0129cc9762170a1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fe74b76942fd984790880ccda867e0d5580a4474</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Walkthrough: Matrix Multiplication | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Walkthrough: Matrix Multiplication</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This step-by-step walkthrough demonstrates how to use C++ AMP to accelerate the execution of matrix multiplication.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Two algorithms are presented, one without tiling and one with tiling.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Prerequisites</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Before you start:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Read <bpt id="p1">[</bpt>C++ AMP Overview<ept id="p1">](../../parallel/amp/cpp-amp-overview.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Read <bpt id="p1">[</bpt>Using Tiles<ept id="p1">](../../parallel/amp/using-tiles.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Make sure that <ph id="ph1">[!INCLUDE[win7](../../build/includes/win7_md.md)]</ph>, <ph id="ph2">[!INCLUDE[win8](../../build/reference/includes/win8_md.md)]</ph>, <ph id="ph3">[!INCLUDE[winsvr08_r2](../../parallel/amp/includes/winsvr08_r2_md.md)]</ph>, or <ph id="ph4">[!INCLUDE[winserver8](../../build/reference/includes/winserver8_md.md)]</ph> is installed on your computer.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To create the project</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>On the menu bar in Visual Studio, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>New<ept id="p2">**</ept>, <bpt id="p3">**</bpt>Project<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>Installed<ept id="p1">**</ept> in the templates pane, select <bpt id="p2">**</bpt>Visual C++<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Select <bpt id="p1">**</bpt>Empty Project<ept id="p1">**</ept>, enter <ph id="ph1">`MatrixMultiply`</ph> in the <bpt id="p2">**</bpt>Name<ept id="p2">**</ept> box, and then choose the <bpt id="p3">**</bpt>OK<ept id="p3">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Choose the <bpt id="p1">**</bpt>Next<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In <bpt id="p1">**</bpt>Solution Explorer<ept id="p1">**</ept>, open the shortcut menu for <bpt id="p2">**</bpt>Source Files<ept id="p2">**</ept>, and then choose <bpt id="p3">**</bpt>Add<ept id="p3">**</ept>, <bpt id="p4">**</bpt>New Item<ept id="p4">**</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Add New Item<ept id="p1">**</ept> dialog box, select <bpt id="p2">**</bpt>C++ File (.cpp)<ept id="p2">**</ept>, enter <ph id="ph1">`MatrixMultiply.cpp`</ph> in the <bpt id="p3">**</bpt>Name<ept id="p3">**</ept> box, and then choose the <bpt id="p4">**</bpt>Add<ept id="p4">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Multiplication without tiling</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>In this section, consider the multiplication of two matrices, A and B, which are defined as follows:</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>3&amp;#45;by&amp;#45;2 matrix</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>2&amp;#45;by&amp;#45;3 matrix</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A is a 3-by-2 matrix and B is a 2-by-3 matrix.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The product of multiplying A by B is the following 3-by-3 matrix.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The product is calculated by multiplying the rows of A by the columns of B element by element.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>3&amp;#45;by&amp;#45;3 matrix</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>To multiply without using C++ AMP</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Open MatrixMultiply.cpp and use the following code to replace the existing code.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The algorithm is a straightforward implementation of the definition of matrix multiplication.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>It does not use any parallel or threaded algorithms to reduce the computation time.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>On the menu bar, choose <bpt id="p1">**</bpt>File<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Save All<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Choose the F5 keyboard shortcut to start debugging and verify that the output is correct.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Choose Enter to exit the application.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>To multiply by using C++ AMP</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In MatrixMultiply.cpp, add the following code before the <ph id="ph1">`main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The AMP code resembles the non-AMP code.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The call to <ph id="ph1">`parallel_for_each`</ph> starts one thread for each element in <ph id="ph2">`product.extent`</ph>, and replaces the <ph id="ph3">`for`</ph> loops for row and column.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The value of the cell at the row and column is available in <ph id="ph1">`idx`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can access the elements of an <ph id="ph1">`array_view`</ph> object by using either the <ph id="ph2">`[]`</ph> operator and an index variable, or the <ph id="ph3">`()`</ph> operator and the row and column variables.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The example demonstrates both methods.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`array_view::synchronize`</ph> method copies the values of the <ph id="ph2">`product`</ph> variable back to the <ph id="ph3">`productMatrix`</ph> variable.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Add the following <ph id="ph1">`include`</ph> and <ph id="ph2">`using`</ph> statements at the top of MatrixMultiply.cpp.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Modify the <ph id="ph1">`main`</ph> method to call the <ph id="ph2">`MultiplyWithAMP`</ph> method.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Choose the Ctrl+F5 keyboard shortcut to start debugging and verify that the output is correct.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Choose the spacebar to exit the application.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Multiplication with tiling</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Tiling is a technique in which you partition data into equal-sized subsets, which are known as tiles.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Three things change when you use tiling.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can create <ph id="ph1">`tile_static`</ph> variables.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Access to data in <ph id="ph1">`tile_static`</ph> space can be many times faster than access to data in the global space.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An instance of a <ph id="ph1">`tile_static`</ph> variable is created for each tile, and all threads in the tile have access to the variable.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The primary benefit of tiling is the performance gain due to <ph id="ph1">`tile_static`</ph> access.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can call the <bpt id="p1">[</bpt>tile_barrier::wait<ept id="p1">](reference/tile-barrier-class.md#wait)</ept> method to stop all of the threads in one tile at a specified line of code.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You cannot guarantee the order that the threads will run in, only that all of the threads in one tile will stop at the call to <ph id="ph1">`tile_barrier::wait`</ph> before they continue execution.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You have access to the index of the thread relative to the entire <ph id="ph1">`array_view`</ph> object and the index relative to the tile.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>By using the local index, you can make your code easier to read and debug.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To take advantage of tiling in matrix multiplication, the algorithm must partition the matrix into tiles and then copy the tile data into <ph id="ph1">`tile_static`</ph> variables for faster access.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>In this example, the matrix is partitioned into submatrices of equal size.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The product is found by multiplying the submatrices.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The two matrices and their product in this example are:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>4&amp;#45;by&amp;#45;4 matrix</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>4&amp;#45;by&amp;#45;4 matrix</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>4&amp;#45;by&amp;#45;4 matrix</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The matrices are partitioned into four 2x2 matrices, which are defined as follows:</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>4&amp;#45;by&amp;#45;4 matrix partitioned into 2&amp;#45;by&amp;#45;2 sub&amp;#45;matrices</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>4&amp;#45;by&amp;#45;4 matrix partitioned into 2&amp;#45;by&amp;#45;2 sub&amp;#45;matrices</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The product of A and B can now be written and calculated as follows:</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>4&amp;#45;by&amp;#45;4 matrix partitioned into 2&amp;#45;by&amp;#45;2 sub&amp;#45;matrices</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Because matrices <ph id="ph1">`a`</ph> through <ph id="ph2">`h`</ph> are 2x2 matrices, all of the products and sums of them are also 2x2 matrices.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>It also follows that A*B is a 4x4 matrix, as expected.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>To quickly check the algorithm, calculate the value of the element in the first row, first column in the product.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>In the example, that would be the value of the element in the first row and first column of <ph id="ph1">`ae + bg`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>You only have to calculate the first column, first row of <ph id="ph1">`ae`</ph> and <ph id="ph2">`bg`</ph> for each term.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>That value for <ph id="ph1">`ae`</ph> is <ph id="ph2">`1*1 + 2*5 = 11`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The value for <ph id="ph1">`bg`</ph> is <ph id="ph2">`3*1 + 4*5 = 23`</ph>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The final value is <ph id="ph1">`11 + 23 = 34`</ph>, which is correct.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>To implement this algorithm, the code:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Uses a <ph id="ph1">`tiled_extent`</ph> object instead of an <ph id="ph2">`extent`</ph> object in the <ph id="ph3">`parallel_for_each`</ph> call.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Uses a <ph id="ph1">`tiled_index`</ph> object instead of an <ph id="ph2">`index`</ph> object in the <ph id="ph3">`parallel_for_each`</ph> call.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Creates <ph id="ph1">`tile_static`</ph> variables to hold the submatrices.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Uses the <ph id="ph1">`tile_barrier::wait`</ph> method to stop the threads for the calculation of the products of the submatrices.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>To multiply by using AMP and tiling</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>In MatrixMultiply.cpp, add the following code before the <ph id="ph1">`main`</ph> method.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>This example is significantly different than the example without tiling.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The code uses these conceptual steps:</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Copy the elements of tile[0,0] of <ph id="ph1">`a`</ph> into <ph id="ph2">`locA`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Copy the elements of tile[0,0] of <ph id="ph1">`b`</ph> into <ph id="ph2">`locB`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Notice that <ph id="ph1">`product`</ph> is tiled, not <ph id="ph2">`a`</ph> and <ph id="ph3">`b`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Therefore, you use global indices to access <ph id="ph1">`a, b`</ph>, and <ph id="ph2">`product`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The call to <ph id="ph1">`tile_barrier::wait`</ph> is essential.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>It stops all of the threads in the tile until both <ph id="ph1">`locA`</ph> and <ph id="ph2">`locB`</ph> are filled.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Multiply <ph id="ph1">`locA`</ph> and <ph id="ph2">`locB`</ph> and put the results in <ph id="ph3">`product`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Copy the elements of tile[0,1] of <ph id="ph1">`a`</ph> into <ph id="ph2">`locA`</ph>.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Copy the elements of tile [1,0] of <ph id="ph1">`b`</ph> into <ph id="ph2">`locB`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Multiply <ph id="ph1">`locA`</ph> and <ph id="ph2">`locB`</ph> and add them to the results that are already in <ph id="ph3">`product`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>The multiplication of tile[0,0] is complete.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Repeat for the other four tiles.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>There is no indexing specifically for the tiles and the threads can execute in any order.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>As each thread executes, the <ph id="ph1">`tile_static`</ph> variables are created for each tile appropriately and the call to <ph id="ph2">`tile_barrier::wait`</ph> controls the program flow.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>As you examine the algorithm closely, notice that each submatrix is loaded into a <ph id="ph1">`tile_static`</ph> memory twice.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>That data transfer does take time.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>However, once the data is in <ph id="ph1">`tile_static`</ph> memory, access to the data is much faster.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Because calculating the products requires repeated access to the values in the submatrices, there is an overall performance gain.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For each algorithm, experimentation is required to find the optimal algorithm and tile size.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>In the non-AMP and non-tile examples, each element of A and B is accessed four times from the global memory to calculate the product.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>In the tile example, each element is accessed twice from the global memory and four times from the <ph id="ph1">`tile_static`</ph> memory.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>That is not a significant performance gain.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>However, if the A and B were 1024x1024 matrices and the tile size were 16, there would be a significant performance gain.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>In that case, each element would be copied into <ph id="ph1">`tile_static`</ph> memory only 16 times and accessed from <ph id="ph2">`tile_static`</ph> memory 1024 times.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Modify the main method to call the <ph id="ph1">`MultiplyWithTiling`</ph> method, as shown.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Choose the Ctrl+F5 keyboard shortcut to start debugging and verify that the output is correct.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Choose the space bar to exit the application.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>C++ AMP (C++ Accelerated Massive Parallelism)</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Walkthrough: Debugging a C++ AMP Application</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>