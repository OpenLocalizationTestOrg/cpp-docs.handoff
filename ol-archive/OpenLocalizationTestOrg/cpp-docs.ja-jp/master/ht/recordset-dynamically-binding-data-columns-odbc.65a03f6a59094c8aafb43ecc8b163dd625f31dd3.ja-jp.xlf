<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fc1c9ecf66471f35904470fdb68ae59451f1b982</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\odbc\recordset-dynamically-binding-data-columns-odbc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a3bbbee948ae8953992da99221413aec993d1a2</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8a022a5f6faf735e13c5ff741dfd6d9c2451aaa4</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Recordset: Dynamically Binding Data Columns (ODBC) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Recordset: Dynamically Binding Data Columns (ODBC)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic applies to the MFC ODBC classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Recordsets manage binding table columns that you specify at design time, but there are cases when you might want to bind columns that were unknown to you at design time.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This topic explains:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>When you might want to bind columns dynamically to a recordset<ept id="p1">](#_core_when_you_might_bind_columns_dynamically)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>How to bind columns dynamically at run time<ept id="p1">](#_core_how_to_bind_columns_dynamically)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>This topic applies to objects derived from <ph id="ph1">`CRecordset`</ph> in which bulk row fetching has not been implemented.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The techniques described generally are not recommended if you are using bulk row fetching.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information about bulk row fetching, see <bpt id="p1">[</bpt>Recordset: Fetching Records in Bulk (ODBC)<ept id="p1">](../../data/odbc/recordset-fetching-records-in-bulk-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When You Might Bind Columns Dynamically</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>At design time, the MFC Application Wizard or <bpt id="p1">[</bpt>MFC ODBC Consumer Wizard<ept id="p1">](../../mfc/reference/adding-an-mfc-odbc-consumer.md)</ept> (from <bpt id="p2">**</bpt>Add Class<ept id="p2">**</ept>) creates recordset classes based on the known tables and columns on your data source.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Databases can change between when you design them and later when your application uses those tables and columns at run time.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You or another user might add or drop a table or add or drop columns from a table that your application's recordset relies on.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This probably is not a concern for all data-access applications, but if it is for yours, how can you cope with changes in the database schema, other than by redesigning and recompiling?</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The purpose of this topic is to answer that question.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This topic describes the most common case in which you might bind columns dynamically â€” having begun with a recordset based on a known database schema, you want to handle additional columns at run time.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The topic further assumes that the additional columns map to <ph id="ph1">`CString`</ph> field data members, the most common case, although suggestions are supplied to help you manage other data types.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>With a small amount of extra code, you can:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Determine what columns are available at run time<ept id="p1">](#_core_to_determine_the_columns_in_a_table_at_run_time)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Bind additional columns to your recordset dynamically, at run time<ept id="p1">](#_core_adding_the_columns)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Your recordset still contains data members for the columns you knew about at design time.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>It also contains a small amount of extra code that dynamically determines whether any new columns have been added to your target table and, if so, binds these new columns to dynamically allocated storage (rather than to recordset data members).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This topic does not cover other dynamic binding cases, such as dropped tables or columns.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For those cases, you need to use ODBC API calls more directly.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For information, see the ODBC SDK <bpt id="p1">*</bpt>Programmer's Reference<ept id="p1">*</ept> on the MSDN Library CD.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>How to Bind Columns Dynamically</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>To bind columns dynamically, you must know (or be able to determine) the names of the additional columns.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You must also allocate storage for the additional field data members, specify their names and their types, and specify the number of columns you are adding.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The following discussion mentions two different recordsets.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The first is the main recordset that selects records from the target table.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The second is a special column recordset used to get information about the columns in your target table.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>General Process</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>At the most general level, you follow these steps:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Construct your main recordset object.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Optionally, pass a pointer to an open <ph id="ph1">`CDatabase`</ph> object or be able to supply connection information to the column recordset in some other way.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Take steps to add columns dynamically.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>See the process described in Adding the Columns below.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Open your main recordset.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The recordset selects records and uses record field exchange (RFX) to bind both the static columns (those mapped to recordset field data members) and the dynamic columns (mapped to extra storage that you allocate).</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Adding the Columns</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Dynamically binding added columns at run time requires the following steps:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Determine at run time what columns are in the target table.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Extract from that information a list of the columns that have been added to the table since your recordset class was designed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>A good approach is to use a column recordset class designed to query the data source for column information for the target table (such as column name and data type).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Provide storage for the new field data members.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Because your main recordset class does not have field data members for unknown columns, you must provide a place to store the names, result values, and possibly data type information (if the columns are different data types).</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>One approach is to build one or more dynamic lists, one for the new columns' names, another for their result values, and a third for their data types (if necessary).</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>These lists, particularly the value list, provide the information and the necessary storage for binding.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The following figure illustrates building the lists.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Building lists of columns to bind dynamically</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Building Lists of Columns to Bind Dynamically</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Add an RFX function call in your main recordset's <ph id="ph1">`DoFieldExchange`</ph> function for each added column.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>These RFX calls do the work of fetching a record, including the additional columns, and binding the columns to recordset data members or to your dynamically supplied storage for them.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>One approach is to add a loop to your main recordset's <ph id="ph1">`DoFieldExchange`</ph> function that loops through your list of new columns, calling the appropriate RFX function for each column in the list.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>On each RFX call, pass a column name from the column name list and a storage location in the corresponding member of the result value list.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Lists of Columns</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The four lists you need to work with are shown in the following table.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Current-Table-Columns (List 1 in the illustration)</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A list of the columns currently in the table on the data source.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>This list might match the list of columns currently bound in your recordset.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Bound-Recordset-Columns (List 2 in the illustration)</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>A list of the columns bound in your recordset.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>These columns already have RFX statements in your <ph id="ph1">`DoFieldExchange`</ph> function.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Columns-To-Bind-Dynamically (List 3 in the illustration)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A list of columns in the table but not in your recordset.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>These are the columns you want to bind dynamically.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Dynamic-Column-Values (List 4 in the illustration)</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>A list containing storage for the values retrieved from the columns you bind dynamically.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Elements of this list correspond to those in Columns-to-Bind-Dynamically, one to one.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Building Your Lists</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>With a general strategy in mind, you can turn to the details.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The procedures in the rest of this topic show you how to build the lists shown in <bpt id="p1">[</bpt>Lists of Columns<ept id="p1">](#_core_lists_of_columns)</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The procedures guide you through:</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Determining the names of columns not in your recordset<ept id="p1">](#_core_determining_which_table_columns_are_not_in_your_recordset)</ept>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Providing dynamic storage for columns newly added to the table<ept id="p1">](#_core_providing_storage_for_the_new_columns)</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Dynamically adding RFX calls for new columns<ept id="p1">](#_core_adding_rfx_calls_to_bind_the_columns)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Determining Which Table Columns Are Not in Your Recordset</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Build a list (Bound-Recordset-Columns, as in List 2 in the <bpt id="p1">[</bpt>illustration<ept id="p1">](#_core_illustration_dynamic)</ept>) that contains a list of the columns already bound in your main recordset.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Then build a list (Columns-to-Bind-Dynamically, derived from Current-Table-Columns and Bound-Recordset-Columns) that contains column names that are in the table on the data source but not in your main recordset.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>To determine the names of columns not in the recordset (Columns-to-Bind-Dynamically)</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Build a list (Bound-Recordset-Columns) of the columns already bound in your main recordset.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>One approach is to create Bound-Recordset-Columns at design time.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>You can visually examine the RFX function calls in the recordset's <ph id="ph1">`DoFieldExchange`</ph> function to get these names.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>Then, set up your list as an array initialized with the names.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>illustration<ept id="p1">](#_core_illustration_dynamic)</ept> shows Bound-Recordset-Columns (List 2) with three elements.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Bound-Recordset-Columns is missing the Phone column shown in Current-Table-Columns (List 1).</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Compare Current-Table-Columns and Bound-Recordset-Columns to build a list (Columns-to-Bind-Dynamically) of the columns not already bound in your main recordset.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>One approach is to loop through your list of columns in the table at run time (Current-Table-Columns) and your list of columns already bound in your recordset (Bound-Recordset-Columns) in parallel.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Into Columns-to-Bind-Dynamically put any names in Current-Table-Columns that do not appear in Bound-Recordset-Columns.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>illustration<ept id="p1">](#_core_illustration_dynamic)</ept> shows Columns-to-Bind-Dynamically (List 3) with one element: the Phone column found in Current-Table-Columns (List 1) but not in Bound-Recordset-Columns (List 2).</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Build a list of Dynamic-Column-Values (as in List 4 in the <bpt id="p1">[</bpt>illustration<ept id="p1">](#_core_illustration_dynamic)</ept>) in which to store the data values corresponding to each column name stored in your list of columns to bind dynamically (Columns-to-Bind-Dynamically).</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>The elements of this list play the role of new recordset field data members.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>They are the storage locations to which the dynamic columns are bound.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>For descriptions of the lists, see <bpt id="p1">[</bpt>Lists of Columns<ept id="p1">](#_core_lists_of_columns)</ept>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Providing Storage for the New Columns</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Next, set up storage locations for the columns to be bound dynamically.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The idea is to provide a list element in which to store each column's value.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>These storage locations parallel the recordset member variables, which store the normally bound columns.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>To provide dynamic storage for new columns (Dynamic-Column-Values)</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Build Dynamic-Column-Values, parallel to Columns-to-Bind-Dynamically, to contain the value of the data in each column.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>For example, the <bpt id="p1">[</bpt>illustration<ept id="p1">](#_core_illustration_dynamic)</ept> shows Dynamic-Column-Values (List 4) with one element: a <ph id="ph1">`CString`</ph> object containing the actual phone number for the current record: "555-1212".</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>In the most common case, Dynamic-Column-Values has elements of type <ph id="ph1">`CString`</ph>.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>If you are dealing with columns of varying data types, you need a list that can contain elements of a variety of types.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The result of the preceding procedures is two main lists: Columns-to-Bind-Dynamically containing the names of columns and Dynamic-Column-Values containing the values in the columns for the current record.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If the new columns are not all of the same data type, you might want an extra parallel list containing items that somehow define the type of each corresponding element in the column list.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>(You can use the values <bpt id="p1">**</bpt>AFX_RFX_BOOL<ept id="p1">**</ept>, <bpt id="p2">**</bpt>AFX_RFX_BYTE<ept id="p2">**</ept>, and so on, for this if you want.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>These constants are defined in AFXDB.H.) Choose a list type based on how you represent the column data types.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Adding RFX Calls to Bind the Columns</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Finally, arrange for the dynamic binding to occur by placing RFX calls for the new columns in your <ph id="ph1">`DoFieldExchange`</ph> function.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>To dynamically add RFX calls for new columns</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>In your main recordset's <ph id="ph1">`DoFieldExchange`</ph> member function, add code that loops through your list of new columns (Columns-to-Bind-Dynamically).</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>In each loop, extract a column name from Columns-to-Bind-Dynamically and a result value for the column from Dynamic-Column-Values.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Pass these items to an RFX function call appropriate to the data type of the column.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>For descriptions of the lists, see <bpt id="p1">[</bpt>Lists of Columns<ept id="p1">](#_core_lists_of_columns)</ept>.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>In the common case, in your <ph id="ph1">`RFX_Text`</ph> function calls you extract <ph id="ph2">`CString`</ph> objects from the lists, as in the following lines of code, where Columns-to-Bind-Dynamically is a <ph id="ph3">`CStringList`</ph> called <ph id="ph4">`m_listName`</ph> and Dynamic-Column-Values is a <ph id="ph5">`CStringList`</ph> called <ph id="ph6">`m_listValue`</ph>:</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For more information about RFX functions, see <bpt id="p1">[</bpt>Macros and Globals<ept id="p1">](../../mfc/reference/mfc-macros-and-globals.md)</ept> in the <bpt id="p2">*</bpt>Class Library Reference<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>If the new columns are different data types, use a switch statement in your loop to call the appropriate RFX function for each type.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>When the framework calls <ph id="ph1">`DoFieldExchange`</ph> during the <bpt id="p1">**</bpt>Open<ept id="p1">**</ept> process to bind columns to the recordset, the RFX calls for the static columns bind those columns.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Then your loop repeatedly calls RFX functions for the dynamic columns.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Recordset (ODBC)</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Recordset: Working with Large Data Items (ODBC)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>