<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a24c1d75ecb7f028b40961e98aec59d51777ea6a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\ole-background-implementation-strategies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4d5d47d5f5e18fa2d59c64178678034e93d802d0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ee38c34ccdfc0be3725aacc99bbcce6d2478b8c6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>OLE Background: Implementation Strategies | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>OLE Background: Implementation Strategies</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Depending on your application, there are four possible implementation strategies for adding OLE support:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>You are writing a new application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This situation usually requires the least work.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>You run the MFC Application Wizard and select either Advanced Features or Compound Document Support to create a skeleton application.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For information on these options and what they do, see the article <bpt id="p1">[</bpt>Creating an MFC EXE Program<ept id="p1">](../mfc/reference/mfc-application-wizard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You have a program written with the Microsoft Foundation Class Library version 2.0 or higher that does not support OLE.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Create a new application with the MFC Application Wizard as previously mentioned, and then copy and paste the code from the new application into your existing application.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This will work for servers, containers, or automated applications.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>See the MFC <bpt id="p1">[</bpt>SCRIBBLE<ept id="p1">](../visual-cpp-samples.md)</ept> sample for an example of this strategy.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You have a Microsoft Foundation Class Library program that implements OLE version 1.0 support.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>MFC Technical Note 41<ept id="p1">](../mfc/tn041-mfc-ole1-migration-to-mfc-ole-2.md)</ept> for this conversion strategy.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You have an application that was not written using the Microsoft Foundation Classes and that may or may not have implemented OLE support.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This situation requires the most work.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>One approach is to create a new application, as in the first strategy, and then copy and paste your existing code into it.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If your existing code is written in C, then you may need to modify it so it can compile as C++ code.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If your C code calls the Windows API, then you do not have to change it to use the Microsoft Foundation classes.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>This approach likely will require some restructuring of your program to support the document/view architecture used by versions 2.0 and higher of the Microsoft Foundation Classes.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information on this architecture, see <bpt id="p1">[</bpt>Technical Note 25<ept id="p1">](../mfc/tn025-document-view-and-frame-creation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Once you have decided on a strategy, you should either read the <bpt id="p1">[</bpt>Containers<ept id="p1">](../mfc/containers.md)</ept> or <bpt id="p2">[</bpt>Servers<ept id="p2">](../mfc/servers.md)</ept> articles (depending on the type of application you are writing) or examine the sample programs, or both.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The MFC OLE samples <bpt id="p1">[</bpt>OCLIENT<ept id="p1">](../visual-cpp-samples.md)</ept> and <bpt id="p2">[</bpt>HIERSVR<ept id="p2">](../visual-cpp-samples.md)</ept> show how to implement the various aspects of containers and servers, respectively.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>At various points throughout these articles, you will be referred to certain functions in these samples as examples of the techniques being discussed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>OLE Background</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Containers: Implementing a Container</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Servers: Implementing a Server</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>MFC Application Wizard</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>