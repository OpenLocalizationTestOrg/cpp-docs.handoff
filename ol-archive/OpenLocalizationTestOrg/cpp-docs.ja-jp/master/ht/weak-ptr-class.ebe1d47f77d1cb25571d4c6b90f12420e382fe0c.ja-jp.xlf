<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b9437f3ddf20a6d7cb6f60c0fe6269f5ad82d3b8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\weak-ptr-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19fa0d4890fa078bca34f86238b92bdecd84499a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">639b5b4e602e031cc97fbf236fc03e7e9e0a9a48</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>weak_ptr Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>weak_ptr Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Wraps a weakly linked pointer.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The type controlled by the weak pointer.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The template class describes an object that points to a resource that is managed by one or more <bpt id="p1">[</bpt>shared_ptr Class<ept id="p1">](../standard-library/shared-ptr-class.md)</ept> objects.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`weak_ptr`</ph> objects that point to a resource do not affect the resource's reference count.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Thus, when the last <ph id="ph1">`shared_ptr`</ph> object that manages that resource is destroyed the resource will be freed, even if there are <ph id="ph2">`weak_ptr`</ph> objects pointing to that resource.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This is essential for avoiding cycles in data structures.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`weak_ptr`</ph> object points to a resource if it was constructed from a <ph id="ph2">`shared_ptr`</ph> object that owns that resource, if it was constructed from a <ph id="ph3">`weak_ptr`</ph> object that points to that resource, or if that resource was assigned to it with <bpt id="p1">[</bpt>operator=<ept id="p1">](#weak_ptr__operator_eq)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`weak_ptr`</ph> object does not provide direct access to the resource that it points to.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Code that needs to use the resource does so through a <ph id="ph1">`shared_ptr`</ph> object that owns that resource, created by calling the member function <bpt id="p1">[</bpt>lock<ept id="p1">](#weak_ptr__lock)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`weak_ptr`</ph> object has expired when the resource that it points to has been freed because all of the <ph id="ph2">`shared_ptr`</ph> objects that own the resource have been destroyed.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Calling <ph id="ph1">`lock`</ph> on a <ph id="ph2">`weak_ptr`</ph> object that has expired creates an empty shared_ptr object.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>An empty weak_ptr object does not point to any resources and has no control block.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Its member function <ph id="ph1">`lock`</ph> returns an empty shared_ptr object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>A cycle occurs when two or more resources controlled by <ph id="ph1">`shared_ptr`</ph> objects hold mutually referencing <ph id="ph2">`shared_ptr`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, a circular linked list with three elements has a head node <ph id="ph1">`N0`</ph>; that node holds a <ph id="ph2">`shared_ptr`</ph> object that owns the next node, <ph id="ph3">`N1`</ph>; that node holds a <ph id="ph4">`shared_ptr`</ph> object that owns the next node, <ph id="ph5">`N2`</ph>; that node, in turn, holds a <ph id="ph6">`shared_ptr`</ph> object that owns the head node, <ph id="ph7">`N0`</ph>, closing the cycle.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>In this situation, none of the reference counts will ever become zero, and the nodes in the cycle will not be freed.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To eliminate the cycle, the last node <ph id="ph1">`N2`</ph> should hold a <ph id="ph2">`weak_ptr`</ph> object pointing to <ph id="ph3">`N0`</ph> instead of a <ph id="ph4">`shared_ptr`</ph> object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Since the <ph id="ph1">`weak_ptr`</ph> object does not own <ph id="ph2">`N0`</ph> it doesn't affect <ph id="ph3">`N0`</ph>'s reference count, and when the program's last reference to the head node is destroyed the nodes in the list will also be destroyed.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Constructors</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>weak_ptr</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`weak_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Methods</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>element_type</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The type of the element.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>expired</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Tests if ownership has expired.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>lock</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Obtains exclusive ownership of a resource.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>owner_before</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph> if this <ph id="ph2">`weak_ptr`</ph> is ordered before (or less than) the provided pointer.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>reset</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Releases owned resource.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Swaps two <ph id="ph1">`weak_ptr`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>use_count</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Counts number of designated <ph id="ph1">`shared_ptr`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Operators</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>operator=</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Replaces owned resource.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>memory&gt;</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>element_type</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The type of the element.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The type is a synonym for the template parameter <ph id="ph1">`Ty`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>expired</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Tests if ownership has expired.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The member function returns <ph id="ph1">`true`</ph> if <ph id="ph2">`*this`</ph> has expired, otherwise <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>lock</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Obtains exclusive ownership of a resource.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The member function returns an empty shared_ptr object if <ph id="ph1">`*this`</ph> has expired; otherwise it returns a <bpt id="p1">[</bpt>shared_ptr Class<ept id="p1">](../standard-library/shared-ptr-class.md)</ept><ph id="ph2">`&lt;Ty&gt;`</ph> object that owns the resource that <ph id="ph3">`*this`</ph> points to.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>operator=</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Replaces owned resource.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The type controlled by the argument shared/weak pointer.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The weak pointer to copy.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The shared pointer to copy.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The operators all release the resource currently pointed to by <ph id="ph1">`*this`</ph> and assign ownership of the resource named by the operand sequence to <ph id="ph2">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If an operator fails it leaves <ph id="ph1">`*this`</ph> unchanged.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>owner_before</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph> if this <ph id="ph2">`weak_ptr`</ph> is ordered before (or less than) the provided pointer.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`lvalue`</ph> reference to either a <ph id="ph2">`shared_ptr`</ph> or a <ph id="ph3">`weak_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The template member function returns <ph id="ph1">`true`</ph> if <ph id="ph2">`*this`</ph> is <ph id="ph3">`ordered before``ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>reset</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Releases owned resource.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The member function releases the resource pointed to by <ph id="ph1">`*this`</ph> and converts <ph id="ph2">`*this`</ph> to an empty weak_ptr object.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>swap</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Swaps two <ph id="ph1">`weak_ptr`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The weak pointer to swap with.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The member function leaves the resource originally pointed to by <ph id="ph1">`*this`</ph> subsequently pointed to by <ph id="ph2">`wp`</ph>, and the resource originally pointed to by <ph id="ph3">`wp`</ph> subsequently pointed to by <ph id="ph4">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The function does not change the reference counts for the two resources and it does not throw any exceptions.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>use_count</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Counts number of designated <ph id="ph1">`shared_ptr`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The member function returns the number of <ph id="ph1">`shared_ptr`</ph> objects that own the resource pointed to by <ph id="ph2">`*this`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>weak_ptr</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`weak_ptr`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The type controlled by the argument shared/weak pointer.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The weak pointer to copy.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The shared pointer to copy.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The constructors each construct an object that points to the resource named by the operand sequence.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>shared_ptr Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>