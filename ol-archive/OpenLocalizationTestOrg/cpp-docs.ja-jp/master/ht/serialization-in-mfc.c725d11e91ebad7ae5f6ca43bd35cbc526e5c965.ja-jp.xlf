<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">592ae860439dbb1fd9c006ff82eb67f284a1764d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\serialization-in-mfc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">598b9922f60e242bc406ddedce19364c7ccdfc4b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">098bd18f26a20d239e1a336de63c704a8495af9e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Serialization in MFC | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Serialization in MFC</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article explains the serialization mechanism provided in the Microsoft Foundation Class Library (MFC) to allow objects to persist between runs of your program.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Serialization is the process of writing or reading an object to or from a persistent storage medium such as a disk file.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Serialization is ideal for situations where it is desired to maintain the state of structured data (such as C++ classes or structures) during or after execution of a program.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Using the serialization objects provided by MFC allows this to occur in a standard and consistent manner, relieving the user from the need to perform file operations by hand.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>MFC supplies built-in support for serialization in the class <ph id="ph1">`CObject`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Thus, all classes derived from <ph id="ph1">`CObject`</ph> can take advantage of <ph id="ph2">`CObject`</ph>'s serialization protocol.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The basic idea of serialization is that an object should be able to write its current state, usually indicated by the value of its member variables, to persistent storage.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Later, the object can be re-created by reading, or deserializing, the object's state from the storage.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Serialization handles all the details of object pointers and circular references to objects that are used when you serialize an object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>A key point is that the object itself is responsible for reading and writing its own state.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Thus, for a class to be serializable, it must implement the basic serialization operations.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>As shown in the Serialization group of articles, it is easy to add this functionality to a class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>MFC uses an object of the <ph id="ph1">`CArchive`</ph> class as an intermediary between the object to be serialized and the storage medium.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This object is always associated with a <ph id="ph1">`CFile`</ph> object, from which it obtains the necessary information for serialization, including the file name and whether the requested operation is a read or write.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The object that performs a serialization operation can use the <ph id="ph1">`CArchive`</ph> object without regard to the nature of the storage medium.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CArchive`</ph> object uses overloaded insertion (<bpt id="p1">**</bpt><ph id="ph2">&lt;\&lt;</ph><ept id="p1">**</ept>) and extraction (<bpt id="p2">**</bpt><ph id="ph3">&gt;&gt;</ph><ept id="p2">**</ept>) operators to perform writing and reading operations.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Storing and Loading CObjects via an Archive<ept id="p1">](../mfc/storing-and-loading-cobjects-via-an-archive.md)</ept> in the article Serialization: Serializing an Object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Do not confuse the <ph id="ph1">`CArchive`</ph> class with general-purpose iostream classes, which are for formatted text only.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`CArchive`</ph> class is for binary-format serialized objects.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If you want, you can bypass MFC serialization to create your own mechanism for persistent data storage.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You will need to override the class member functions that initiate serialization at the user's command.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>See the discussion in <bpt id="p1">[</bpt>Technical Note 22<ept id="p1">](../mfc/tn022-standard-commands-implementation.md)</ept> of the <ph id="ph1">`ID_FILE_OPEN`</ph>, <bpt id="p2">**</bpt>ID_FILE_SAVE<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>ID_FILE_SAVE_AS<ept id="p3">**</ept> standard commands.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following articles cover the two main tasks required for serialization:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Serialization: Making a Serializable Class</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Serialization: Serializing an Object</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The article <bpt id="p1">[</bpt>Serialization: Serialization vs. Database Input/Output<ept id="p1">](../mfc/serialization-serialization-vs-database-input-output.md)</ept> describes when serialization is an appropriate input/output technique in database applications.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Concepts</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>General MFC Topics</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>CArchive Class</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>CObject Class</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CDocument Class</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>CFile Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>