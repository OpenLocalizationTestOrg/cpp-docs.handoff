<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cf42f814ed784e3f67b60aba44e44cd875ef81cb</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\intrinsics\returnaddress.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6d3aad005a2314e97ce92d0f18adec48bb849f39</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4f91bafcdc030e0a9f4bb91ec6684d27cfdf3411</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_ReturnAddress | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_ReturnAddress</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_ReturnAddress`</ph> intrinsic provides the address of the instruction in the calling function that will be executed after control returns to the caller.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Build the following program and step through it in the debugger.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>As you step through the program, note the address that is returned from <ph id="ph1">`_ReturnAddress`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Then, immediately after returning from the function where <ph id="ph1">`_ReturnAddress`</ph> was used, open the <bpt id="p1">[</bpt>How to: Use the Disassembly Window<ept id="p1">](http://msdn.microsoft.com/Library/eaf84dd0-c82d-481b-af51-690b74e7794c)</ept> and note that the address of the next instruction to be executed matches the address returned from <ph id="ph2">`_ReturnAddress`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Optimizations such as inlining may affect the return address.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For example, if the sample program below is compiled with <bpt id="p1">[</bpt>/Ob1<ept id="p1">](../build/reference/ob-inline-function-expansion.md)</ept>, <ph id="ph1">`inline_func`</ph> will be inlined into the calling function, <ph id="ph2">`main`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Therefore, the calls to <ph id="ph1">`_ReturnAddress`</ph> from <ph id="ph2">`inline_func`</ph> and <ph id="ph3">`main`</ph> will each produce the same value.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`_ReturnAddress`</ph> is used in a program compiled with <bpt id="p1">[</bpt>/clr<ept id="p1">](../build/reference/clr-common-language-runtime-compilation.md)</ept>, the function containing the <ph id="ph2">`_ReturnAddress`</ph> call will be compiled as a native function.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When a function compiled as managed calls into the function containing <ph id="ph1">`_ReturnAddress`</ph>, <ph id="ph2">`_ReturnAddress`</ph> may not behave as expected.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header file<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>intrin.h&gt;</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>_AddressOfReturnAddress</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Compiler Intrinsics</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>