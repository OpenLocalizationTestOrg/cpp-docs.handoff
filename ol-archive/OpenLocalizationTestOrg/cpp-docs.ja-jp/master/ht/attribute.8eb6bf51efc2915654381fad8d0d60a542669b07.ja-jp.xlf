<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7b34c40e2575d9aad5067bfedfd020a931b5f44</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\attribute.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c17d590e4fcc24a7de64eb9434b35e75e1a01c36</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b60e6e63c390429dfee7c2c8740df1a1cfd0edff</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>attribute | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>attribute</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Allows you to create a custom attribute.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>AllowOn</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Specifies the language elements to which the custom attribute can be applied.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Default is <bpt id="p1">**</bpt>System::AttributeTargets::All<ept id="p1">**</ept> (see <bpt id="p2">[</bpt>System::AttributeTargets<ept id="p2">](https://msdn.microsoft.com/en-us/library/system.attributetargets.aspx)</ept>).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Specifies whether the custom attribute can be applied repeatedly to a construct.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Default is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Indicates if the attribute is to be inherited by subclasses.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The compiler provides no special support for this functionality; it is the job of the attribute consumers (Reflection, for example) to respect this information.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Inherited`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the attribute is inherited.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`AllowMultiple`</ph> is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>, the attribute will accumulate on the derived member; if <ph id="ph2">`AllowMultiple`</ph> is <bpt id="p2">**</bpt>FALSE<ept id="p2">**</ept>, the attribute will override (or replace) in inheritance.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`Inherited`</ph> is <bpt id="p1">**</bpt>FALSE<ept id="p1">**</ept>, the attribute will not be inherited.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Default is <bpt id="p1">**</bpt>TRUE<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`attribute`</ph> attribute is now deprecated.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use the common language runtime attribute System.Attribute to directly to create user-defined attirbutes.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>User-Defined Attributes<ept id="p1">](../windows/user-defined-attributes-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You define a <bpt id="p1">[</bpt>custom attribute<ept id="p1">](../windows/custom-attributes-cpp.md)</ept> by placing the <ph id="ph1">`attribute`</ph> attribute on a managed class or struct definition.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The name of the class is the custom attribute.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>defines an attribute called MyAttr that can be applied to function parameters.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The class must be public if the attribute is going to be used in other assemblies.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To prevent namespace collisions, all attribute names implicitly end with "Attribute"; in this example, the name of the attribute and class is actually MyAttrAttribute, but MyAttr and MyAttrAttribute can be used interchangeably.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The class's public constructors define the attribute's unnamed parameters.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Overloaded constructors allow multiple ways of specifying the attribute, so a custom attribute that is defined the following way:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The class's public data members and properties are the attribute's optional named parameters:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For a list of possible attribute parameter types, see <bpt id="p1">[</bpt>Custom Attributes<ept id="p1">](../windows/custom-attributes-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>User-Defined Attributes<ept id="p1">](../windows/user-defined-attributes-cpp-component-extensions.md)</ept> for a discussion on attribute targets.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`attribute`</ph> attribute has an <ph id="ph2">`AllowMultiple`</ph> parameter that specifies whether the custom attribute is single use or multiuse (can appear more than once on the same entity).</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Custom attribute classes are derived directly or indirectly from &lt;xref:System.ComponentModel.AttributeCollection.%23ctor%2A&gt;, which makes identifying attribute definitions in metadata fast and easy.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`attribute`</ph> attribute implies inheritance from System::Attribute, so explicit derivation is not necessary:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>is equivalent to</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>is an alias for &lt;xref:System.AttributeUsageAttribute?displayProperty=fullName&gt; (not AttributeAttribute; this is an exception to the attribute naming rule).</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Attribute Context</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Applies to</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>class<ept id="p1">**</ept>, <bpt id="p2">**</bpt>ref struct<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Repeatable</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>No</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Required attributes</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Invalid attributes</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>None</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>For more information about the attribute contexts, see <bpt id="p1">[</bpt>Attribute Contexts<ept id="p1">](../windows/attribute-contexts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Inherited`</ph> named argument specifies whether a custom attribute applied on a base class will show up on reflection of a derived class.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Attributes Alphabetical Reference</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Custom Attributes</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>