<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d4301cf66c495785db66e0efcb0c1417a4199245</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\tn043-rfx-routines.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f334d43b5fbd6a3d02348d8fa98bd23662a26e74</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">086da78d9dcf8349c93f30eb17197dfb389ecba6</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>TN043: RFX Routines | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>TN043: RFX Routines</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following technical note has not been updated since it was first included in the online documentation.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>As a result, some procedures and topics might be out of date or incorrect.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For the latest information, it is recommended that you search for the topic of interest in the online documentation index.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This note describes the record field exchange (RFX) architecture.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>It also describes how you write an <bpt id="p1">**</bpt>RFX_<ept id="p1">**</ept> procedure.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Overview of Record Field Exchange</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>All recordset field functions are done with C++ code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>There are no special resources or magic macros.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The heart of the mechanism is a virtual function that must be overridden in every derived recordset class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>It is always found in this form:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The special format AFX comments allow ClassWizard to locate and edit the code within this function.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Code that is not compatible with ClassWizard should be placed outside of the special format comments.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;recordset_exchange_field_type_call&gt; is in the form:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>and &lt;recordset_exchange_function_call&gt; is in the form:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Most <bpt id="p1">**</bpt>RFX_<ept id="p1">**</ept> functions have three arguments as shown above, but some (e.g. <ph id="ph1">`RFX_Text`</ph> and <ph id="ph2">`RFX_Binary`</ph>) have additional optional arguments.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>More than one <bpt id="p1">**</bpt>RFX_<ept id="p1">**</ept> may be included in each <ph id="ph1">`DoDataExchange`</ph> function.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See 'afxdb.h' for a list of all the recordset field exchange routines provided with MFC.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Recordset field calls are a way of registering memory locations (usually data members) to store field data for a <bpt id="p1">**</bpt>CMySet<ept id="p1">**</ept> class.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Notes</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Recordset field functions are designed to work only with the <ph id="ph1">`CRecordset`</ph> classes.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>They are not generally usable by any other MFC classes.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Initial values of data are set in the standard C++ constructor, usually in a block with <ph id="ph1">`//{{AFX_FIELD_INIT(CMylSet)`</ph> and <ph id="ph2">`//}}AFX_FIELD_INIT`</ph> comments.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Each <bpt id="p1">**</bpt>RFX_<ept id="p1">**</ept> function must support various operations, ranging from returning the dirty status of the field to archiving the field in preparation for editing the field.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Each function that calls <ph id="ph1">`DoFieldExchange`</ph> (for instance <ph id="ph2">`SetFieldNull`</ph>, <ph id="ph3">`IsFieldDirty`</ph>), does its own initialization around the call to <ph id="ph4">`DoFieldExchange`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>How Does It Work</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You do not need to understand the following in order to use record field exchange.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>However, understanding how this works behind the scenes will help you write your own exchange procedure.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`DoFieldExchange`</ph> member function is much like the <ph id="ph2">`Serialize`</ph> member function — it is responsible for getting or setting data to/from an external form (in this case columns from the result of an ODBC query) from/to member data in the class.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pFX`</ph> parameter is the context for doing data exchange and is similar to the <ph id="ph2">`CArchive`</ph> parameter to <ph id="ph3">`CObject::Serialize`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`pFX`</ph> (a <ph id="ph2">`CFieldExchange`</ph> object) has an operation indicator, which is similar to, but a generalization of the <ph id="ph3">`CArchive`</ph> direction flag.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>An RFX function may have to support the following operations:</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BindParam<ept id="p1">**</ept> — Indicate where ODBC should retrieve parameter data</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>BindFieldToColumn<ept id="p1">**</ept> — Indicate where ODBC must retrieve/deposit outputColumn data</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Fixup<ept id="p1">**</ept> — Set <bpt id="p2">**</bpt>CString/CByteArray<ept id="p2">**</ept> lengths, set NULL status bit</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MarkForAddNew<ept id="p1">**</ept> — Mark dirty if value has changed since AddNew call</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>MarkForUpdate<ept id="p1">**</ept> — Mark dirty if value has changed since Edit call</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Name<ept id="p1">**</ept> — Append field names for fields marked dirty</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>NameValue<ept id="p1">**</ept> — Append "<ph id="ph1">\&lt;</ph>column name&gt;=" for fields marked dirty</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Value<ept id="p1">**</ept> — Append "" followed by separator, like ',' or ' '</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>— Set status bit dirty (i.e. changed) field</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>— Set status bit indicating null value for field</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>— Return value of dirty status bit</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>— Return value of null status bit</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>— Return TRUE if field can hold NULL values</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>StoreField<ept id="p1">**</ept> — Archive field value</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>LoadField<ept id="p1">**</ept> — Reload archived field value</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetFieldInfoValue<ept id="p1">**</ept> — Return general information on a field</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>GetFieldInfoOrdinal<ept id="p1">**</ept> — Return general information on a field</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>User Extensions</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>There are several ways to extend the default RFX mechanism.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>You can</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Add new data types.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Add new exchange procedures (RFX_).</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Have the <ph id="ph1">`DoFieldExchange`</ph> member function conditionally include additional RFX calls or any other valid C++ statements.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Such code cannot be edited by ClassWizard and should be used only outside of the special format comments.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Writing a Custom RFX</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To write your own Custom RFX function, it is suggested that you copy an existing RFX function and modify it to your own purposes.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Selecting the right RFX to copy can make your job much easier.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Some RFX functions have some unique properties that you should take into account when deciding which to copy.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RFX_Long and RFX_Int<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>These are the simplest RFX functions.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The data value does not need any special interpretation, and the data size is fixed.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RFX_Single and RFX_Double<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Like RFX_Long and RFX_Int above, these functions are simple and can make use of the default implementation extensively.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>They are stored in dbflt.cpp instead of dbrfx.cpp, however, to enable loading the runtime floating point library only when they are explicitly reference.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>RFX_Text and RFX_Binary<ept id="p1">**</ept>:</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>These two functions preallocate a static buffer to hold string/binary information, and must register these buffers with ODBC SQLBindCol instead of registering &amp;value.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Because of this, these two functions have lots of special-case code.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>ODBC returns date and time information in their own TIMESTAMP_STRUCT data structure.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>This function dynamically allocates a TIMESTAMP_STRUCT as a "proxy" for sending and receiving date time data.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Various operations must transfer the date and time information between the C++ <ph id="ph1">`CTime`</ph> object and the TIMESTAMP_STRUCT proxy.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>This complicates this function considerably, but it is a good example of how to use a proxy for data transfer.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>:</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>This is the only class library RFX function that does not use column binding to receive and send data.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>This function ignores the BindFieldToColumn operation and instead, during the Fixup operation, allocates storage to hold the incoming SQL_LONGVARCHAR or SQL_LONGVARBINARY data, then performs an SQLGetData call to retrieve the value into the allocated storage.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>When preparing to send data values back to the data source (such as NameValue and Value operations), this function uses ODBC's DATA_AT_EXEC functionality.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Technical Note 45<ept id="p1">](../mfc/tn045-mfc-database-support-for-long-varchar-varbinary.md)</ept> for more information on working with SQL_LONGVARBINARY and SQL_LONGVARCHARs.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>When writing your own <bpt id="p1">**</bpt>RFX_<ept id="p1">**</ept> function, you will often be able to use <bpt id="p2">**</bpt>CFieldExchange::Default<ept id="p2">**</ept> to implement a given operation.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Look at the implementation of Default for the operation in question.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If it performs the operation you would be writing in your <bpt id="p1">**</bpt>RFX_<ept id="p1">**</ept> function you can delegate to the <bpt id="p2">**</bpt>CFieldExchange::Default.<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>You can see examples of calling <bpt id="p1">**</bpt>CFieldExchange::Default<ept id="p1">**</ept> in dbrfx.cpp</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It is important to call <ph id="ph1">`IsFieldType`</ph> at the start of your RFX function, and return immediately if it returns FALSE.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>This mechanism keeps parameter operations from being performed on <bpt id="p1">**</bpt>outputColumns<ept id="p1">**</ept>, and vice versa (like calling <bpt id="p2">**</bpt>BindParam<ept id="p2">**</ept> on an <bpt id="p3">**</bpt>outputColumn<ept id="p3">**</ept>).</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>In addition, <ph id="ph1">`IsFieldType`</ph> automatically keeps track of the count of <bpt id="p1">**</bpt>outputColumns<ept id="p1">**</ept> (<ph id="ph2">`m_nFields`</ph>) and params (<ph id="ph3">`m_nParams`</ph>).</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Technical Notes by Number</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Technical Notes by Category</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>