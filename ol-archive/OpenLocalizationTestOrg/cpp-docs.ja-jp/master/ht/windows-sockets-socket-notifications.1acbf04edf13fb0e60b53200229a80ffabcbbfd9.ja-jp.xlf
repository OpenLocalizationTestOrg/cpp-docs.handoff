<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">56ea57d378eef5e66b770acf74adcd3528f3e2c2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\windows-sockets-socket-notifications.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3627e8d484a025d202723433c90ca460649294a7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b59b05a8c4fa63873281b1bba1d6605f7027126f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Socket Notifications | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Socket Notifications</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This article describes the notification functions in the socket classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These member functions are callback functions that the framework calls to notify your socket object of important events.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The notification functions are:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>OnReceive<ept id="p1">](../mfc/reference/casyncsocket-class.md#casyncsocket__onreceive)</ept>: Notifies this socket that there is data in the buffer for it to retrieve by calling <bpt id="p2">[</bpt>Receive<ept id="p2">](../mfc/reference/casyncsocket-class.md#casyncsocket__receive)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>OnSend<ept id="p1">](../mfc/reference/casyncsocket-class.md#casyncsocket__onsend)</ept>: Notifies this socket that it can now send data by calling <bpt id="p2">[</bpt>Send<ept id="p2">](../mfc/reference/casyncsocket-class.md#casyncsocket__send)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>OnAccept<ept id="p1">](../mfc/reference/casyncsocket-class.md#casyncsocket__onaccept)</ept>: Notifies this listening socket that it can accept pending connection requests by calling <bpt id="p2">[</bpt>Accept<ept id="p2">](../mfc/reference/casyncsocket-class.md#casyncsocket__accept)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>OnConnect<ept id="p1">](../mfc/reference/casyncsocket-class.md#casyncsocket__onconnect)</ept>: Notifies this connecting socket that its connection attempt completed: perhaps successfully or perhaps in error.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>OnClose<ept id="p1">](../mfc/reference/casyncsocket-class.md#casyncsocket__onclose)</ept>: Notifies this socket that the socket it is connected to has closed.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>An additional notification function is <bpt id="p1">[</bpt>OnOutOfBandData<ept id="p1">](../mfc/reference/casyncsocket-class.md#casyncsocket__onoutofbanddata)</ept>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>This notification tells the receiving socket that the sending socket has "out-of-band" data to send.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Out-of-band data is a logically independent channel associated with each pair of connected stream sockets.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The out-of-band channel is typically used to send "urgent" data.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>MFC supports out-of-band data.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Advanced users working with class <bpt id="p1">[</bpt>CAsyncSocket<ept id="p1">](../mfc/reference/casyncsocket-class.md)</ept> might need to use the out-of-band channel, but users of class <bpt id="p2">[</bpt>CSocket<ept id="p2">](../mfc/reference/csocket-class.md)</ept> are discouraged from using it.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The easier way is to create a second socket for passing such data.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For more information about out-of-band data, see the Windows Sockets specification, available in the <ph id="ph1">[!INCLUDE[winSDK](../atl/includes/winsdk_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If you derive from class <ph id="ph1">`CAsyncSocket`</ph>, you must override the notification functions for those network events of interest to your application.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you derive a class from class <ph id="ph1">`CSocket`</ph>, it is your choice whether to override the notification functions of interest.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>You can also use <ph id="ph1">`CSocket`</ph> itself, in which case the notification functions default to doing nothing.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>These functions are overridable callback functions.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`CSocket`</ph> convert messages to notifications, but you must implement how the notification functions respond if you wish to use them.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The notification functions are called at the time your socket is notified of an event of interest, such as the presence of data to be read.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>MFC calls the notification functions to let you customize your socket's behavior at the time it is notified.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For example, you might call <bpt id="p1">**</bpt>Receive<ept id="p1">**</ept> from your <ph id="ph1">`OnReceive`</ph> notification function, that is, on being notified that there is data to read, you call <bpt id="p2">**</bpt>Receive<ept id="p2">**</ept> to read it.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This approach is not necessary, but it is a valid scenario.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>As an alternative, you might use your notification function to track progress, print <bpt id="p1">**</bpt>TRACE<ept id="p1">**</ept> messages, and so on.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>You can take advantage of these notifications by overriding the notification functions in a derived socket class and providing an implementation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>During an operation such as receiving or sending data, a <ph id="ph1">`CSocket`</ph> object becomes synchronous.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>During the synchronous state, any notifications meant for other sockets are queued while the current socket waits for the notification it wants.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>(For example, during a <bpt id="p1">**</bpt>Receive<ept id="p1">**</ept> call, the socket wants a notification to read.) Once the socket completes its synchronous operation and becomes asynchronous again, other sockets can begin receiving the queued notifications.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In <ph id="ph1">`CSocket`</ph>, the <ph id="ph2">`OnConnect`</ph> notification function is never called.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For connections, you call <bpt id="p1">**</bpt>Connect<ept id="p1">**</ept>, which will return when the connection is completed (either successfully or in error).</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>How connection notifications are handled is an MFC implementation detail.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For details about each notification function, see the function under class <ph id="ph1">`CAsyncSocket`</ph> in the <bpt id="p1">*</bpt>MFC Reference<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>For source code and information about MFC samples, see <bpt id="p1">[</bpt>MFC Samples<ept id="p1">](../visual-cpp-samples.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Using Class CAsyncSocket</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Deriving from Socket Classes</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Windows Sockets: How Sockets with Archives Work</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Blocking</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Byte Ordering</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Windows Sockets: Converting Strings</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Windows Sockets in MFC</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>