<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a78f7045f9eb95af97b23394ffc87a02ed320022</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\example-program.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">33310bee1b5349278e3d00746fd20a871a988efb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2663e54e3cdac45e666d3f96ab0c9f950fd90868</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Example Program | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Example Program</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The following C source program consists of two source files.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>It gives an overview of some of the various declarations and definitions possible in a C program.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Later sections in this book describe how to write these declarations, definitions, and initializations, and how to use C keywords such as <bpt id="p1">**</bpt>static<ept id="p1">**</ept> and <ph id="ph1">`extern`</ph>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`printf`</ph> function is declared in the C header file STDIO.H.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`main`</ph> and <ph id="ph2">`max`</ph> functions are assumed to be in separate files, and execution of the program begins with the <ph id="ph3">`main`</ph> function.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>No explicit user functions are executed before <ph id="ph1">`main`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>FILE1.C contains the prototype for the <ph id="ph1">`max`</ph> function.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This kind of declaration is sometimes called a "forward declaration" because the function is declared before it is used.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The definition for the <ph id="ph1">`main`</ph> function includes calls to <ph id="ph2">`max`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The lines beginning with <ph id="ph1">`#define`</ph> are preprocessor directives.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>These directives tell the preprocessor to replace the identifiers <ph id="ph1">`ONE`</ph>, <ph id="ph2">`TWO`</ph>, and <ph id="ph3">`THREE`</ph> with the numbers <ph id="ph4">`1`</ph>, <ph id="ph5">`2`</ph>, and <ph id="ph6">`3`</ph>, respectively, throughout FILE1.C.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>However, the directives do not apply to FILE2.C, which is compiled separately and then linked with FILE1.C.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The line beginning with <ph id="ph1">`#include`</ph> tells the compiler to include the file STDIO.H, which contains the prototype for the <ph id="ph2">`printf`</ph> function.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Preprocessor directives<ept id="p1">](../preprocessor/preprocessor-directives.md)</ept> are explained in the <bpt id="p2">*</bpt>Preprocessor Reference<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>FILE1.C uses defining declarations to initialize the global variables <ph id="ph1">`a`</ph> and <ph id="ph2">`b`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The local variables <ph id="ph1">`c`</ph> and <ph id="ph2">`d`</ph> are declared but not initialized.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Storage is allocated for all these variables.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The static and external variables, <ph id="ph1">`u`</ph> and <ph id="ph2">`v`</ph>, are automatically initialized to 0.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Therefore only <ph id="ph1">`a`</ph>, <ph id="ph2">`b`</ph>, <ph id="ph3">`u`</ph>, and <ph id="ph4">`v`</ph> contain meaningful values when declared because they are initialized, either explicitly or implicitly.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>FILE2.C contains the function definition for <ph id="ph1">`max`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This definition satisfies the calls to <ph id="ph1">`max`</ph> in FILE1.C.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The lifetime and visibility of identifiers are discussed in <bpt id="p1">[</bpt>Lifetime, Scope, Visibility, and Linkage<ept id="p1">](../c-language/lifetime-scope-visibility-and-linkage.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>For more information on functions, see <bpt id="p1">[</bpt>Functions<ept id="p1">](../c-language/functions-c.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Source Files and Source Programs</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>