<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8c0c415687a5b0bce4e6777569fd602b5b24b3e8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\source-files-and-source-programs.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">19ff0f2dafb79ad251a4a21176013464c5a0ab60</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">944a66d7896f06325ca13b81314617b2a77696a5</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Source Files and Source Programs | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Source Files and Source Programs</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A source program can be divided into one or more "source files," or "translation units."</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The input to the compiler is called a "translation unit."</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>translation-unit<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>external-declaration</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>translation-unit external-declaration</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>external-declaration<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>function-definition</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>declaration</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>Overview of Declarations<ept id="p1">](../c-language/overview-of-declarations.md)</ept> gives the syntax for the <ph id="ph1">`declaration`</ph> nonterminal, and the <bpt id="p2">*</bpt>Preprocessor Reference<ept id="p2">*</ept> explains how the <bpt id="p3">[</bpt>translation unit<ept id="p3">](../preprocessor/phases-of-translation.md)</ept> is processed.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>See the introduction to <bpt id="p1">[</bpt>C Language Syntax Summary<ept id="p1">](../c-language/c-language-syntax-summary.md)</ept>, for an explanation of the ANSI syntax conventions.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The components of a translation unit are external declarations that include function definitions and identifier declarations.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>These declarations and definitions can be in source files, header files, libraries, and other files the program needs.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>You must compile each translation unit and link the resulting object files to make a program.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A C "source program" is a collection of directives, pragmas, declarations, definitions, statement blocks, and functions.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To be valid components of a Microsoft C program, each must have the syntax described in this book, although they can appear in any order in the program (subject to the rules outlined throughout this book).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>However, the location of these components in a program does affect how variables and functions can be used in a program.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>(See <bpt id="p1">[</bpt>Lifetime, Scope, Visibility, and Linkage<ept id="p1">](../c-language/lifetime-scope-visibility-and-linkage.md)</ept> for more information.)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Source files need not contain executable statements.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For example, you may find it useful to place definitions of variables in one source file and then declare references to these variables in other source files that use them.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>This technique makes the definitions easy to find and update when necessary.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For the same reason, constants and macros are often organized into separate files called "include files" or "header files" that can be referenced in source files as required.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>See the <bpt id="p1">*</bpt>Preprocessor Reference<ept id="p1">*</ept> for information about <bpt id="p2">[</bpt>macros<ept id="p2">](../preprocessor/macros-c-cpp.md)</ept> and <bpt id="p3">[</bpt>include files<ept id="p3">](../preprocessor/hash-include-directive-c-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Program Structure</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>