<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7710e02e70afeecc4f989e238053509914e16c8b</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\c-comments.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cb4877e559e214d7a1aac05f61bb70f39e6652c9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">96d5370b7093ef56dc70df66619a0b814f3dc485</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Comments | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Comments</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>A "comment" is a sequence of characters beginning with a forward slash/asterisk combination (<bpt id="p1">**</bpt><ph id="ph1">/\*</ph><ept id="p1">**</ept>) that is treated as a single white-space character by the compiler and is otherwise ignored.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A comment can include any combination of characters from the representable character set, including newline characters, but excluding the "end comment" delimiter (<bpt id="p1">**</bpt><ph id="ph1">\*/</ph><ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Comments can occupy more than one line but cannot be nested.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Comments can appear anywhere a white-space character is allowed.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Since the compiler treats a comment as a single white-space character, you cannot include comments within tokens.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The compiler ignores the characters in the comment.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Use comments to document your code.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This example is a comment accepted by the compiler:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Comments can appear on the same line as a code statement:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can choose to precede functions or program modules with a descriptive comment block:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Since comments cannot contain nested comments, this example causes an error:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The error occurs because the compiler recognizes the first <ph id="ph1">`*/`</ph>, after the words <ph id="ph2">`Open file`</ph>, as the end of the comment.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>It tries to process the remaining text and produces an error when it finds the <ph id="ph1">`*/`</ph> outside a comment.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>While you can use comments to render certain lines of code inactive for test purposes, the preprocessor directives <ph id="ph1">`#if`</ph> and <ph id="ph2">`#endif`</ph> and conditional compilation are a useful alternative for this task.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Preprocessor Directives<ept id="p1">](../preprocessor/preprocessor-directives.md)</ept> in the <bpt id="p2">*</bpt>Preprocessor Reference<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Microsoft compiler also supports single-line comments preceded by two forward slashes (<bpt id="p1">**</bpt><ph id="ph1">//</ph><ept id="p1">**</ept>).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you compile with /Za (ANSI standard), these comments generate errors.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>These comments cannot extend to a second line.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Comments beginning with two forward slashes (<bpt id="p1">**</bpt><ph id="ph1">//</ph><ept id="p1">**</ept>) are terminated by the next newline character that is not preceded by an escape character.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>In the next example, the newline character is preceded by a backslash (<bpt id="p1">**</bpt><ph id="ph1">\\</ph><ept id="p1">**</ept>), creating an "escape sequence."</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This escape sequence causes the compiler to treat the next line as part of the previous line.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>(For more information, see <bpt id="p1">[</bpt>Escape Sequences<ept id="p1">](../c-language/escape-sequences.md)</ept>.)</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Therefore, the <ph id="ph1">`i++;`</ph> statement is commented out.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The default for Microsoft C is that the Microsoft extensions are enabled.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Use /Za to disable these extensions.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>C Tokens</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>