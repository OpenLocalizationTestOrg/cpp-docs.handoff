<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bbbdfac0b31407e3790b27b19187f7db9fad27a8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\string-cpp-component-extensions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e0cde0f74d4a3a25c5e79c9a8c2137e7f9a04658</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">087a38ca14e076ca260fedeb29ff0c391a45a385</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>String  (C++ Component Extensions) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>String  (C++ Component Extensions)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The Visual C++ compiler supports <bpt id="p1">*</bpt>strings<ept id="p1">*</ept>, which are objects that represent text as a sequence of characters.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Visual C++ supports string variables, whose value is implicit, and literals, whose value is an explicit quoted string.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>All Runtimes</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The Windows Runtime and common language runtime represent strings as objects whose allocated memory is managed automatically.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>That is, you are not required to explicitly discard the memory for a string when the string variable goes out of scope or your application ends.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To indicate that the lifetime of a string object is to be managed automatically, declare the string type with the <bpt id="p1">[</bpt>handle-to-object (^)<ept id="p1">](../windows/handle-to-object-operator-hat-cpp-component-extensions.md)</ept> modifier.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Windows Runtime</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The Windows Runtime architecture requires Visual C++ to implement the <ph id="ph1">`String`</ph> data type in the <ph id="ph2">`Platform`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For your convenience, Visual C++ also provides the <ph id="ph1">`string`</ph> data type, which is a synonym for <ph id="ph2">`Platform::String`</ph>, in the <ph id="ph3">`default`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For more information and examples about strings, see <bpt id="p1">[</bpt>Platform::String, std::wstring, and Literals (Platform)<ept id="p1">](http://msdn.microsoft.com/en-us/ec92fbc6-edf3-4137-a85e-8e29bdb857a8)</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/ZW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Common Language Runtime</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This topic discusses how the Visual C++ compiler processes string literals when you run it by using the <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To use <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept>, you must also use the common language runtime (CLR), C++/CLI syntax and managed objects.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For more information about <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept>, see <bpt id="p2">[</bpt>/clr (Common Language Runtime Compilation)<ept id="p2">](../build/reference/clr-common-language-runtime-compilation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>When compiling with <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept>, the compiler will convert string literals to strings of type &lt;xref:System.String&gt;.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>To preserve backward compatibility with existing code there are two exceptions to this:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Exception handling.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When a string literal is thrown, the compiler will catch it as a string literal.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Template deduction.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When a string literal is passed as a template argument, the compiler will not convert it to a &lt;xref:System.String&gt;.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Note, string literals passed as a generic argument will be promoted to &lt;xref:System.String&gt;.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The compiler also has built-in support for three operators, which you can override to customize their behavior:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>System::String ^ operator +( System::String, System::String);</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>System::String ^ operator +( System::Object, System::String);</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>System::String ^ operator +( System::String, System::Object);</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>When passed a &lt;xref:System.String&gt;, the compiler will box, if necessary, and then concatenate the object (with ToString) with the string.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The caret ("^") indicates that the declared variable is a handle to a C++/CLI managed object.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For more information see <bpt id="p1">[</bpt>String and Character Literals<ept id="p1">](../cpp/string-and-character-literals-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The following code example demonstrates concatenating and comparing strings.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The following sample shows that you can overload the compiler-provided operators, and that the compiler will find a function overload based on the &lt;xref:System.String&gt; type.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The following sample shows that the compiler distinguishes between native strings and &lt;xref:System.String&gt; strings.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Component Extensions for Runtime Platforms</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>String and Character Literals</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>/clr (Common Language Runtime Compilation)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>