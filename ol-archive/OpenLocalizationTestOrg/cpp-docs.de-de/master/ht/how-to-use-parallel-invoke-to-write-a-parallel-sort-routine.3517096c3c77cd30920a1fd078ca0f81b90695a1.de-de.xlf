<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eb945a3d6ae385c07f2d7c0ead3ee4833f66e804</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\concrt\how-to-use-parallel-invoke-to-write-a-parallel-sort-routine.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1891d6bdace453426d69dec574f23e86cc1865b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3d41da78b80ba126ad3f9d9c3b6e651e198f968f</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>How to: Use parallel_invoke to Write a Parallel Sort Routine | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>How to: Use parallel_invoke to Write a Parallel Sort Routine</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This document describes how to use the <bpt id="p1">[</bpt>parallel_invoke<ept id="p1">](../../parallel/concrt/parallel-algorithms.md#parallel_invoke)</ept> algorithm to improve the performance of the bitonic sort algorithm.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The bitonic sort algorithm recursively divides the input sequence into smaller sorted partitions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The bitonic sort algorithm can run in parallel because each partition operation is independent of all other operations.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Although the bitonic sort is an example of a <bpt id="p1">*</bpt>sorting network<ept id="p1">*</ept> that sorts all combinations of input sequences, this example sorts sequences whose lengths are a power of two.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This example uses a parallel sort routine for illustration.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>You can also use the built-in sorting algorithms that the PPL provides: <bpt id="p1">[</bpt>concurrency::parallel_sort<ept id="p1">](reference/concurrency-namespace-functions.md#parallel_sort)</ept>, <bpt id="p2">[</bpt>concurrency::parallel_buffered_sort<ept id="p2">](reference/concurrency-namespace-functions.md#parallel_buffered_sort)</ept>, and <bpt id="p3">[</bpt>concurrency::parallel_radixsort<ept id="p3">](reference/concurrency-namespace-functions.md#parallel_radixsort)</ept>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Parallel Algorithms<ept id="p1">](../../parallel/concrt/parallel-algorithms.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Sections</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This document describes the following tasks:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Performing Bitonic Sort Serially</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Using parallel_invoke to Perform Bitonic Sort in Parallel</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Performing Bitonic Sort Serially</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The following example shows the serial version of the bitonic sort algorithm.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`bitonic_sort`</ph> function divides the sequence into two partitions, sorts those partitions in opposite directions, and then merges the results.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This function calls itself two times recursively to sort each partition.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>concrt-parallel-bitonic-sort#1</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Using parallel_invoke to Perform Bitonic Sort in Parallel</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This section describes how to use the <ph id="ph1">`parallel_invoke`</ph> algorithm to perform the bitonic sort algorithm in parallel.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Procedures</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>To perform the bitonic sort algorithm in parallel</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`#include`</ph> directive for the header file ppl.h.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>concrt-parallel-bitonic-sort#10</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Add a <ph id="ph1">`using`</ph> directive for the <ph id="ph2">`concurrency`</ph> namespace.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>concrt-parallel-bitonic-sort#11</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Create a new function, called <ph id="ph1">`parallel_bitonic_mege`</ph>, which uses the <ph id="ph2">`parallel_invoke`</ph> algorithm to merge the sequences in parallel if there is sufficient amount of work to do.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Otherwise, call <ph id="ph1">`bitonic_merge`</ph> to merge the sequences serially.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>concrt-parallel-bitonic-sort#2</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Perform a process that resembles the one in the previous step, but for the <ph id="ph1">`bitonic_sort`</ph> function.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>concrt-parallel-bitonic-sort#3</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Create an overloaded version of the <ph id="ph1">`parallel_bitonic_sort`</ph> function that sorts the array in increasing order.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>concrt-parallel-bitonic-sort#4</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`parallel_invoke`</ph> algorithm reduces overhead by performing the last of the series of tasks on the calling context.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For example, in the <ph id="ph1">`parallel_bitonic_sort`</ph> function, the first task runs on a separate context, and the second task runs on the calling context.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>concrt-parallel-bitonic-sort#5</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The following complete example performs both the serial and the parallel versions of the bitonic sort algorithm.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The example also prints to the console the time that is required to perform each computation.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>concrt-parallel-bitonic-sort#8</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The following sample output is for a computer that has four processors.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>[<bpt id="p1">[</bpt>Top<ept id="p1">](#top)</ept>]</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Compiling the Code</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>To compile the code, copy it and then paste it in a Visual Studio project, or paste it in a file that is named <ph id="ph1">`parallel-bitonic-sort.cpp`</ph> and then run the following command in a Visual Studio Command Prompt window.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>cl.exe /EHsc parallel-bitonic-sort.cpp</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Robust Programming</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This example uses the <ph id="ph1">`parallel_invoke`</ph> algorithm instead of the <bpt id="p1">[</bpt>concurrency::task_group<ept id="p1">](reference/task-group-class.md)</ept> class because the lifetime of each task group does not extend beyond a function.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>We recommend that you use <ph id="ph1">`parallel_invoke`</ph> when you can because it has less execution overhead than <ph id="ph2">`task group`</ph> objects, and therefore lets you write better performing code.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The parallel versions of some algorithms perform better only when there is sufficient work to do.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>For example, the <ph id="ph1">`parallel_bitonic_merge`</ph> function calls the serial version, <ph id="ph2">`bitonic_merge`</ph>, if there are 500 or fewer elements in the sequence.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>You can also plan your overall sorting strategy based on the amount of work.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>For example, it might be more efficient to use the serial version of the quick sort algorithm if the array contains fewer than 500 items, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>concrt-parallel-bitonic-sort#9</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>As with any parallel algorithm, we recommend that you profile and tune your code as appropriate.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Task Parallelism</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>parallel_invoke Function</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>