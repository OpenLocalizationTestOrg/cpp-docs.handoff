<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">dbc3d55250f4aa3ea4729438374351961e49d401</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl-mfc-shared\allocating-and-releasing-memory-for-a-bstr.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">815bd51b4c4d92a2ea99d8f6c4f329e6472c10c4</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a24527e4753748d0072b3139940182493568ef53</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Allocating and Releasing Memory for a BSTR | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Allocating and Releasing Memory for a BSTR</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When you create <ph id="ph1">`BSTR`</ph>s and pass them between COM objects, you must take care in treating the memory they use in order to avoid memory leaks.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`BSTR`</ph> stays within an interface, you must free its memory when you are done with it.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>However, when a <ph id="ph1">`BSTR`</ph> passes out of an interface, the receiving object takes responsibility for its memory management.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>In general, the rules for allocating and releasing memory allocated for <ph id="ph1">`BSTR`</ph>s are as follows:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>When you call into a function that expects a <ph id="ph1">`BSTR`</ph> argument, you must allocate the memory for the <ph id="ph2">`BSTR`</ph> before the call and release it afterwards.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#192</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#193</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When you call into a function that returns a <ph id="ph1">`BSTR`</ph>, you must free the string yourself.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#194</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#195</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>When you implement a function that returns a <ph id="ph1">`BSTR`</ph>, allocate the string but do not free it.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The receiving the function releases the memory.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>NVC_ATLMFC_Utilities#196</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Strings (ATL/MFC)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>CStringT::AllocSysString</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>SysAllocString</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>SysFreeString</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>