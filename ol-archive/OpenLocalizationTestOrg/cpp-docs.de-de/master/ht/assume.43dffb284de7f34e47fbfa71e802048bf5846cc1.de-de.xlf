<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cd056365a929beffd87c62c6214912c6180c9509</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\intrinsics\assume.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">21eecfa9ecd8c4692650e5c9594ae0f50c18deaa</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">47b6d557f3a9909739b145f7e6a9f1b95b8663a0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>__assume | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>__assume</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Passes a hint to the optimizer.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Any expression that is assumed to evaluate to true.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The optimizer assumes that the condition represented by <ph id="ph1">`expression`</ph> is true at the point where the keyword appears and remains true until <ph id="ph2">`expression`</ph> is modified (for example, by assignment to a variable).</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Selective use of hints passed to the optimizer by <ph id="ph1">`__assume`</ph> can improve optimization.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`__assume`</ph> statement is written as a contradiction (an expression that always evaluates to false), it is always treated as <ph id="ph2">`__assume(0)`</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If your code isnâ€™t behaving as expected, ensure that the <ph id="ph1">`expression`</ph> you defined is valid and true, as described earlier.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information about expected <ph id="ph1">`__assume(0)`</ph> behavior, see the later remarks.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A program must not contain an invalid <ph id="ph1">`__assume`</ph> statement on a reachable path.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If the compiler can reach an invalid <ph id="ph1">`__assume`</ph> statement, the program might cause unpredictable and potentially dangerous behavior.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>is not a genuine intrinsic.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>It does not have to be declared as a function and it cannot be used in a <ph id="ph1">`#pragma intrinsic`</ph> directive.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Although no code is generated, the code generated by the optimizer is affected.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`__assume`</ph> in an <bpt id="p1">[</bpt>ASSERT<ept id="p1">](../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept> only when the assert is not recoverable.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Do not use <ph id="ph1">`__assume`</ph> in an assert for which you have subsequent error recovery code because the compiler might optimize away the error-handling code.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`__assume(0)`</ph> statement is a special case.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`__assume(0)`</ph> to indicate a code path that cannot be reached.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The following example shows how to use <ph id="ph1">`__assume(0)`</ph> to indicate that the default case of a switch statement cannot be reached.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This shows the most typical use of <ph id="ph1">`__assume(0)`</ph>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Intrinsic</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Architecture</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>x86, ARM,</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The use of <ph id="ph1">`__assume(0)`</ph> tells the optimizer that the default case cannot be reached.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The example demonstrates that the programmer knows that the only possible inputs for <ph id="ph1">`p`</ph> will be 1 or 2.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>If another value is passed in for <ph id="ph1">`p`</ph>, the program becomes invalid and causes unpredictable behavior.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>As a result of the <ph id="ph1">`__assume(0)`</ph> statement, the compiler does not generate code to test whether <ph id="ph2">`p`</ph> has a value that is not represented in a case statement.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>For this to work, the <ph id="ph1">`__assume(0)`</ph> statement must be the first statement in the body of the default case.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because the compiler generates code based on <ph id="ph1">`__assume`</ph>, that code might not run correctly if the expression inside the <ph id="ph2">`__assume`</ph> statement is false at run time.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>If you are not sure that the expression will always be true at run time, you can use the <ph id="ph1">`assert`</ph> function to protect the code.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Unfortunately, this use of <ph id="ph1">`assert`</ph> prevents the compiler from performing the default-case optimization that was described earlier in this document.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>As an alternative, you can use a separate macro, as follows.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Compiler Intrinsics</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>