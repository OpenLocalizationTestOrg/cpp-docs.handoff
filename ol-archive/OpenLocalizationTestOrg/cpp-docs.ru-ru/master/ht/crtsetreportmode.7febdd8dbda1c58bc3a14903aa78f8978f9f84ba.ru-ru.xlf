<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5bf199da227f92294b9e0a173625f3220d280630</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\crtsetreportmode.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">53a03596d291e98ba188c5dcabd39b3d55dd71e8</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1f4c7ecdf7d42ac3ef283f818eab82bb42e66246</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_CrtSetReportMode | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_CrtSetReportMode</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Specifies the destination or destinations for a specific report type generated by <ph id="ph1">`_CrtDbgReport`</ph> and any macros that call <bpt id="p1">[</bpt>_CrtDbgReport, _CrtDbgReportW<ept id="p1">](../../c-runtime-library/reference/crtdbgreport-crtdbgreportw.md)</ept>, such as <bpt id="p2">[</bpt>_ASSERT, _ASSERTE, _ASSERT_EXPR Macros<ept id="p2">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept>, <bpt id="p3">[</bpt>_ASSERT, _ASSERTE, _ASSERT_EXPR Macros<ept id="p3">](../../c-runtime-library/reference/assert-asserte-assert-expr-macros.md)</ept>, <bpt id="p4">[</bpt>_RPT, _RPTF, _RPTW, _RPTFW Macros<ept id="p4">](../../c-runtime-library/reference/rpt-rptf-rptw-rptfw-macros.md)</ept>, and <bpt id="p5">[</bpt>_RPT, _RPTF, _RPTW, _RPTFW Macros<ept id="p5">](../../c-runtime-library/reference/rpt-rptf-rptw-rptfw-macros.md)</ept> (debug version only).</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Report type: <ph id="ph1">`_CRT_WARN`</ph>, <ph id="ph2">`_CRT_ERROR`</ph>, and <ph id="ph3">`_CRT_ASSERT`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>New report mode or modes for <ph id="ph1">`reportType`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>On successful completion, <ph id="ph1">`_CrtSetReportMode`</ph> returns the previous report mode or modes for the report type specified in <ph id="ph2">`reportType`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If an invalid value is passed in as <ph id="ph1">`reportType`</ph> or an invalid mode is specified for <ph id="ph2">`reportMode`</ph>, <ph id="ph3">`_CrtSetReportMode`</ph> invokes the invalid parameter handler as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, this function sets <ph id="ph1">`errno`</ph> to <ph id="ph2">`EINVAL`</ph> and returns -1.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>errno, _doserrno, _sys_errlist, and _sys_nerr<ept id="p1">](../../c-runtime-library/errno-doserrno-sys-errlist-and-sys-nerr.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>specifies the output destination for <ph id="ph1">`_CrtDbgReport`</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Because the macros <ph id="ph1">`_ASSERT`</ph>, <ph id="ph2">`_ASSERTE`</ph>, <ph id="ph3">`_RPT`</ph>, and <ph id="ph4">`_RPTF`</ph> call <ph id="ph5">`_CrtDbgReport`</ph>, <ph id="ph6">`_CrtSetReportMode`</ph> specifies the output destination of text specified with those macros.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>When <bpt id="p1">[</bpt>_DEBUG<ept id="p1">](../../c-runtime-library/debug.md)</ept> is not defined, calls to <ph id="ph1">`_CrtSetReportMode`</ph> are removed during preprocessing.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If you do not call <ph id="ph1">`_CrtSetReportMode`</ph> to define the output destination of messages, then the following defaults are in effect:</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Assertion failures and errors are directed to a debug message window.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Warnings from Windows applications are sent to the debugger's output window.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Warnings from console applications are not displayed.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The following table lists the report types defined in Crtdbg.h.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Report type</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Warnings, messages, and information that does not need immediate attention.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Errors, unrecoverable problems, and issues that require immediate attention.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Assertion failures (asserted expressions that evaluate to <ph id="ph1">`FALSE`</ph>).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_CrtSetReportMode`</ph> function assigns the new report mode specified in <ph id="ph2">`reportMode`</ph> to the report type specified in <ph id="ph3">`reportType`</ph> and returns the previously defined report mode for <ph id="ph4">`reportType`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following table lists the available choices for <ph id="ph1">`reportMode`</ph> and the resulting behavior of <ph id="ph2">`_CrtDbgReport`</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>These options are defined as bit flags in Crtdbg.h.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Report mode</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>_CrtDbgReport behavior</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Writes the message to the debugger's output window.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Writes the message to a user-supplied file handle.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>_CrtSetReportFile<ept id="p1">](../../c-runtime-library/reference/crtsetreportfile.md)</ept> should be called to define the specific file or stream to use as the destination.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Creates a message box to display the message along with the <ph id="ph1">`Abort`</ph>, <ph id="ph2">`Retry`</ph>, and <ph id="ph3">`Ignore`</ph> buttons.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`reportMode`</ph> for the specified <ph id="ph2">`reportType`</ph>:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>1</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>2</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>4</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Each report type can be reported using one, two, or three modes or no mode at all.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Therefore, it is possible to have more than one destination defined for a single report type.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>For example, the following code fragment causes assertion failures to be sent to both a debug message window and to <ph id="ph1">`stderr`</ph>:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In addition, the reporting mode or modes for each report type can be separately controlled.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, it is possible to specify that a <ph id="ph1">`reportType`</ph> of <ph id="ph2">`_CRT_WARN`</ph> be sent to an output debug string, while <ph id="ph3">`_CRT_ASSERT`</ph> be displayed using a debug message window and sent to <ph id="ph4">`stderr`</ph>, as previously illustrated.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Routine</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Optional header</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>crtdbg.h&gt;</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>errno.h&gt;</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Libraries:<ept id="p1">**</ept> Debug versions of <bpt id="p2">[</bpt>CRT Library Features<ept id="p2">](../../c-runtime-library/crt-library-features.md)</ept> only.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Not applicable.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>To call the standard C function, use <ph id="ph1">`PInvoke`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Platform Invoke Examples<ept id="p1">](http://msdn.microsoft.com/Library/15926806-f0b7-487e-93a6-4e9367ec689f)</ept>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Debug Routines</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>