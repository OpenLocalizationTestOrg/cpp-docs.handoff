<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">44966c67583ff1fe976238246fe57499275098a1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\intrinsics\interlockedbittestandset-intrinsic-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a01228425d595ac25a320b5b7e9664593debf59a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">89d741d76968b05cf2a08e677d7bfe7c1cdb33bc</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_interlockedbittestandset Intrinsic Functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_interlockedbittestandset Intrinsic Functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Generate an instruction which examines bit <ph id="ph1">`b`</ph> of the address <ph id="ph2">`a`</ph> and returns its current value before setting it to 1.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A pointer to the memory to examine.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>[in]</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The bit position to test.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The value of the bit at position <ph id="ph1">`b`</ph> before it is set.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Intrinsic</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Architecture</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Header</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>x86, ARM,</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>intrin.h&gt;</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`_interlockedbittestandset_nf`</ph>,</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>ARM</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>intrin.h&gt;</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>x86,</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>immintrin.h&gt;</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>intrin.h&gt;</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>,</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>immintrin.h&gt;</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>On x86 and <ph id="ph1">[!INCLUDE[vcprx64](../assembler/inline/includes/vcprx64_md.md)]</ph> processors, these intrinsics use the <ph id="ph2">`lock bts`</ph> instruction to read and set the specified bit to 1.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The operation is atomic.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>On ARM processors, use the intrinsics with <ph id="ph1">`_acq`</ph> and <ph id="ph2">`_rel`</ph> suffixes for acquire and release semantics, such as at the beginning and end of a critical section.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>The ARM intrinsics with an <ph id="ph1">`_nf`</ph> ("no fence") suffix do not act as a memory barrier.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>On Intel processors that support Hardware Lock Elision (HLE) instructions, the intrinsics with <ph id="ph1">`_HLEAcquire`</ph> and <ph id="ph2">`_HLERelease`</ph> suffixes include a hint to the processor that can accelerate performance by eliminating a lock write step in hardware.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If these intrinsics are called on processors that do not support HLE, the hint is ignored.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>These routines are only available as intrinsics.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>END Microsoft Specific</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Compiler Intrinsics</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Conflicts with the x86 Compiler</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>