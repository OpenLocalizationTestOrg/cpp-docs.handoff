<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a4b62b0de97f576e48a3a0518c85656b46e895f0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\dynamic-cast-operator.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5a861718e4991151d4093fe1990dce66d08d6e97</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0a9efea021af062f2b86923176692bc6ad4a7a3c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>dynamic_cast Operator | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>dynamic_cast Operator</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Converts the operand <ph id="ph1">`expression`</ph> to an object of type <ph id="ph2">`type-id`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`type-id`</ph> must be a pointer or a reference to a previously defined class type or a "pointer to void".</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The type of <ph id="ph1">`expression`</ph> must be a pointer if <ph id="ph2">`type-id`</ph> is a pointer, or an l-value if <ph id="ph3">`type-id`</ph> is a reference.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>static_cast<ept id="p1">](../cpp/static-cast-operator.md)</ept> for an explanation of the difference between static and dynamic casting conversions, and when it is appropriate to use each.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>There are two breaking changes in the behavior of <ph id="ph1">`dynamic_cast`</ph> in managed code:</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>to a pointer to the underlying type of a boxed enum will fail at runtime, returning 0 instead of the converted pointer.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>will no longer throw an exception when <ph id="ph1">`type-id`</ph> is an interior pointer to a value type, with the cast failing at runtime.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The cast will now return the 0 pointer value instead of throwing.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`type-id`</ph> is a pointer to an unambiguous accessible direct or indirect base class of <ph id="ph2">`expression`</ph>, a pointer to the unique subobject of type <ph id="ph3">`type-id`</ph> is the result.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This type of conversion is called an "upcast" because it moves a pointer up a class hierarchy, from a derived class to a class it is derived from.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>An upcast is an implicit conversion.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`type-id`</ph> is void*, a run-time check is made to determine the actual type of <ph id="ph2">`expression`</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The result is a pointer to the complete object pointed to by <ph id="ph1">`expression`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`type-id`</ph> is not void*, a run-time check is made to see if the object pointed to by <ph id="ph2">`expression`</ph> can be converted to the type pointed to by <ph id="ph3">`type-id`</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If the type of <ph id="ph1">`expression`</ph> is a base class of the type of <ph id="ph2">`type-id`</ph>, a run-time check is made to see if <ph id="ph3">`expression`</ph> actually points to a complete object of the type of <ph id="ph4">`type-id`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>If this is true, the result is a pointer to a complete object of the type of <ph id="ph1">`type-id`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>This type of conversion is called a "downcast" because it moves a pointer down a class hierarchy, from a given class to a class derived from it.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In cases of multiple inheritance, possibilities for ambiguity are introduced.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Consider the class hierarchy shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For CLR types, <ph id="ph1">`dynamic_cast`</ph> results in either a no-op if the conversion can be performed implicitly, or an MSIL <ph id="ph2">`isinst`</ph> instruction, which performs a dynamic check and returns <ph id="ph3">`nullptr`</ph> if the conversion fails.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The following sample uses <ph id="ph1">`dynamic_cast`</ph> to determine if a class is an instance of particular type:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Class hierarchy that shows multiple inheritance</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Class Hierarchy Showing Multiple Inheritance</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A pointer to an object of type <ph id="ph1">`D`</ph> can be safely cast to <ph id="ph2">`B`</ph> or <ph id="ph3">`C`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>However, if <ph id="ph1">`D`</ph> is cast to point to an <ph id="ph2">`A`</ph> object, which instance of <ph id="ph3">`A`</ph> would result?</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This would result in an ambiguous casting error.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>To get around this problem, you can perform two unambiguous casts.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Further ambiguities can be introduced when you use virtual base classes.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Consider the class hierarchy shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Class hierarchy that shows virtual base classes</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Class Hierarchy Showing Virtual Base Classes</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>In this hierarchy, <ph id="ph1">`A`</ph> is a virtual base class.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Given an instance of class <ph id="ph1">`E`</ph> and a pointer to the <ph id="ph2">`A`</ph> subobject, a <ph id="ph3">`dynamic_cast`</ph> to a pointer to <ph id="ph4">`B`</ph> will fail due to ambiguity.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>You must first cast back to the complete <ph id="ph1">`E`</ph> object, then work your way back up the hierarchy, in an unambiguous manner, to reach the correct <ph id="ph2">`B`</ph> object.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Consider the class hierarchy shown in the following figure.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Class hierarchy that shows duplicate base classes</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Class Hierarchy Showing Duplicate Base Classes</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Given an object of type <ph id="ph1">`E`</ph> and a pointer to the <ph id="ph2">`D`</ph> subobject, to navigate from the <ph id="ph3">`D`</ph> subobject to the left-most <ph id="ph4">`A`</ph> subobject, three conversions can be made.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>You can perform a <ph id="ph1">`dynamic_cast`</ph> conversion from the <ph id="ph2">`D`</ph> pointer to an <ph id="ph3">`E`</ph> pointer, then a conversion (either <ph id="ph4">`dynamic_cast`</ph> or an implicit conversion) from <ph id="ph5">`E`</ph> to <ph id="ph6">`B`</ph>, and finally an implicit conversion from <ph id="ph7">`B`</ph> to <ph id="ph8">`A`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`dynamic_cast`</ph> operator can also be used to perform a "cross cast."</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Using the same class hierarchy, it is possible to cast a pointer, for example, from the <ph id="ph1">`B`</ph> subobject to the <ph id="ph2">`D`</ph> subobject, as long as the complete object is of type <ph id="ph3">`E`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Considering cross casts, it is actually possible to do the conversion from a pointer to <ph id="ph1">`D`</ph> to a pointer to the left-most <ph id="ph2">`A`</ph> subobject in just two steps.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>You can perform a cross cast from <ph id="ph1">`D`</ph> to <ph id="ph2">`B`</ph>, then an implicit conversion from <ph id="ph3">`B`</ph> to <ph id="ph4">`A`</ph>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>A null pointer value is converted to the null pointer value of the destination type by <ph id="ph1">`dynamic_cast`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>When you use <ph id="ph1">`dynamic_cast &lt; type-id &gt; ( expression )`</ph>, if <ph id="ph2">`expression`</ph> cannot be safely converted to type <ph id="ph3">`type-id`</ph>, the run-time check causes the cast to fail.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>For example:</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The value of a failed cast to pointer type is the null pointer.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A failed cast to reference type throws a <bpt id="p1">[</bpt>bad_cast Exception<ept id="p1">](../cpp/bad-cast-exception.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`expression`</ph> does not point to or reference a valid object, a <ph id="ph2">`__non_rtti_object`</ph> exception is thrown.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>typeid<ept id="p1">](../cpp/typeid-operator.md)</ept> for an explanation of the <ph id="ph1">`__non_rtti_object`</ph> exception.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The following sample creates the base class (struct A) pointer, to an object (struct C).</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>This, plus the fact there are virtual functions, enables runtime polymorphism.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The sample also calls a non-virtual function in the hierarchy.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Casting Operators</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>