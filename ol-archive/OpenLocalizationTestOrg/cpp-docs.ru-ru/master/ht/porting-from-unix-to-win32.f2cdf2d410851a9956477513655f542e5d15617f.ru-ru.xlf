<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">acd097e1ce10782e5f39c748fba9baabb3ce7a15</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\porting\porting-from-unix-to-win32.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a554e1e3ca476240c8febabb89116800b39138c1</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">475fc3f375636686e898aca85ba723157e6b0cce</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Porting from UNIX to Win32 | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Porting from UNIX to Win32</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>When migrating applications from UNIX to Windows, you have several options:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Using UNIX libraries to port applications from UNIX to Win32</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Porting applications from UNIX to Win32 natively</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Running UNIX applications on Windows using the POSIX subsystem</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>UNIX libraries</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>One option UNIX programmers normally consider is using third-party UNIX-like libraries to let their UNIX code compile as a Win32 executable.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Several commercial (and at least one public domain) libraries do this.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>This is an option for some applications.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The advantage of these porting libraries is that they minimize the initial porting effort.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The main disadvantage, for a competitive software product, is that a native Win32 port of an application will generally be faster and will inevitably have more functionality.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>It can be awkward for the application to step outside of its UNIX shell if it needs to make Win32 calls to get more power from Windows.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The following list provides Microsoft and third-party resources for porting and supporting UNIX migration to Visual C++:</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>UNIX Migration Guides</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The UNIX Custom Application Migration Guide provides technical help on code migration from UNIX to the Win32 environment.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>http://go.microsoft.com/fwlink/?LinkId=95428</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The Unix Migration Project Guide supplements the UNIX Custom Application Migration Guide by providing high-level help on migrating substantial projects from UNIX to Win32.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The Guide provides advice on issues to consider at each stage of project migration.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The Guide may be downloaded from:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>http://go.microsoft.com/fwlink/?linkid=20012</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Microsoft Windows Services for UNIX (SFU)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Microsoft Windows Services for UNIX (SFU) provides a full range of cross-platform services for integrating Windows into existing UNIX-based environments.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Services for UNIX provides file sharing, remote access and administration, password synchronization, common directory management, a common set of utilities, and a shell.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Windows Services for UNIX</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>InteropSystems.com</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>http://www.interopsystems.com/</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A third party site for a company providing software supporting porting UNIX to Win32.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>C++ Boost Web Site</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>http://boost.sourceforge.net/regression-logs/</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>http://boost.sourceforge.net/boost-build2/</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Porting UNIX applications directly to Win32</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Another option is porting UNIX applications directly to Win32.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Using ANSI C/C++ libraries, and commercial C compiler libraries, many of the traditional system calls relied on by UNIX applications are available in Win32 applications.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The output model of <bpt id="p1">**</bpt>stdio<ept id="p1">**</ept>-based applications does not need to be changed, since the Win32 console APIs mimic the <bpt id="p2">**</bpt>stdio<ept id="p2">**</ept> model, and versions of <bpt id="p3">*</bpt>curses<ept id="p3">*</ept> exist that use the Win32 console APIs.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>SetConsoleCursorPosition<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686025)</ept>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Berkeley socket-based applications need very few changes to work as Win32 applications.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The Windows Sockets interface was designed for portability with BSD sockets, with minimal changes that are noted in the introductory sections of the WinSock specification.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Windows supports DCE-compliant RPC, so RPC-based applications are easily usable.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>RPC Functions<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa378623)</ept>.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>One of the largest areas of difference is in the process model.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>UNIX has <bpt id="p1">**</bpt>fork<ept id="p1">**</ept>; Win32 does not.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Depending on the use of <bpt id="p1">**</bpt>fork<ept id="p1">**</ept> and the code base, Win32 has two APIs that can be used: <bpt id="p2">**</bpt>CreateProcess<ept id="p2">**</ept> and <ph id="ph1">`CreateThread`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>A UNIX application that forks multiple copies of itself can be reworked in Win32 to have either multiple processes or a single process with multiple threads.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>If multiple processes are used, there are multiple methods of IPC that can be used to communicate between the processes (and perhaps to update the code and data of the new process to be like the parent, if the functionality that <bpt id="p1">**</bpt>fork<ept id="p1">**</ept> provides is needed).</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>For more on IPC, see <bpt id="p1">[</bpt>Interprocess Communications<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa365574)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Windows and UNIX graphical models are very different.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>UNIX uses the X Window System GUI, while Windows uses GDI.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Though similar in concept, there is no simple mapping of the X API to the GDI API.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>However, OpenGL support is available for migrating UNIX OpenGL-based applications.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>And there are X clients and X servers for Windows.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Device Contexts<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/dd183553)</ept> for information on GDI.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Basic UNIX applications, including many CGI applications, should port easily to Visual C++ running on Windows.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Functions like <bpt id="p1">**</bpt>open<ept id="p1">**</ept>, <ph id="ph1">`fopen`</ph>, <bpt id="p2">**</bpt>read<ept id="p2">**</ept>, <bpt id="p3">**</bpt>write<ept id="p3">**</ept> and others are available in the Visual C++ run-time library.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Also, there is a one-to-one mapping between C UNIX APIs and Win32 APIs: <bpt id="p1">**</bpt>open<ept id="p1">**</ept> to <bpt id="p2">**</bpt>CreateFile<ept id="p2">**</ept>, <bpt id="p3">**</bpt>read<ept id="p3">**</ept> to <bpt id="p4">**</bpt>ReadFile<ept id="p4">**</ept>, <bpt id="p5">**</bpt>write<ept id="p5">**</ept> to <bpt id="p6">**</bpt>WriteFile<ept id="p6">**</ept>, <ph id="ph1">`ioctl`</ph> to <bpt id="p7">**</bpt>DeviceIOControl<ept id="p7">**</ept>, <bpt id="p8">**</bpt>close<ept id="p8">**</ept> to <bpt id="p9">**</bpt>CloseFile<ept id="p9">**</ept>, and so on.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Windows POSIX subsystem</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Another option UNIX programmers look at is the Windows POSIX subsystem.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>However, it only supports POSIX 1003.1, which was the only POSIX version standardized when Windows NT was created.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Since then, there has been little demand for extending this subsystem, because most applications have been converted to Win32.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The 1003.1 system is of limited interest for fully featured applications, because it does not include many capabilities (such as those in 1003.2, network support, and so on).</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Full featured applications run under the Windows POSIX subsystem do not have access to Windows features available to Win32 applications, such as memory-mapped files, networking, and graphics.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Applications such as VI, LS, and GREP are the main targets for the Windows POSIX subsystem.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Porting Programs</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>UNIX</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Inference Rules</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>