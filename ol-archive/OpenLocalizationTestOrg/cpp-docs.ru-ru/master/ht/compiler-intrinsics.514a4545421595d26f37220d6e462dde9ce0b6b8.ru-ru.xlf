<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39d614fa8e587be4c9cd6545a8b0ea23d014cc23</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\intrinsics\compiler-intrinsics.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02a7c9b3c09296c595f96ae872d6b1ff20dfb26d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">62bed8e18f2252c6176df71c135ee0625bcb1af3</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Compiler Intrinsics | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Compiler Intrinsics</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Most functions are contained in libraries, but some functions are built in (that is, intrinsic) to the compiler.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>These are referred to as intrinsic functions or intrinsics.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>If a function is an intrinsic, the code for that function is usually inserted inline, avoiding the overhead of a function call and allowing highly efficient machine instructions to be emitted for that function.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An intrinsic is often faster than the equivalent inline assembly, because the optimizer has a built-in knowledge of how many intrinsics behave, so some optimizations can be available that are not available when inline assembly is used.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Also, the optimizer can expand the intrinsic differently, align buffers differently, or make other adjustments depending on the context and arguments of the call.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The use of intrinsics affects the portability of code, because intrinsics that are available in Visual C++ might not be available if the code is compiled with other compilers and some intrinsics that might be available for some target architectures are not available for all architectures.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>However, intrinsics are usually more portable than inline assembly.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The intrinsics are required on 64-bit architectures where inline assembly is not supported.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Some intrinsics, such as <ph id="ph1">`__assume`</ph> and <ph id="ph2">`__ReadWriteBarrier`</ph>, provide information to the compiler, which affects the behavior of the optimizer.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Some intrinsics are available only as intrinsics, and some are available both in function and intrinsic implementations.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>You can instruct the compiler to use the intrinsic implementation in one of two ways, depending on whether you want to enable only specific functions or you want to enable all intrinsics.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The first way is to use <ph id="ph1">`#pragma intrinsic(``intrinsic-function-name-list``)`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The pragma can be used to specify a single intrinsic or multiple intrinsics separated by commas.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The second is to use the <bpt id="p1">[</bpt>/Oi (Generate Intrinsic Functions)<ept id="p1">](../build/reference/oi-generate-intrinsic-functions.md)</ept> compiler option, which makes all intrinsics on a given platform available.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Under <bpt id="p1">**</bpt>/Oi<ept id="p1">**</ept>, use <ph id="ph1">`#pragma function(``intrinsic-function-name-list``)`</ph> to force a function call to be used instead of an intrinsic.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If the documentation for a specific intrinsic notes that the routine is only available as an intrinsic, then the intrinsic implementation is used regardless of whether <bpt id="p1">**</bpt>/Oi<ept id="p1">**</ept> or <ph id="ph1">`#pragma intrinsic`</ph> is specified.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In all cases, <bpt id="p1">**</bpt>/Oi<ept id="p1">**</ept> or <ph id="ph1">`#pragma intrinsic`</ph> allows, but does not force, the optimizer to use the intrinsic.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The optimizer can still call the function.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Some standard C/C++ library functions are available in intrinsic implementations on some architectures.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When calling a CRT function, the intrinsic implementation is used if <bpt id="p1">**</bpt>/Oi<ept id="p1">**</ept> is specified on the command line.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A header file, <ph id="ph1">\&lt;</ph>intrin.h&gt;, is available that declares prototypes for the common intrinsic functions.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Manufacturer-specific intrinsics are available in the <ph id="ph1">\&lt;</ph>immintrin.h&gt; and <ph id="ph2">\&lt;</ph>ammintrin.h&gt; header files.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Additionally, certain Windows headers declare functions that map onto a compiler intrinsic.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The following sections list all intrinsics that are available on various architectures.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>For more information on how the intrinsics work on your particular target processor, refer to the manufacturer's reference documentation.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>ARM Intrinsics</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>x86 Intrinsics List</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>x64 (amd64) Intrinsics List</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Intrinsics Available on All Architectures</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Alphabetical Listing of Intrinsic Functions</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>ARM Assembler Reference</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Microsoft Macro Assembler Reference</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Keywords</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>C Run-Time Library Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>