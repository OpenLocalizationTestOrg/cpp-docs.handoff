<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa1b2337c96f3f7acdc178c2ac7f9278e9471925</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\mfc-activex-controls-adding-custom-events.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">30f302ad86029570654233475964fe72f423dfcb</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">78b18c9e563f635cd6baae01a66da68ef17447a7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Adding Custom Events | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Adding Custom Events</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Custom events differ from stock events in that they are not automatically fired by class <ph id="ph1">`COleControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A custom event recognizes a certain action, determined by the control developer, as an event.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The event map entries for custom events are represented by the <ph id="ph1">`EVENT_CUSTOM`</ph> macro.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The following section implements a custom event for an ActiveX control project that was created using the ActiveX Control Wizard.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Adding a Custom Event with the Add Event Wizard</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The following procedure adds a specific custom event, ClickIn.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You can use this procedure to add other custom events.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Substitute your custom event name and its parameters for the ClickIn event name and parameters.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>To add the ClickIn custom event using the Add Event Wizard</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Load your control's project.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>In Class View, right-click your ActiveX control class to open the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>From the shortcut menu, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and then click <bpt id="p2">**</bpt>Add Event<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This opens the Add Event Wizard.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Event name<ept id="p1">**</ept> box, first select any existing event, then click on the <bpt id="p2">**</bpt>Custom<ept id="p2">**</ept> radio button, then type <ph id="ph1">`ClickIn`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Internal name<ept id="p1">**</ept> box, type the name of the event's firing function.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>For this example, use the default value provided by the Add Event Wizard (<ph id="ph1">`FireClickIn`</ph>).</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Add a parameter, called <ph id="ph1">`xCoord`</ph> (type <ph id="ph2">`OLE_XPOS_PIXELS`</ph>), using the <bpt id="p1">**</bpt>Parameter Name<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Parameter Type<ept id="p2">**</ept> controls.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Add a second parameter, called <ph id="ph1">`yCoord`</ph> (type <ph id="ph2">`OLE_YPOS_PIXELS`</ph>).</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept> to create the event.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Add Event Wizard Changes for Custom Events</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>When you add a custom event, the Add Event Wizard makes changes to the control class .H, .CPP, and .IDL files.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following code samples are specific to the ClickIn event.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The following lines are added to the header (.H) file of your control class:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#7</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>This code declares an inline function called <ph id="ph1">`FireClickIn`</ph> that calls <bpt id="p1">[</bpt>COleControl::FireEvent<ept id="p1">](../mfc/reference/colecontrol-class.md#colecontrol__fireevent)</ept> with the ClickIn event and parameters you defined using the Add Event Wizard.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>In addition, the following line is added to the event map for the control, located in the implementation (.CPP) file of your control class:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#8</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This code maps the event ClickIn to the inline function <ph id="ph1">`FireClickIn`</ph>, passing the parameters you defined using the Add Event Wizard.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Finally, the following line is added to your control's .IDL file:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#9</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>This line assigns the ClickIn event a specific ID number, taken from the event's position in the Add Event Wizard event list.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The entry in the event list allows a container to anticipate the event.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>For example, it might provide handler code to be executed when the event is fired.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Calling FireClickIn</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Now that you have added the ClickIn custom event using the Add Event Wizard, you must decide when this event is to be fired.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You do this by calling <ph id="ph1">`FireClickIn`</ph> when the appropriate action occurs.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For this discussion, the control uses the <ph id="ph1">`InCircle`</ph> function inside a <ph id="ph2">`WM_LBUTTONDOWN`</ph> message handler to fire the ClickIn event when a user clicks inside a circular or elliptical region.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The following procedure adds the <ph id="ph1">`WM_LBUTTONDOWN`</ph> handler.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>To add a message handler with the Add Event Wizard</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Load your control's project.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>In Class View, select your ActiveX control class.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>In the Properties window, click the <bpt id="p1">**</bpt>Messages<ept id="p1">**</ept> button.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The Properties window displays a list of messages that can be handled by the ActiveX control.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Any message shown in bold already has a handler function assigned to it.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>From the Properties window, select the message you want to handle.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>For this example, select <ph id="ph1">`WM_LBUTTONDOWN`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>From the drop-down list box on the right, select <bpt id="p1">**</bpt><ph id="ph1">\&lt;</ph>Add&gt; OnLButtonDown<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Double-click the new handler function in Class View to jump to the message handler code in the implementation (.CPP) file of your ActiveX control.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The following code sample calls the <bpt id="p1">**</bpt>InCircle<ept id="p1">**</ept> function every time the left mouse button is clicked within the control window.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>This sample can be found in the <ph id="ph1">`WM_LBUTTONDOWN`</ph> handler function, <ph id="ph2">`OnLButtonDown`</ph>, in the <bpt id="p1">[</bpt>Circ sample<ept id="p1">](../visual-cpp-samples.md)</ept> abstract.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#10</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>When the Add Event Wizard creates message handlers for mouse button actions, a call to the same message handler of the base class is automatically added.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Do not remove this call.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If your control uses any of the stock mouse messages, the message handlers in the base class must be called to ensure that mouse capture is handled properly.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>In the following example, the event fires only when the click occurs inside a circular or elliptical region within the control.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>To achieve this behavior, you can place the <ph id="ph1">`InCircle`</ph> function in your control's implementation (.CPP) file:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#11</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>You will also need to add the following declaration of the <ph id="ph1">`InCircle`</ph> function to your control's header (.H) file:</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>NVC_MFC_AxUI#12</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Custom Events with Stock Names</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>You can create custom events with the same name as stock events, however you can not implement both in the same control.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>For example, you might want to create a custom event called Click that does not fire when the stock event Click would normally fire.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>You could then fire the Click event at any time by calling its firing function.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The following procedure adds a custom Click event.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>To add a custom event that uses a stock event name</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Load your control's project.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>In Class View, right-click your ActiveX control class to open the shortcut menu.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>From the shortcut menu, click <bpt id="p1">**</bpt>Add<ept id="p1">**</ept> and then click <bpt id="p2">**</bpt>Add Event<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>This opens the Add Event Wizard.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>In the <bpt id="p1">**</bpt>Event Name<ept id="p1">**</ept> drop-down list, select a stock event name.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>For this example, select <bpt id="p1">**</bpt>Click<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>For <bpt id="p1">**</bpt>Event Type<ept id="p1">**</ept>, select <bpt id="p2">**</bpt>Custom<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Click <bpt id="p1">**</bpt>Finish<ept id="p1">**</ept> to create the event.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Call <ph id="ph1">`FireClick`</ph> at appropriate places in your code.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls: Methods</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>COleControl Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>