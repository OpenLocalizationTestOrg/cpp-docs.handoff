<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a0489a4630ce169c3fbfbc7ee70ba39d234131b8</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\reference\ccomcriticalsection-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">eddfc72332d9e3e8fe9ae45c14c58a4b12d12b96</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d006fc9614625e0dae5fd7323b8dc999b3d8a083</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>CComCriticalSection Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>CComCriticalSection Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This class provides methods for obtaining and releasing ownership of a critical section object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>CComCriticalSection::CComCriticalSection</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>CComCriticalSection::Init</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creates and initializes a critical section object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>CComCriticalSection::Lock</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Obtains ownership of the critical section object.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>CComCriticalSection::Term</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Releases system resources used by the critical section object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>CComCriticalSection::Unlock</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Releases ownership of the critical section object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Public Data Members</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>CComCriticalSection::m_sec</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">**</bpt>CRITICAL_SECTION<ept id="p1">**</ept> object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>is similar to class <bpt id="p1">[</bpt>CComAutoCriticalSection<ept id="p1">](../../atl/reference/ccomautocriticalsection-class.md)</ept>, except that you must explicitly initialize and release the critical section.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Typically, you use <ph id="ph1">`CComCriticalSection`</ph> through the <ph id="ph2">`typedef`</ph> name <bpt id="p1">[</bpt>CriticalSection<ept id="p1">](ccommultithreadmodel-class.md#ccommultithreadmodel__criticalsection)</ept>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>This name references <ph id="ph1">`CComCriticalSection`</ph> when <bpt id="p1">[</bpt>CComMultiThreadModel<ept id="p1">](../../atl/reference/ccommultithreadmodel-class.md)</ept> is being used.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>CComCritSecLock Class<ept id="p1">](../../atl/reference/ccomcritseclock-class.md)</ept> for a safer way to use this class than calling <ph id="ph1">`Lock`</ph> and <ph id="ph2">`Unlock`</ph> directly.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> atlcore.h</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>CComCriticalSection::CComCriticalSection</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The constructor.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Sets the <bpt id="p1">[</bpt>m_sec<ept id="p1">](#ccomcriticalsection__m_sec)</ept> data member to NULL <bpt id="p2">**</bpt>.<ept id="p2">**</ept></source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>CComCriticalSection::Init</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Calls the Win32 function <bpt id="p1">[</bpt>InitializeCriticalSection<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms683472)</ept>, which initializes the critical section object contained in the <bpt id="p2">[</bpt>m_sec<ept id="p2">](#ccomcriticalsection__m_sec)</ept> data member.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph> on success, <bpt id="p1">**</bpt>E_OUTOFMEMORY<ept id="p1">**</ept> or <bpt id="p2">**</bpt>E_FAIL<ept id="p2">**</ept> on failure.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>CComCriticalSection::Lock</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Calls the Win32 function <bpt id="p1">[</bpt>EnterCriticalSection<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682608)</ept>, which waits until the thread can take ownership of the critical section object contained in the <bpt id="p2">[</bpt>m_sec<ept id="p2">](#ccomcriticalsection__m_sec)</ept> data member.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph> on success, <bpt id="p1">**</bpt>E_OUTOFMEMORY<ept id="p1">**</ept> or <bpt id="p2">**</bpt>E_FAIL<ept id="p2">**</ept> on failure.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>The critical section object must first be initialized with a call to the <bpt id="p1">[</bpt>Init<ept id="p1">](#ccomcriticalsection__init)</ept> method.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>When the protected code has finished executing, the thread must call <bpt id="p1">[</bpt>Unlock<ept id="p1">](#ccomcriticalsection__unlock)</ept> to release ownership of the critical section.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>CComCriticalSection::m_sec</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Contains a critical section object that is used by all <ph id="ph1">`CComCriticalSection`</ph> methods.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>CComCriticalSection::Term</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Calls the Win32 function <bpt id="p1">[</bpt>DeleteCriticalSection<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682552)</ept>, which releases all resources used by the critical section object contained in the <bpt id="p2">[</bpt>m_sec<ept id="p2">](#ccomcriticalsection__m_sec)</ept> data member.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Once <ph id="ph1">`Term`</ph> has been called, the critical section can no longer be used for synchronization.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>CComCriticalSection::Unlock</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Calls the Win32 function <bpt id="p1">[</bpt>LeaveCriticalSection<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms684169)</ept>, which releases ownership of the critical section object contained in the <bpt id="p2">[</bpt>m_sec<ept id="p2">](#ccomcriticalsection__m_sec)</ept> data member.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`S_OK`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>To first obtain ownership, the thread must call the <bpt id="p1">[</bpt>Lock<ept id="p1">](#ccomcriticalsection__lock)</ept> method.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Each call to <ph id="ph1">`Lock`</ph> requires a corresponding call to <ph id="ph2">`Unlock`</ph> to release ownership of the critical section.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>CComFakeCriticalSection Class</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Class Overview</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>CComCritSecLock Class</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>