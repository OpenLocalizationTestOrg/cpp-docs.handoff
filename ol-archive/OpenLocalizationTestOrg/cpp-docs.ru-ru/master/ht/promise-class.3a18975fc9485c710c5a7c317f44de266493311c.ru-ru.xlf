<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ad79ecc3497182a451ef85ea53c8ec5603fdca69</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\promise-class.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9a8ec2725a6da555a9718dff0d3648ccb61c9479</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a218a35290287f7d0cbe7124d1cfed4d556d5c0a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>promise Class | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>promise Class</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Describes an <bpt id="p1">*</bpt>asynchronous provider<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Members</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Public Constructors</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>promise::promise Constructor</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`promise`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Public Methods</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>promise::get_future</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">[</bpt>future<ept id="p1">](../standard-library/future-class.md)</ept> associated with this promise.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>promise::set_exception</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Atomically sets the result of this promise to indicate an exception.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>promise::set_exception_at_thread_exit</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Atomically sets the result of this promise to indicate an exception, and delivers the notification only after all thread-local objects in the current thread have been destroyed (usually at thread exit).</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>promise::set_value</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Atomically sets the result of this promise to indicate a value.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>promise::set_value_at_thread_exit</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Atomically sets the result of this promise to indicate a value, and delivers the notification only after all thread-local objects in the current thread have been destroyed (usually at thread exit).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>promise::swap</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Exchanges the <bpt id="p1">*</bpt>associated asynchronous state<ept id="p1">*</ept> of this promise with that of a specified promise object.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Public Operators</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Name</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>promise::operator=</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Assignment of the shared state of this promise object.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Inheritance Hierarchy</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> future</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Namespace:<ept id="p1">**</ept> std</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>promise::get_future</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Returns a <bpt id="p1">[</bpt>future<ept id="p1">](../standard-library/future-class.md)</ept> object that has the same <bpt id="p2">*</bpt>associated asynchronous state<ept id="p2">*</ept> as this promise.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>If the promise object is empty, this method throws a <bpt id="p1">[</bpt>future_error<ept id="p1">](../standard-library/future-error-class.md)</ept> that has an <bpt id="p2">[</bpt>error_code<ept id="p2">](../standard-library/error-code-class.md)</ept> of <ph id="ph1">`no_state`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>If this method has already been called for a promise object that has the same associated asynchronous state, the method throws a <ph id="ph1">`future_error`</ph> that has an <ph id="ph2">`error_code`</ph> of <ph id="ph3">`future_already_retrieved`</ph>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>promise::operator=</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Transfers the <bpt id="p1">*</bpt>associated asynchronous state<ept id="p1">*</ept> from a specified <ph id="ph1">`promise`</ph> object.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`promise`</ph> object.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This operator transfers the associated asynchronous state from <ph id="ph1">`Other`</ph>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>After the transfer, <ph id="ph1">`Other`</ph> is <bpt id="p1">*</bpt>empty<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>promise::promise Constructor</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Constructs a <ph id="ph1">`promise`</ph> object.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A memory allocator.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt><ph id="ph1">\&lt;</ph>allocators&gt;<ept id="p1">](../standard-library/allocators-header.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`promise`</ph> object.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The first constructor constructs an <bpt id="p1">*</bpt>empty<ept id="p1">*</ept><ph id="ph1">`promise`</ph> object.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The second constructor constructs an empty <ph id="ph1">`promise`</ph> object and uses <ph id="ph2">`Al`</ph> for memory allocation.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The third constructor constructs a <ph id="ph1">`promise`</ph> object and transfers the associated asynchronous state from <ph id="ph2">`Other`</ph>, and leaves <ph id="ph3">`Other`</ph> empty.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>promise::set_exception</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Atomically stores an exception as the result of this <ph id="ph1">`promise`</ph> object and sets the <bpt id="p1">*</bpt>associated asynchronous state<ept id="p1">*</ept> to <bpt id="p2">*</bpt>ready<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>exception_ptr<ept id="p1">](../standard-library/exception-typedefs.md#exception_ptr)</ept> that's stored by this method as the exception result.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`promise`</ph> object has no associated asynchronous state, this method throws a <bpt id="p1">[</bpt>future_error<ept id="p1">](../standard-library/future-error-class.md)</ept> that has an error code of <ph id="ph2">`no_state`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`set_exception`</ph>, <bpt id="p1">[</bpt>set_exception_at_thread_exit<ept id="p1">](#promise__set_exception_at_thread_exit_method)</ept>, <bpt id="p2">[</bpt>set_value<ept id="p2">](#promise__set_value_method)</ept>, or <bpt id="p3">[</bpt>set_value_at_thread_exit<ept id="p3">](#promise__set_value_at_thread_exit_method)</ept> has already been called for a <ph id="ph2">`promise`</ph> object that has the same associated asynchronous state, this method throws a <ph id="ph3">`future_error`</ph> that has an error code of <ph id="ph4">`promise_already_satisfied`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>As a result of this method, any threads that are blocked on the associated asynchronous state become unblocked.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>promise::set_exception_at_thread_exit</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Atomically sets the result of this <ph id="ph1">`promise`</ph> to indicate an exception, delivering the notification only after all thread-local objects in the current thread have been destroyed (usually at thread exit).</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>An <bpt id="p1">[</bpt>exception_ptr<ept id="p1">](../standard-library/exception-typedefs.md#exception_ptr)</ept> that's stored by this method as the exception result.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>If the promise object has no <bpt id="p1">*</bpt>associated asynchronous state<ept id="p1">*</ept>, this method throws a <bpt id="p2">[</bpt>future_error<ept id="p2">](../standard-library/future-error-class.md)</ept> that has an error code of <ph id="ph1">`no_state`</ph>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>set_exception<ept id="p1">](#promise__set_exception_method)</ept>, <ph id="ph1">`set_exception_at_thread_exit`</ph>, <bpt id="p2">[</bpt>set_value<ept id="p2">](#promise__set_value_method)</ept>, or <bpt id="p3">[</bpt>set_value_at_thread_exit<ept id="p3">](#promise__set_value_at_thread_exit_method)</ept> has already been called for a <ph id="ph2">`promise`</ph> object that has the same associated asynchronous state, this method throws a <ph id="ph3">`future_error`</ph> that has an error code of <ph id="ph4">`promise_already_satisfied`</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>In contrast to <bpt id="p1">[</bpt>set_exception<ept id="p1">](#promise__set_exception_method)</ept>, this method does not set the associated asynchronous state to ready until after all thread-local objects in the current thread have been destroyed.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Typically, threads that are blocked on the associated asynchronous state are not unblocked until the current thread exits.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>promise::set_value</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Atomically stores a value as the result of this <ph id="ph1">`promise`</ph> object and sets the <bpt id="p1">*</bpt>associated asynchronous state<ept id="p1">*</ept> to <bpt id="p2">*</bpt>ready<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>The value to be stored as the result.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`promise`</ph> object has no associated asynchronous state, this method throws a <bpt id="p1">[</bpt>future_error<ept id="p1">](../standard-library/future-error-class.md)</ept> that has an error code of <ph id="ph2">`no_state`</ph>.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>set_exception<ept id="p1">](#promise__set_exception_method)</ept>, <bpt id="p2">[</bpt>set_exception_at_thread_exit<ept id="p2">](#promise__set_exception_at_thread_exit_method)</ept>, <ph id="ph1">`set_value`</ph>, or <bpt id="p3">[</bpt>set_value_at_thread_exit<ept id="p3">](#promise__set_value_at_thread_exit_method)</ept> has already been called for a <ph id="ph2">`promise`</ph> object that has the same associated asynchronous state, this method throws a <ph id="ph3">`future_error`</ph> that has an error code of <ph id="ph4">`promise_already_satisfied`</ph>.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>As a result of this method, any threads that are blocked on the associated asynchronous state become unblocked.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The first method also throws any exception that is thrown when <ph id="ph1">`Val`</ph> is copied into the associated asynchronous state.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>In this situation, the associated asynchronous state is not set to ready.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The second method also throws any exception that is thrown when <ph id="ph1">`Val`</ph> is moved into the associated asynchronous state.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>In this situation, the associated asynchronous state is not set to ready.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>For the partial specialization <ph id="ph1">`promise&lt;Ty&amp;&gt;`</ph>, the stored value is in effect a reference to <ph id="ph2">`Val`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>For the specialization <ph id="ph1">`promise&lt;void&gt;`</ph>, no stored value exists.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>promise::set_value_at_thread_exit</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Atomically stores a value as the result of this <ph id="ph1">`promise`</ph> object.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>The value to be stored as the result.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>If the promise object has no <bpt id="p1">*</bpt>associated asynchronous state<ept id="p1">*</ept>, this method throws a <bpt id="p2">[</bpt>future_error<ept id="p2">](../standard-library/future-error-class.md)</ept> that has an error code of <ph id="ph1">`no_state`</ph>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>If <bpt id="p1">[</bpt>set_exception<ept id="p1">](#promise__set_exception_method)</ept>, <bpt id="p2">[</bpt>set_exception_at_thread_exit<ept id="p2">](#promise__set_exception_at_thread_exit_method)</ept>, <bpt id="p3">[</bpt>set_value<ept id="p3">](#promise__set_value_method)</ept>, or <ph id="ph1">`set_value_at_thread_exit`</ph> has already been called for a <ph id="ph2">`promise`</ph> object that has the same associated asynchronous state, this method throws a <ph id="ph3">`future_error`</ph> that has an error code of <ph id="ph4">`promise_already_satisfied`</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>In contrast to <ph id="ph1">`set_value`</ph>, the associated asynchronous state is not set to ready until after all thread-local objects in the current thread have been destroyed.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Typically, threads that are blocked on the associated asynchronous state are not unblocked until the current thread exits.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The first method also throws any exception that is thrown when <ph id="ph1">`Val`</ph> is copied into the associated asynchronous state.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The second method also throws any exception that is thrown when <ph id="ph1">`Val`</ph> is moved into the associated asynchronous state.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>For the partial specialization <ph id="ph1">`promise&lt;Ty&amp;&gt;`</ph>, the stored value is effectively a reference to <ph id="ph2">`Val`</ph>.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>For the specialization <ph id="ph1">`promise&lt;void&gt;`</ph>, no stored value exists.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>promise::swap</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Exchanges the <bpt id="p1">*</bpt>associated asynchronous state<ept id="p1">*</ept> of this promise object with that of a specified object.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`promise`</ph> object.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Header Files Reference</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>