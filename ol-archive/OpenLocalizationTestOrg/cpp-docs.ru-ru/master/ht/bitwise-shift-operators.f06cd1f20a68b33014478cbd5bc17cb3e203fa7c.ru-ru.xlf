<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1778a62436446a9693be6fe565d07e49f1ea4f28</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-language\bitwise-shift-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1ba724a4c96d91eb1f8605836e595bc7f63d90ec</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d519b14b2a3b78dd3dbf1611c92ad8e716598314</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Bitwise Shift Operators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Bitwise Shift Operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The shift operators shift their first operand left (<ph id="ph1">`&lt;&lt;`</ph>) or right (<ph id="ph2">`&gt;&gt;`</ph>) by the number of positions the second operand specifies.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>shift-expression<ept id="p1">*</ept>:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>additive-expression</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>shift-expression<ept id="p1">*</ept>  <ph id="ph1">`&lt;&lt;`</ph>  <bpt id="p2">*</bpt>additive-expression shift-expression<ept id="p2">*</ept>  <ph id="ph2">`&gt;&gt;`</ph>  <bpt id="p3">*</bpt>additive-expression<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Both operands must be integral values.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>These operators perform the usual arithmetic conversions; the type of the result is the type of the left operand after conversion.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For leftward shifts, the vacated right bits are set to 0.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For rightward shifts, the vacated left bits are filled based on the type of the first operand after conversion.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If the type is <ph id="ph1">`unsigned`</ph>, they are set to 0.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Otherwise, they are filled with copies of the sign bit.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For left-shift operators without overflow, the statement</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>is equivalent to multiplication by 2<ph id="ph1">&lt;sup&gt;</ph>expr2<ph id="ph2">&lt;/sup&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>For right-shift operators,</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>is equivalent to division by 2<ph id="ph1">&lt;sup&gt;</ph>expr2<ph id="ph2">&lt;/sup&gt;</ph> if <ph id="ph3">`expr1`</ph> is unsigned or has a nonnegative value.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The result of a shift operation is undefined if the second operand is negative, or if the right operand is greater than or equal to the width in bits of the promoted left operand.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Since the conversions performed by the shift operators do not provide for overflow or underflow conditions, information may be lost if the result of a shift operation cannot be represented in the type of the first operand after conversion.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`x`</ph> is shifted left eight positions and <ph id="ph2">`y`</ph> is shifted right eight positions.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The shifted values are added, giving 0xAA55, and assigned to <ph id="ph1">`z`</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Shifting a negative value to the right yields half the original value, rounded down.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For example, –253 (binary 11111111 00000011) shifted right one bit produces –127 (binary 11111111 10000001).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A positive 253 shifts right to produce +126.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Right shifts preserve the sign bit.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When a signed integer shifts right, the most-significant bit remains set.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>When an unsigned integer shifts right, the most-significant bit is cleared.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Left Shift and Right Shift Operators (&gt;&gt; and &lt;&lt;)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>