<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">48dff9ad91b6c6f954bf9b37b0e3ba2aa4806af4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\static-assert.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ceb66cf0942b23eada074b23600bb5ba14fc956b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c1cda74e0dc9c2ea1b8d315655c5654d18f2446</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>static_assert | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>static_assert</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Tests a software assertion at compile time.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>If the specified constant expression is <ph id="ph1">`false`</ph>, the compiler displays the specified message and the compilation fails with error C2338; otherwise, the declaration has no effect.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Parameter</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>An integral constant expression that can be converted to a Boolean.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If the evaluated expression is zero (false), the <ph id="ph1">`string-literal`</ph> parameter is displayed and the compilation fails with an error.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>If the expression is nonzero (true), the <ph id="ph1">`static_assert`</ph> declaration has no effect.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An message that is displayed if the <ph id="ph1">`constant-expression`</ph> parameter is zero.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The message is a string of characters in the <bpt id="p1">[</bpt>base character set<ept id="p1">](../c-language/ascii-character-set.md)</ept> of the compiler; that is, not <bpt id="p2">[</bpt>multibyte or wide characters<ept id="p2">](../c-language/multibyte-and-wide-characters.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`constant-expression`</ph> parameter of a <ph id="ph2">`static_assert`</ph> declaration represents a <bpt id="p1">*</bpt>software assertion<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>A software assertion specifies a condition that you expect to be true at a particular point in your program.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>If the condition is true, the <ph id="ph1">`static_assert`</ph> declaration has no effect.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the condition is false, the assertion fails, the compiler displays the message in <ph id="ph1">`string-literal`</ph> parameter, and the compilation fails with an error.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`static_assert`</ph> declaration tests a software assertion at compile time.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>In contrast, the <bpt id="p1">[</bpt>assert Macro, _assert, _wassert<ept id="p1">](../c-runtime-library/reference/assert-macro-assert-wassert.md)</ept> macro tests a software assertion at run time and incurs a run time cost in space or time.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`static_assert`</ph> declaration is especially useful for debugging templates because template arguments can be included in the <ph id="ph2">`constant-expression`</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The compiler examines the <ph id="ph1">`static_assert`</ph> declaration for syntax errors when the declaration is encountered.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The compiler evaluates the <ph id="ph1">`constant-expression`</ph> parameter immediately if it does not depend on a template parameter.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Otherwise, the compiler evaluates the <ph id="ph1">`constant-expression`</ph> parameter when the template is instantiated.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Consequently, the compiler might issue a diagnostic message once when the declaration is encountered, and again when the template is instantiated.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>You can use the <ph id="ph1">`static_assert`</ph> keyword at namespace, class, or block scope.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>(The <ph id="ph1">`static_assert`</ph> keyword is technically a declaration, even though it does not introduce new name into your program, because it can be used at namespace scope.)</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`static_assert`</ph> declaration has namespace scope.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Because the compiler knows the size of type <ph id="ph1">`void *`</ph>, the expression is evaluated immediately.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`static_assert`</ph> declaration has class scope.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`static_assert`</ph> verifies that a template parameter is a <bpt id="p1">*</bpt>plain old data<ept id="p1">*</ept> (POD) type.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The compiler examines the <ph id="ph1">`static_assert`</ph> declaration when it is declared, but does not evaluate the <ph id="ph2">`constant-expression`</ph> parameter until the <ph id="ph3">`basic_string`</ph> class template is instantiated in <ph id="ph4">`main()`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>In the following example, the <ph id="ph1">`static_assert`</ph> declaration has block scope.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`static_assert`</ph> verifies that the size of the VMPage structure is equal to the virtual memory pagesize of the system.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Assertion and User-Supplied Messages (C++)</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>error Directive (C/C++)</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>assert Macro, _assert, _wassert</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Templates</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>ASCII Character Set</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Declarations and Definitions</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>