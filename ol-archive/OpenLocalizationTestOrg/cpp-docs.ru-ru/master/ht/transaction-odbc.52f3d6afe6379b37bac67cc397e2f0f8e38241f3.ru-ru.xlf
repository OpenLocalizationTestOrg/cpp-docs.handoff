<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">79ae919f3c893e05d35a7ed4da68a97e69c13cee</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\data\odbc\transaction-odbc.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">862c5a9caa77f0b64e05c3bc4b1edbdb7c9f2818</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e613f896a139f7e2c34eb7f7fcadc16be9a1958a</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Transaction (ODBC) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Transaction (ODBC)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>This topic applies to the MFC ODBC classes.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A transaction is a way to group, or batch, a series of updates to a <bpt id="p1">[</bpt>data source<ept id="p1">](../../data/odbc/data-source-odbc.md)</ept> so that all are committed at once or none are committed if you roll back the transaction.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If you do not use a transaction, changes to the data source are committed automatically rather than being committed on demand.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Not all ODBC database drivers support transactions.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Call the <ph id="ph1">`CanTransact`</ph> member function of your <bpt id="p1">[</bpt>CDatabase<ept id="p1">](../../mfc/reference/cdatabase-class.md)</ept> or <bpt id="p2">[</bpt>CRecordset<ept id="p2">](../../mfc/reference/crecordset-class.md)</ept> object to determine whether your driver supports transactions for a given database.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Note that <ph id="ph1">`CanTransact`</ph> does not tell you whether the data source provides full transaction support.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>You must also call <ph id="ph1">`CDatabase::GetCursorCommitBehavior`</ph> and <ph id="ph2">`CDatabase::GetCursorRollbackBehavior`</ph> after <bpt id="p1">**</bpt>CommitTrans<ept id="p1">**</ept> and <bpt id="p2">**</bpt>Rollback<ept id="p2">**</ept> to check the effect of the transaction on the open <ph id="ph3">`CRecordset`</ph> object.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Calls to the <ph id="ph1">`AddNew`</ph> and <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept> member functions of a <ph id="ph2">`CRecordset`</ph> object affect the data source immediately when you call <bpt id="p2">**</bpt>Update<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Delete<ept id="p1">**</ept> calls also take effect immediately.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In contrast, you can use a transaction consisting of multiple calls to <ph id="ph1">`AddNew`</ph>, <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Update<ept id="p2">**</ept>, and <bpt id="p3">**</bpt>Delete<ept id="p3">**</ept>, which are performed but not committed until you call <bpt id="p4">**</bpt>CommitTrans<ept id="p4">**</ept> explicitly.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By establishing a transaction, you can execute a series of such calls while retaining the ability to roll them back.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If a critical resource is unavailable or some other condition prevents the entire transaction from being completed, you can roll back the transaction instead of committing it.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>In that case, none of the changes belonging to the transaction affect the data source.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Currently, class <ph id="ph1">`CRecordset`</ph> does not support updates to the data source if you have implemented bulk row fetching.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>This means you cannot make calls to <ph id="ph1">`AddNew`</ph>, <bpt id="p1">**</bpt>Edit<ept id="p1">**</ept>, <bpt id="p2">**</bpt>Delete<ept id="p2">**</ept>, or <bpt id="p3">**</bpt>Update<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>However, you can write you own functions to perform updates and then call those functions within a given transaction.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For more information about bulk row fetching, see <bpt id="p1">[</bpt>Recordset: Fetching Records in Bulk (ODBC)<ept id="p1">](../../data/odbc/recordset-fetching-records-in-bulk-odbc.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Besides affecting your recordset, transactions affect SQL statements that you execute directly as long as you use the ODBC <bpt id="p1">**</bpt>HDBC<ept id="p1">**</ept> associated with your <ph id="ph1">`CDatabase`</ph> object or an ODBC <bpt id="p2">**</bpt>HSTMT<ept id="p2">**</ept> based on that <bpt id="p3">**</bpt>HDBC<ept id="p3">**</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Transactions are particularly useful when you have multiple records that must be updated simultaneously.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this case, you want to avoid a half-completed transaction, such as might happen if an exception was thrown before the last update was made.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Grouping such updates into a transaction allows a recovery (rollback) from the changes and returns the records to the pretransaction state.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For example, if a bank transfers money from account A to account B, both the withdrawal from A and the deposit to B must succeed to process the funds correctly or the whole transaction must fail.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>In the database classes, you perform transactions through <ph id="ph1">`CDatabase`</ph> objects.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`CDatabase`</ph> object represents a connection to a data source, and one or more recordsets associated with that <ph id="ph2">`CDatabase`</ph> object operate on tables of the database through recordset member functions.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Only one level of transactions is supported.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>You cannot nest transactions nor can a transaction span multiple database objects.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The following topics provide more information about how transactions are performed:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Transaction: Performing a Transaction in a Recordset (ODBC)</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Transaction: How Transactions Affect Updates (ODBC)</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Open Database Connectivity (ODBC)</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>