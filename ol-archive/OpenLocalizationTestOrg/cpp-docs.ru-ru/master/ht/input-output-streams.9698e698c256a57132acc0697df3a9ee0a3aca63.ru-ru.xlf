<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4fdfb4ece713c071a4b740127428c16303c0ab10</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\input-output-streams.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f7477ddefb985195d8b0de672dbdaa60cd89d438</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9f5c77712c1c85f11b85b731a8e24d77cad15764</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Input-Output Streams | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Input/Output Streams</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>, which is defined in the header file <ph id="ph1">\&lt;</ph>istream&gt;, is the class template for objects that handle both input and output character-based I/O streams.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>There are two typedefs that define character-specific specializations of <ph id="ph1">`basic_iostream`</ph> and can help make code easier to read: <ph id="ph2">`iostream`</ph> (not to be confused with the header file <ph id="ph3">\&lt;</ph>iostream&gt;) is an I/O stream that is based on <ph id="ph4">`basic_iostream&lt;char&gt;`</ph>; <ph id="ph5">`wiostream`</ph> is an I/O stream that is based on <ph id="ph6">`basic_iostream&lt;wchar_t&gt;`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>basic_iostream Class<ept id="p1">](../standard-library/basic-iostream-class.md)</ept>, <bpt id="p2">[</bpt>iostream<ept id="p2">](../standard-library/basic-iostream-class.md)</ept>, and <bpt id="p3">[</bpt>wiostream<ept id="p3">](../standard-library/basic-iostream-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Deriving from <ph id="ph1">`basic_iostream`</ph> is the class template <ph id="ph2">`basic_fstream`</ph>, which is used to stream character data to and from files.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>There also are typedefs that provide character-specific specializations of <ph id="ph1">`basic_fstream`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>They are <ph id="ph1">`fstream`</ph>, which is a file I/O stream that is based on <ph id="ph2">`char`</ph>, and <ph id="ph3">`wfstream`</ph>, which is a file I/O stream that is based on <ph id="ph4">`wchar_t`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>basic_fstream Class<ept id="p1">](../standard-library/basic-fstream-class.md)</ept>, <bpt id="p2">[</bpt>fstream<ept id="p2">](../standard-library/basic-fstream-class.md)</ept>, and <bpt id="p3">[</bpt>wfstream<ept id="p3">](../standard-library/basic-fstream-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Using these typedefs requires the inclusion of the header file <ph id="ph1">\&lt;</ph>fstream&gt;.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When a <ph id="ph1">`basic_fstream`</ph> object is used to perform file I/O, although the underlying buffer contains separately designated positions for reading and writing, the current input and current output positions are tied together, and therefore, reading some data moves the output position.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The class template <ph id="ph1">`basic_stringstream`</ph> and its common specialization, <ph id="ph2">`stringstream`</ph>, are often used to work with I/O stream objects to insert and extract character data.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>basic_stringstream Class<ept id="p1">](../standard-library/basic-stringstream-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>stringstream</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>basic_stringstream Class</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>sstream&gt;</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>iostream Programming</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>C++ Standard Library</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>