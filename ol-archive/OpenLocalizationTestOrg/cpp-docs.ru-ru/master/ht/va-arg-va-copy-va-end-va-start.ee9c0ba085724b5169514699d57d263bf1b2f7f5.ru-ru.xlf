<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17af45a951b174ff17f6026233220c9d3c3dbee5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\va-arg-va-copy-va-end-va-start.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">90c0d3a52c4300be36521f7b1aa32759986f2916</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">580c7275c4b03d98dac1177762978e9891fe5082</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>va_arg, va_copy, va_end, va_start | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>va_arg, va_copy, va_end, va_start</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Accesses variable-argument lists.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Type of argument to be retrieved.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Pointer to the list of arguments.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Pointer to the list of arguments to be initialized from</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Pointer to the initialized list of arguments to copy to <ph id="ph1">`dest`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Parameter that precedes the first optional argument.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>returns the current argument.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>, <ph id="ph1">`va_start`</ph> and <ph id="ph2">`va_end`</ph> do not return values.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`va_arg`</ph>, <ph id="ph2">`va_copy`</ph>, <ph id="ph3">`va_end`</ph>, and <ph id="ph4">`va_start`</ph> macros provide a portable way to access the arguments to a function when the function takes a variable number of arguments.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>There are two versions of the macros: The macros defined in STDARG.H conform to the ISO C99 standard; the macros defined in VARARGS.H are deprecated but are retained for backward compatibility with code that was written before the ANSI C89 standard.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>These macros assume that the function takes a fixed number of required arguments, followed by a variable number of optional arguments.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The required arguments are declared as ordinary parameters to the function and can be accessed through the parameter names.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The optional arguments are accessed through the macros in STDARG.H (or VARARGS.H for code that was written before the ANSI C89 standard), which sets a pointer to the first optional argument in the argument list, retrieves arguments from the list, and resets the pointer when argument processing is completed.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The C standard macros, defined in STDARG.H, are used as follows:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>sets <ph id="ph1">`arg_ptr`</ph> to the first optional argument in the list of arguments that's passed to the function.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The argument <ph id="ph1">`arg_ptr`</ph> must have the <ph id="ph2">`va_list`</ph> type.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The argument <ph id="ph1">`prev_param`</ph> is the name of the required parameter that immediately precedes the first optional argument in the argument list.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`prev_param`</ph> is declared with the register storage class, the macro's behavior is undefined.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>must be used before <ph id="ph1">`va_arg`</ph> is used for the first time.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>retrieves a value of <ph id="ph1">`type`</ph> from the location that's given by <ph id="ph2">`arg_ptr`</ph>, and increments <ph id="ph3">`arg_ptr`</ph> to point to the next argument in the list by using the size of <ph id="ph4">`type`</ph> to determine where the next argument starts.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>can be used any number of times in the function to retrieve arguments from the list.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>makes a copy of a list of arguments in its current state.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`src`</ph> parameter must already be initialized with <ph id="ph2">`va_start`</ph>; it may have been updated with <ph id="ph3">`va_arg`</ph> calls, but must not have been reset with <ph id="ph4">`va_end`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The next argument that's retrieved by <ph id="ph1">`va_arg`</ph> from <ph id="ph2">`dest`</ph> is the same as the next argument that's retrieved from <ph id="ph3">`src`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>After all arguments have been retrieved, <ph id="ph1">`va_end`</ph> resets the pointer to <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>must be called on each argument list that's initialized with <ph id="ph1">`va_start`</ph> or <ph id="ph2">`va_copy`</ph> before the function returns.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The macros in VARARGS.H are deprecated and are retained only for backwards compatibility with code that was written before the ANSI C89 standard.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In all other cases, use the macros in STDARGS.H.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>When they are compiled by using <bpt id="p1">[</bpt>/clr (Common Language Runtime Compilation)<ept id="p1">](../../build/reference/clr-common-language-runtime-compilation.md)</ept>, programs that use these macros may generate unexpected results because of differences between native and common language runtime (CLR) type systems.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Consider this program:</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Notice that <ph id="ph1">`testit`</ph> expects its second parameter to be either an <ph id="ph2">`int`</ph> or a <ph id="ph3">`char*`</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The arguments being passed are 0xffffffff (an <ph id="ph1">`unsigned int`</ph>, not an <ph id="ph2">`int`</ph>) and <ph id="ph3">`NULL`</ph> (actually an <ph id="ph4">`int`</ph>, not a <ph id="ph5">`char*`</ph>).</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>When the program is compiled for native code, it produces this output:</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>However, when the program is compiled by using <bpt id="p1">**</bpt>/clr:pure<ept id="p1">**</ept>, the type mismatches cause it to generate an exception.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The solution is to use explicit casts:</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>stdio.h&gt; and <ph id="ph2">\&lt;</ph>stdarg.h&gt;</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Deprecated Header:<ept id="p1">**</ept> <ph id="ph1">\&lt;</ph>varargs.h&gt;</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Libraries</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>All versions of the <bpt id="p1">[</bpt>C run-time libraries<ept id="p1">](../../c-runtime-library/crt-library-features.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>System::ParamArrayAttribute Class</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Argument Access</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>vfprintf, _vfprintf_l, vfwprintf, _vfwprintf_l</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>