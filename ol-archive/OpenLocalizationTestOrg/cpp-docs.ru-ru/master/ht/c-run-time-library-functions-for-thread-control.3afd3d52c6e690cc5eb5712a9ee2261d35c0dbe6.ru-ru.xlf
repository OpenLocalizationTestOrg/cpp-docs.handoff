<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ba76ece94fa129b9f4df987072f39b8a21e233a6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\c-run-time-library-functions-for-thread-control.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b6ac6fe2260da215628d85a6304e31f15f767a3</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">de3f843ec830ed91a92ecf44c72bf6f1bf007e47</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>C Run-Time Library Functions for Thread Control | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>C Run-Time Library Functions for Thread Control</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>All Win32 programs have at least one thread.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Any thread can create additional threads.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>A thread can complete its work quickly and then terminate, or it can stay active for the life of the program.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The LIBCMT and MSVCRT C run-time libraries provide the following functions for thread creation and termination: <bpt id="p1">[</bpt>_beginthread, _beginthreadex<ept id="p1">](../c-runtime-library/reference/beginthread-beginthreadex.md)</ept> and <bpt id="p2">[</bpt>_endthread, _endthreadex<ept id="p2">](../c-runtime-library/reference/endthread-endthreadex.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_beginthread`</ph> and <ph id="ph2">`_beginthreadex`</ph> functions create a new thread and return a thread identifier if the operation is successful.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The thread terminates automatically if it completes execution, or it can terminate itself with a call to <ph id="ph1">`_endthread`</ph> or <ph id="ph2">`_endthreadex`</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>If you are going to call C run-time routines from a program built with Libcmt.lib, you must start your threads with the <ph id="ph1">`_beginthread`</ph> or <ph id="ph2">`_beginthreadex`</ph> function.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Do not use the Win32 functions <ph id="ph1">`ExitThread`</ph> and <ph id="ph2">`CreateThread`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Using <ph id="ph1">`SuspendThread`</ph> can lead to a deadlock when more than one thread is blocked waiting for the suspended thread to complete its access to a C run-time data structure.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The _beginthread and _beginthreadex Functions</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_beginthread`</ph> and <ph id="ph2">`_beginthreadex`</ph> functions create a new thread.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>A thread shares the code and data segments of a process with other threads in the process but has its own unique register values, stack space, and current instruction address.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The system gives CPU time to each thread, so that all threads in a process can execute concurrently.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_beginthreadex`</ph> are similar to the <bpt id="p1">[</bpt>CreateThread<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms682453)</ept> function in the Win32 API but has these differences:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>They initialize certain C run-time library variables.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>This is important only if you use the C run-time library in your threads.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>helps provide control over security attributes.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>You can use this function to start a thread in a suspended state.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_beginthreadex`</ph> return a handle to the new thread if successful or an error code if there was an error.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The _endthread and _endthreadex Functions</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>_endthread<ept id="p1">](../c-runtime-library/reference/endthread-endthreadex.md)</ept> function terminates a thread created by <ph id="ph1">`_beginthread`</ph> (and similarly, <ph id="ph2">`_endthreadex`</ph> terminates a thread created by <ph id="ph3">`_beginthreadex`</ph>).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Threads terminate automatically when they finish.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_endthreadex`</ph> are useful for conditional termination from within a thread.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A thread dedicated to communications processing, for example, can quit if it is unable to get control of the communications port.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Multithreading with C and Win32</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>