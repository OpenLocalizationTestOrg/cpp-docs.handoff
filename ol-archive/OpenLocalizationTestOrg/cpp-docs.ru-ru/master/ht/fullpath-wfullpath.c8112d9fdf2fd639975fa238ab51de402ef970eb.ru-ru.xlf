<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ru-ru">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4421469baf4cc7691d1c4d6441cb28b1d84ddda6</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\c-runtime-library\reference\fullpath-wfullpath.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4e38bbce27459d50ca7f8d76812f4f6509421cd9</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5c9b896d5e93794032cb3aec059697807752f5e0</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>_fullpath, _wfullpath | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>_fullpath, _wfullpath</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Creates an absolute or full path name for the specified relative path name.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Pointer to a buffer containing the absolute or full path name, or NULL.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Relative path name.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Maximum length of the absolute path name buffer (<ph id="ph1">`absPath`</ph>).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>This length is in bytes for <ph id="ph1">`_fullpath`</ph> but in wide characters (<ph id="ph2">`wchar_t`</ph>) for <ph id="ph3">`_wfullpath`</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Each of these functions returns a pointer to a buffer containing the absolute path name (<ph id="ph1">`absPath`</ph>).</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>If there is an error (for example, if the value passed in <ph id="ph1">`relPath`</ph> includes a drive letter that is not valid or cannot be found, or if the length of the created absolute path name (<ph id="ph2">`absPath`</ph>) is greater than <ph id="ph3">`maxLength`</ph>), the function returns <ph id="ph4">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`_fullpath`</ph> function expands the relative path name in <ph id="ph2">`relPath`</ph> to its fully qualified or absolute path and stores this name in <ph id="ph3">`absPath`</ph><bpt id="p1">*</bpt>.<ept id="p1">*</ept></source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`absPath`</ph> is NULL, <ph id="ph2">`malloc`</ph> is used to allocate a buffer of sufficient length to hold the path name.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>It is the responsibility of the caller to free this buffer.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A relative path name specifies a path to another location from the current location (such as the current working directory: ".").</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>An absolute path name is the expansion of a relative path name that states the entire path required to reach the desired location from the root of the file system.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Unlike <ph id="ph1">`_makepath`</ph>, <ph id="ph2">`_fullpath`</ph> can be used to obtain the absolute path name for relative paths (<ph id="ph3">`relPath`</ph>) that include "./" or "../" in their names.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, to use C run-time routines, the application must include the header files that contain the declarations for the routines.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Each header file include statement references the location of the file in a relative manner (from the application's working directory):</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>when the absolute path (actual file system location) of the file might be:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>automatically handles multibyte-character string arguments as appropriate, recognizing multibyte-character sequences according to the multibyte code page currently in use.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>is a wide-character version of <ph id="ph1">`_fullpath`</ph>; the string arguments to <ph id="ph2">`_wfullpath`</ph> are wide-character strings.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>and <ph id="ph1">`_fullpath`</ph> behave identically except that <ph id="ph2">`_wfullpath`</ph> does not handle multibyte-character strings.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`_DEBUG`</ph> and <ph id="ph2">`_CRTDBG_MAP_ALLOC`</ph> are both defined, calls to <ph id="ph3">`_fullpath`</ph> and <ph id="ph4">`_wfullpath`</ph> are replaced by calls to <ph id="ph5">`_fullpath_dbg`</ph> and <ph id="ph6">`_wfullpath_dbg`</ph> to allow for debugging memory allocations.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>_fullpath_dbg, _wfullpath_dbg<ept id="p1">](../../c-runtime-library/reference/fullpath-dbg-wfullpath-dbg.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This function invokes the invalid parameter handler, as described in <bpt id="p1">[</bpt>Parameter Validation<ept id="p1">](../../c-runtime-library/parameter-validation.md)</ept>, if <ph id="ph1">`maxlen`</ph> is less than or equal to 0.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>If execution is allowed to continue, this function sets <ph id="ph1">`errno`</ph> to <ph id="ph2">`EINVAL`</ph> and returns <ph id="ph3">`NULL`</ph>.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Generic-Text Routine Mappings</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Tchar.h routine</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>_UNICODE and _MBCS not defined</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>_MBCS defined</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>_UNICODE defined</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`absPath`</ph> buffer is <ph id="ph2">`NULL`</ph>, <ph id="ph3">`_fullpath`</ph> calls <bpt id="p1">[</bpt>malloc<ept id="p1">](../../c-runtime-library/reference/malloc.md)</ept> to allocate a buffer and ignores the <ph id="ph4">`maxLength`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>It is the caller's responsibility to deallocate this buffer (using <bpt id="p1">[</bpt>free<ept id="p1">](../../c-runtime-library/reference/free.md)</ept>) as appropriate.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>If the <ph id="ph1">`relPath`</ph> argument specifies a disk drive, the current directory of this drive is combined with the path.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Function</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Required header</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>stdlib.h&gt;</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>stdlib.h&gt; or <ph id="ph1">\&lt;</ph>wchar.h&gt;</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more compatibility information, see <bpt id="p1">[</bpt>Compatibility<ept id="p1">](../../c-runtime-library/compatibility.md)</ept> in the Introduction.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>.NET Framework Equivalent</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>System::IO::File::Create</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>File Handling</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>_getcwd, _wgetcwd</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>_getdcwd, _wgetdcwd</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>_makepath, _wmakepath</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>_splitpath, _wsplitpath</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>