<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8253b460870d5e1be48b0fb9bc1fb577165e581a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\mfc-activex-controls.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6acbb5933f7f9627c9be18907769b3c832c847ff</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6581f516081b522fad673823a810a8ee67b2aea7</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>MFC ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>An ActiveX control is a reusable software component based on the Component Object Model (COM) that supports a wide variety of OLE functionality and can be customized to fit many software needs.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>ActiveX controls are designed for use both in ordinary ActiveX control containers and on the Internet, in World Wide Web pages.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can create ActiveX controls either with MFC, described here, or with the <bpt id="p1">[</bpt>Active Template Library (ATL)<ept id="p1">](../atl/active-template-library-atl-concepts.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>An ActiveX control can draw itself in its own window, respond to events (such as mouse clicks), and be managed through an interface that includes properties and methods similar to those in Automation objects.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>These controls can be developed for many uses, such as database access, data monitoring, or graphing.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Besides their portability, ActiveX controls support features previously not available to ActiveX controls, such as compatibility with existing OLE containers and the ability to integrate their menus with the OLE container menus.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In addition, an ActiveX control fully supports Automation, which allows the control to expose read\write properties and a set of methods that can be called by the control user.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>You can create windowless ActiveX controls and controls that only create a window when they become active.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Windowless controls speed up the display of your application and make it possible to have transparent and nonrectangular controls.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can also load ActiveX control properties asynchronously.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>An ActiveX control is implemented as an in-process server (typically a small object) that can be used in any OLE container.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Note that the full functionality of an ActiveX control is available only when used within an OLE container designed to be aware of ActiveX controls.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Port ActiveX Controls to Other Applications<ept id="p1">](../mfc/containers-for-activex-controls.md)</ept> for a list of containers that support ActiveX controls.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>This container type, hereafter called a "control container," can operate an ActiveX control by using the control's properties and methods, and receives notifications from the ActiveX control in the form of events.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following figure demonstrates this interaction.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Interplay of ActiveX control container and control</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Interaction Between an ActiveX Control Container and a Windowed ActiveX Control</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For some recent information on optimizing your ActiveX controls, see <bpt id="p1">[</bpt>MFC ActiveX Controls: Optimization<ept id="p1">](../mfc/mfc-activex-controls-optimization.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>To create an MFC ActiveX control, see <bpt id="p1">[</bpt>Create an ActiveX control project<ept id="p1">](../mfc/reference/mfc-activex-control-wizard.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>For more information, see:</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>ActiveX Control Containers</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Active Documents</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Using ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Understanding ActiveX Controls</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Upgrading an Existing ActiveX Control to be Used on the Internet</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Basic Components of an ActiveX Control</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>An ActiveX control uses several programmatic elements to interact efficiently with a control container and with the user.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>These are class <bpt id="p1">[</bpt>COleControl<ept id="p1">](../mfc/reference/colecontrol-class.md)</ept>, a set of event-firing functions, and a dispatch map.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Every ActiveX control object you develop inherits a powerful set of features from its MFC base class, <ph id="ph1">`COleControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>These features include in-place activation, and Automation logic.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>can provide the control object with the same functionality as an MFC window object, plus the ability to fire events.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>can also provide <bpt id="p1">[</bpt>windowless controls<ept id="p1">](../mfc/providing-windowless-activation.md)</ept>, which rely on their container for help with some of the functionality a window provides (mouse capture, keyboard focus, scrolling), but offer much faster display.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Because the control class derives from <ph id="ph1">`COleControl`</ph>, it inherits the capability to send, or "fire," messages, called events, to the control container when certain conditions are met.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>These events are used to notify the control container when something important happens in the control.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>You can send additional information about an event to the control container by attaching parameters to the event.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>For more information about ActiveX control events, see the article <bpt id="p1">[</bpt>MFC ActiveX Controls: Events<ept id="p1">](../mfc/mfc-activex-controls-events.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The final element is a dispatch map, which is used to expose a set of functions (called methods) and attributes (called properties) to the control user.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Properties allow the control container or the control user to manipulate the control in various ways.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The user can change the appearance of the control, change certain values of the control, or make requests of the control, such as accessing a specific piece of data that the control maintains.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This interface is determined by the control developer and is defined using <bpt id="p1">**</bpt>Class View<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>For more information on ActiveX control methods and properties, see the articles <bpt id="p1">[</bpt>MFC ActiveX Controls: Methods<ept id="p1">](../mfc/mfc-activex-controls-methods.md)</ept> and <bpt id="p2">[</bpt>Properties<ept id="p2">](../mfc/mfc-activex-controls-properties.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Interaction Between Controls with Windows and ActiveX Control Containers</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>When a control is used within a control container, it uses two mechanisms to communicate: it exposes properties and methods, and it fires events.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The following figure demonstrates how these two mechanisms are implemented.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>ActiveX control communicates with its container</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Communication Between an ActiveX Control Container and an ActiveX Control</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The previous figure also illustrates how other OLE interfaces (besides automation and events) are handled by controls.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>All of a control's communication with the container is performed by <ph id="ph1">`COleControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>To handle some of the container's requests, <bpt id="p1">**</bpt>COleControl<ept id="p1">**</ept> will call member functions that are implemented in the control class.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>All methods and some properties are handled in this way.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Your control's class can also initiate communication with the container by calling member functions of <ph id="ph1">`COleControl`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Events are fired in this manner.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Active and Inactive States of an ActiveX Control</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>A control has two basic states: active and inactive.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Traditionally, these states were distinguished by whether the control had a window.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>An active control had a window; an inactive control did not.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>With the introduction of windowless activation, this distinction is no longer universal, but still applies to many controls.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>When a <bpt id="p1">[</bpt>windowless control<ept id="p1">](../mfc/providing-windowless-activation.md)</ept> goes active, it invokes mouse capture, keyboard focus, scrolling, and other window services from its container.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>You can also <bpt id="p1">[</bpt>provide mouse interaction to inactive controls<ept id="p1">](../mfc/providing-mouse-interaction-while-inactive.md)</ept>, as well as create controls that <bpt id="p2">[</bpt>wait until activated to create a window<ept id="p2">](../mfc/turning-off-the-activate-when-visible-option.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When a control with a window becomes active, it is able to interact fully with the control container, the user, and Windows.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The figure below demonstrates the paths of communication between the ActiveX control, the control container, and the operating system.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Msg processing in active windowed ActiveX control</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Windows Message Processing in a Windowed ActiveX Control (When Active)</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Serialization</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The ability to serialize data, sometimes referred to as persistence, allows the control to write the value of its properties to persistent storage.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Controls can then be recreated by reading the object's state from the storage.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Note that a control is not responsible for obtaining access to the storage medium.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Instead, the control's container is responsible for providing the control with a storage medium to use at the appropriate times.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>For more information on serialization, see the article <bpt id="p1">[</bpt>MFC ActiveX Controls: Serializing<ept id="p1">](../mfc/mfc-activex-controls-serializing.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>For information on optimizing serialization, see <bpt id="p1">[</bpt>Optimizing Persistence and Initialization<ept id="p1">](../mfc/optimizing-persistence-and-initialization.md)</ept> in ActiveX Controls: Optimization.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Installing ActiveX Control Classes and Tools</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>When you install Visual C++, the MFC ActiveX control classes and retail and debug ActiveX control run-time DLLs are automatically installed if ActiveX controls are selected in Setup (they are selected by default).</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>By default, the ActiveX control classes and tools are installed in the following subdirectories under \Program Files\Microsoft Visual Studio .NET:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>\Common7\Tools</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>Contains the Test Container files (TstCon32.exe, as well as its Help files).</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>\Vc7\atlmfc\include</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Contains the include files needed to develop ActiveX controls with MFC</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>\Vc7\atlmfc\src\mfc</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Contains the source code for specific ActiveX control classes in MFC</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>\Vc7\atlmfc\lib</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Contains the libraries required to develop ActiveX controls with MFC</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>There are also samples for MFC ActiveX controls.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For more information about these samples, see <bpt id="p1">[</bpt>Controls Samples: MFC-Based ActiveX Controls<ept id="p1">](../visual-cpp-samples.md)</ept></source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>User Interface Elements</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>