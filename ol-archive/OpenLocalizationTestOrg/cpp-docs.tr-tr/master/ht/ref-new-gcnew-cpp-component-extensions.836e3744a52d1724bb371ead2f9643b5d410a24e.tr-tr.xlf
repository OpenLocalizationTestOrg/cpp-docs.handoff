<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">edafc3c0986bed39f3be2d85e8687c668e38a9c0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\windows\ref-new-gcnew-cpp-component-extensions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">920e7f6f40a5b9bd3927dbd8fda4779779d2a3ab</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7da0d26ccab38d8d42b76bc09b44be524aae8ea2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>ref new, gcnew  (C++ Component Extensions) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>ref new, gcnew  (C++ Component Extensions)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`ref new`</ph> aggregate keyword allocates an instance of a type that is garbage collected when the object becomes inaccessible, and that returns a handle (<bpt id="p1">[</bpt><ph id="ph2">^</ph><ept id="p1">](../windows/handle-to-object-operator-hat-cpp-component-extensions.md)</ept>) to the allocated object.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>All Runtimes</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Memory for an instance of a type that is allocated by <ph id="ph1">`ref new`</ph> is deallocated automatically.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`ref new`</ph> operation throws <ph id="ph2">`OutOfMemoryException`</ph> if it is unable to allocate memory.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information about how memory for native C++ types is allocated and deallocated, see <bpt id="p1">[</bpt>the new and delete operators<ept id="p1">](../cpp/new-and-delete-operators.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`ref new`</ph> to allocate memory for Windows Runtime objects whose lifetime you want to administer automatically.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The object is automatically deallocated when its reference count goes to zero, which occurs after the last copy of the reference has gone out of scope.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Ref classes and structs<ept id="p1">](http://msdn.microsoft.com/library/windows/apps/hh699870.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/ZW<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Memory for a managed type (reference or value type) is allocated by <ph id="ph1">`gcnew`</ph>, and deallocated by using garbage collection.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Requirements</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Compiler option: <bpt id="p1">**</bpt>/clr<ept id="p1">**</ept></source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Examples</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">`gcnew`</ph> to allocate a Message object.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The following example uses <ph id="ph1">`gcnew`</ph> to create a boxed value type for use like a reference type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Output</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Component Extensions for Runtime Platforms</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>