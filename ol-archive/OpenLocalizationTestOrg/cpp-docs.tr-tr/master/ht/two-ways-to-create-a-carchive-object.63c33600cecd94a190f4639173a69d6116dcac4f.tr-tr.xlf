<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">29c92cf5d69102177dbef09a499a1948c50afdef</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\two-ways-to-create-a-carchive-object.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">60c69f4114dbdead7bb24199e53ab94753b1a385</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bf046c5d7c2fc04957f04c87899a63a728060d4e</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Two Ways to Create a CArchive Object | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Two Ways to Create a CArchive Object</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>There are two ways to create a <ph id="ph1">`CArchive`</ph> object:</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Implicit creation of a CArchive object via the framework</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Explicit creation of a CArchive object</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Implicit Creation of a CArchive Object via the Framework</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The most common, and easiest, way is to let the framework create a <ph id="ph1">`CArchive`</ph> object for your document on behalf of the Save, Save As, and Open commands on the File menu.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Here is what the framework does when the user of your application issues the Save As command from the File menu:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Presents the <bpt id="p1">**</bpt>Save As<ept id="p1">**</ept> dialog box and gets the filename from the user.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Opens the file named by the user as a <ph id="ph1">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Creates a <ph id="ph1">`CArchive`</ph> object that points to this <ph id="ph2">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>In creating the <ph id="ph1">`CArchive`</ph> object, the framework sets the mode to "store" (write, serialize), as opposed to "load" (read, deserialize).</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Calls the <ph id="ph1">`Serialize`</ph> function defined in your <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept>-derived class, passing it a reference to the <ph id="ph2">`CArchive`</ph> object.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Your document's <ph id="ph1">`Serialize`</ph> function then writes data to the <ph id="ph2">`CArchive`</ph> object, as explained shortly.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Upon return from your <ph id="ph1">`Serialize`</ph> function, the framework destroys the <ph id="ph2">`CArchive`</ph> object and then the <ph id="ph3">`CFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Thus, if you let the framework create the <ph id="ph1">`CArchive`</ph> object for your document, all you have to do is implement the document's <ph id="ph2">`Serialize`</ph> function that writes and reads to and from the archive.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>You also have to implement <ph id="ph1">`Serialize`</ph> for any <ph id="ph2">`CObject`</ph>-derived objects that the document's <ph id="ph3">`Serialize`</ph> function in turn serializes directly or indirectly.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Explicit Creation of a CArchive Object</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Besides serializing a document via the framework, there are other occasions when you may need a <ph id="ph1">`CArchive`</ph> object.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>For example, you might want to serialize data to and from the Clipboard, represented by a <ph id="ph1">`CSharedFile`</ph> object.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Or, you may want to use a user interface for saving a file that is different from the one offered by the framework.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>In this case, you can explicitly create a <ph id="ph1">`CArchive`</ph> object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>You do this the same way the framework does, using the following procedure.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To explicitly create a CArchive object</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Construct a <ph id="ph1">`CFile`</ph> object or an object derived from <ph id="ph2">`CFile`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Pass the <ph id="ph1">`CFile`</ph> object to the constructor for <ph id="ph2">`CArchive`</ph>, as shown in the following example:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#5</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>The second argument to the <ph id="ph1">`CArchive`</ph> constructor is an enumerated value that specifies whether the archive will be used for storing or loading data to or from the file.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`Serialize`</ph> function of an object checks this state by calling the <ph id="ph2">`IsStoring`</ph> function for the archive object.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>When you are finished storing or loading data to or from the <ph id="ph1">`CArchive`</ph> object, close it.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Although the <ph id="ph1">`CArchive`</ph> (and <ph id="ph2">`CFile`</ph>) objects will automatically close the archive (and file), it is good practice to explicitly do so since it makes recovery from errors easier.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For more information about error handling, see the article <bpt id="p1">[</bpt>Exceptions: Catching and Deleting Exceptions<ept id="p1">](../mfc/exceptions-catching-and-deleting-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>To close the CArchive object</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The following example illustrates how to close the <ph id="ph1">`CArchive`</ph> object:</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>NVC_MFCSerialization#6</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Serialization: Serializing an Object</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>