<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b489c9259dc3936231e74fcbfb2ed06816e432b5</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\struct-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f568faeef45d68b86800696b6d9cb1fc1bfd0818</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">75a7c3a7859af55bfaccfccc4924323405b504d2</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>struct (C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>struct (C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`struct`</ph> keyword defines a structure type and/or a variable of a structure type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Syntax</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Optional template specifications.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>For more information, refer to <bpt id="p1">[</bpt>Template Specifications<ept id="p1">](templates-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`struct`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Optional storage-class specification.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>For more information, refer to the <bpt id="p1">[</bpt>__declspec<ept id="p1">](../cpp/declspec.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The type name given to the structure.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The tag becomes a reserved word within the scope of the structure.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The tag is optional.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>If omitted, an anonymous structure is defined.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Anonymous Class Types<ept id="p1">](../cpp/anonymous-class-types.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Optional list of classes or structures this structure will derive its members from.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Base Classes<ept id="p1">](../cpp/base-classes.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Each base class or structure name can be preceded by an access specifier (<bpt id="p1">[</bpt>public<ept id="p1">](../cpp/public-cpp.md)</ept>, <bpt id="p2">[</bpt>private<ept id="p2">](../cpp/private-cpp.md)</ept>, <bpt id="p3">[</bpt>protected<ept id="p3">](../cpp/protected-cpp.md)</ept>) and the <bpt id="p4">[</bpt>virtual<ept id="p4">](../cpp/virtual-cpp.md)</ept> keyword.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>See the member-access table in <bpt id="p1">[</bpt>Controlling Access to Class Members<ept id="p1">](member-access-control-cpp.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>List of structure members.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Refer to <bpt id="p1">[</bpt>Class Member Overview<ept id="p1">](../cpp/class-member-overview.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The only difference here is that <ph id="ph1">`struct`</ph> is used in place of <ph id="ph2">`class`</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Declarator list specifying the names of the class.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Declarator lists declare one or more instances of the structure type.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Declarators may include initializer lists if all data members of the class are <ph id="ph1">`public`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Initializer lists are common in structures because data members are <ph id="ph1">`public`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>See <bpt id="p1">[</bpt>Overview of Declarators<ept id="p1">](../cpp/overview-of-declarators.md)</ept> for more information.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A structure type is a user-defined composite type.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>It is composed of fields or members that can have different types.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>In C++, a structure is the same as a class except that its members are <ph id="ph1">`public`</ph> by default.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For information on managed classes and structs, see <bpt id="p1">[</bpt>Classes and Structs<ept id="p1">](../windows/classes-and-structs-cpp-component-extensions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Using a Structure</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>In C, you must explicitly use the <ph id="ph1">`struct`</ph> keyword to declare a structure.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In C++, you do not need to use the <ph id="ph1">`struct`</ph> keyword after the type has been defined.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>You have the option of declaring variables when the structure type is defined by placing one or more comma-separated variable names between the closing brace and the semicolon.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Structure variables can be initialized.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The initialization for each variable must be enclosed in braces.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>For related information, see <bpt id="p1">[</bpt>class<ept id="p1">](../cpp/class-cpp.md)</ept>, <bpt id="p2">[</bpt>union<ept id="p2">](../cpp/unions.md)</ept>, and <bpt id="p3">[</bpt>enum<ept id="p3">](../cpp/enumerations-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>