<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3bbfbcee0f61efa45a38942435139e06b7c842ff</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\cpp\lvalues-and-rvalues-visual-cpp.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5378a286cf58f1bf8581b6fa9d3b04e3206c097c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38340b412a1d1cf859cc6735d892dd1f8106596d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Lvalues and Rvalues (Visual C++) | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Lvalues and Rvalues (Visual C++)</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Every C++ expression is either an lvalue or an rvalue.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>An lvalue refers to an object that persists beyond a single expression.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can think of an lvalue as an object that has a name.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>All variables, including nonmodifiable (<ph id="ph1">`const`</ph>) variables, are lvalues.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>An rvalue is a temporary value that does not persist beyond the expression that uses it.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>To better understand the difference between lvalues and rvalues, consider the following example:</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>In this example, <ph id="ph1">`x`</ph> is an lvalue because it persists beyond the expression that defines it.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The expression <ph id="ph1">`3 + 4`</ph> is an rvalue because it evaluates to a temporary value that does not persist beyond the expression that defines it.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The following example demonstrates several correct and incorrect usages of lvalues and rvalues:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The examples in this topic illustrate correct and incorrect usage when operators are not overloaded.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>By overloading operators, you can make an expression such as <ph id="ph1">`j * 4`</ph> an lvalue.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The terms <bpt id="p1">*</bpt>lvalue<ept id="p1">*</ept> and <bpt id="p2">*</bpt>rvalue<ept id="p2">*</ept> are often used when you refer to object references.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For more information about references, see <bpt id="p1">[</bpt>Lvalue Reference Declarator: &amp;<ept id="p1">](../cpp/lvalue-reference-declarator-amp.md)</ept> and <bpt id="p2">[</bpt>Rvalue Reference Declarator: &amp;&amp;<ept id="p2">](../cpp/rvalue-reference-declarator-amp-amp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Basic Concepts</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Lvalue Reference Declarator: &amp;</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Rvalue Reference Declarator: &amp;&amp;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>