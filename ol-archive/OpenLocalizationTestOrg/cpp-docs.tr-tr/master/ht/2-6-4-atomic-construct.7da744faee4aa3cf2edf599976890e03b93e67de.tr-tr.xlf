<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">752b046e82424144ab09c5f707ca22e5ee855c3d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\parallel\openmp\2-6-4-atomic-construct.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1c035899205f90400e479c47c0e13b9c8a0f2e9c</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0b3f71353fc1974db64d09a891a2503edf5be7da</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>2.6.4 atomic Construct | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>2.6.4 atomic Construct</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">`atomic`</ph> directive ensures that a specific memory location is updated atomically, rather than exposing it to the possibility of multiple, simultaneous writing threads.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The syntax of the <ph id="ph1">`atomic`</ph> directive is as follows:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The expression statement must have one of the following forms:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x binop<ept id="p1">*</ept><ph id="ph1">= </ph><bpt id="p2">*</bpt>expr<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>x++</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>++x</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>x--</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>--x</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>In the preceding expressions:</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>x<ept id="p1">*</ept> is an lvalue expression with scalar type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>expr<ept id="p1">*</ept> is an expression with scalar type, and it does not reference the object designated by <bpt id="p2">*</bpt>x<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>is not an overloaded operator and is one of  +, *, -, /, &amp;, ^, &amp;#124;, &lt;<ph id="ph1">\&lt;</ph>, or   &gt;&gt;.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Although it is implementation-defined whether an implementation replaces all <ph id="ph1">`atomic`</ph> directives with <bpt id="p1">**</bpt>critical<ept id="p1">**</ept> directives that have the same unique <bpt id="p2">*</bpt>name<ept id="p2">*</ept>, the <ph id="ph2">`atomic`</ph> directive permits better optimization.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Often hardware instructions are available that can perform the atomic update with the least overhead.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Only the load and store of the object designated by <bpt id="p1">*</bpt>x<ept id="p1">*</ept> are atomic; the evaluation of <bpt id="p2">*</bpt>expr<ept id="p2">*</ept> is not atomic.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To avoid race conditions, all updates of the location in parallel should be protected with the <ph id="ph1">`atomic`</ph> directive, except those that are known to be free of race conditions.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Restrictions to the <ph id="ph1">`atomic`</ph> directive are as follows:</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>All atomic references to the storage location x throughout the program are required to have a compatible type.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Examples:</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>