<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="tr-tr">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05883c222f4cc3fffbc019dedfc52ae931da2eb2</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\supporting-idispeventimpl.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ef3a1c9c1c3f2ed6365490d578837713eb526c4d</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4ab3d0757502af3f335553aea627fb461fc79d76</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Supporting IDispEventImpl | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Supporting IDispEventImpl</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>The template class <bpt id="p1">[</bpt>IDispEventImpl<ept id="p1">](../atl/reference/idispeventimpl-class.md)</ept> can be used to provide support for connection point sinks in your ATL class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>A connection point sink allows your class to handle events fired from external COM objects.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>These connection point sinks are mapped with an event sink map, provided by your class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>To properly implement a connection point sink for your class, the following steps must be completed:</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Import the type libraries for each external object</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Declare the <ph id="ph1">`IDispEventImpl`</ph> interfaces</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Declare an event sink map</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Advise and unadvise the connection points</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The steps involved in implementing a connection point sink are all accomplished by modifying only the header file (.h) of your class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Importing the Type Libraries</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>For each external object whose events you want to handle, you must import the type library.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This step defines the events that can be handled and provides information that is used when declaring the event sink map.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>#import<ept id="p1">](../preprocessor/hash-import-directive-cpp.md)</ept> directive can be used to accomplish this.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Add the necessary <ph id="ph1">`#import`</ph> directive lines for each dispatch interface you will support to the header file (.h) of your class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The following example imports the type library of an external COM server (<ph id="ph1">`MSCAL.Calendar.7`</ph>):</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#141</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>You must have a separate <ph id="ph1">`#import`</ph> statement for each external type library you will support.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Declaring the IDispEventImpl Interfaces</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Now that you have imported the type libraries of each dispatch interface, you need to declare separate <ph id="ph1">`IDispEventImpl`</ph> interfaces for each external dispatch interface.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Modify the declaration of your class by adding an <ph id="ph1">`IDispEventImpl`</ph> interface declaration for each external object.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>For more information on the parameters, see <bpt id="p1">[</bpt>IDispEventImpl<ept id="p1">](../atl/reference/idispeventimpl-class.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The following code declares two connection point sinks, for the <ph id="ph1">`DCalendarEvents`</ph> interface, for the COM object implemented by class <ph id="ph2">`CMyCompositCtrl2`</ph>:</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#142</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Declaring an Event Sink Map</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>In order for the event notifications to be handled by the proper function, your class must route each event to its correct handler.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>This is achieved by declaring an event sink map.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>ATL provides several macros, <bpt id="p1">[</bpt>BEGIN_SINK_MAP<ept id="p1">](http://msdn.microsoft.com/library/32542b3d-ac43-4139-8ac4-41c48481744f)</ept>, <bpt id="p2">[</bpt>END_SINK_MAP<ept id="p2">](http://msdn.microsoft.com/library/c8bb87a0-b224-46e5-9edc-fc4d7f1129b4)</ept>, and <bpt id="p3">[</bpt>SINK_ENTRY_EX<ept id="p3">](http://msdn.microsoft.com/library/33a5fff6-5248-47c0-8cf4-8bdf760e86e5)</ept>, that make this mapping easier.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>The standard format is as follows:</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The following example declares an event sink map with two event handlers:</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#136</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The implementation is nearly complete.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The last step concerns the advising and unadvising of the external interfaces.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Advising and Unadvising the IDispEventImpl Interfaces</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The final step is to implement a method that will advise (or unadvise) all connection points at the proper times.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This advising must be done before communication between the external clients and your object can take place.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Before your object becomes visible, each external dispatch interface supported by your object is queried for outgoing interfaces.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>A connection is established and a reference to the outgoing interface is used to handle events from the object.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>This procedure is referred to as "advising."</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>After your object is finished with the external interfaces, the outgoing interfaces should be notified that they are no longer used by your class.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>This process is referred to as "unadvising."</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Because of the unique nature of COM objects, this procedure varies, in detail and execution, between implementations.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>These details are beyond the scope of this topic and are not addressed.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Fundamentals of ATL COM Objects</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>