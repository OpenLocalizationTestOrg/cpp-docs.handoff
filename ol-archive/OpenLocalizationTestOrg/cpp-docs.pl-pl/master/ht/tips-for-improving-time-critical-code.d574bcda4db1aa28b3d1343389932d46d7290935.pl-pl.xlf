<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e86045297f337dca0205a99b436f80bc83413f9d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\reference\tips-for-improving-time-critical-code.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">17080fe8b95d66a09201c7991485019a74ca833b</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b6013e08a488b8f67d641fd09e931307d4adcc56</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Tips for Improving Time-Critical Code | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Tips for Improving Time-Critical Code</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Writing fast code requires understanding all aspects of your application and how it interacts with the system.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This topic suggests alternatives to some of the more obvious coding techniques to help you ensure that the time-critical portions of your code perform satisfactorily.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>To summarize, improving time-critical code requires that you:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Know which parts of your program have to be fast.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Know the size and speed of your code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Know the cost of new features.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Know the minimum work needed to accomplish the job.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>To gather information on the performance of your code, you can use the performance monitor (perfmon.exe).</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>Sections in this Article</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Cache Misses and Page Faults</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Sorting and Searching</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>MFC and Class Libraries</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Shared Libraries</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Heaps</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Threads</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Small Working Set</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Cache Misses and Page Faults</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Missed cache hits, on both the internal and external cache, as well as page faults (going to secondary storage for program instructions and data) slow the performance of a program.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>A CPU cache hit can cost your program 10–20 clock cycles.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>An external cache hit can cost 20–40 clock cycles.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>A page fault can cost one million clock cycles (assuming a processor that handles 500 million instructions/second and a time of 2 millisecond for a page fault).</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Therefore, it is in the best interest of program execution to write code that will reduce the number of missed cache hits and page faults.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>One reason for slow programs is that they take more page faults or miss the cache more often than necessary.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>To avoid this, it's important to use data structures with good locality of reference, which means keeping related things together.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Sometimes a data structure that looks great turns out to be horrible because of poor locality of reference, and sometimes the reverse is true.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Here are two examples:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Dynamically allocated linked lists can reduce program performance because when you search for an item or when you traverse a list to the end, each skipped link could miss the cache or cause a page fault.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A list implementation based on simple arrays might actually be much faster because of better caching and fewer page faults even — allowing for the fact that the array would be harder to grow, it still might be faster.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Hash tables that use dynamically allocated linked lists can degrade performance.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>By extension, hash tables that use dynamically allocated linked lists to store their contents might perform substantially worse.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>In fact, in the final analysis, a simple linear search through an array might actually be faster (depending on the circumstances).</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Array-based hash tables (so-called "closed hashing") is an often-overlooked implementation which frequently has superior performance.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Sorting and Searching</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Sorting is inherently time consuming compared to many typical operations.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The best way to avoid unnecessary slowdown is to avoid sorting at critical times.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>You may be able to:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Defer sorting until a non-performance–critical time.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Sort the data at an earlier, non-performance–critical time.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Sort only the part of the data that truly needs sorting.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Sometimes, you can build the list in sorted order.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Be careful, because if you need to insert data in sorted order, you may require a more complicated data structure with poor locality of reference, leading to cache misses and page faults.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>There is no approach that works in all cases.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Try several approaches and measure the differences.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Here are some general tips for sorting:</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Use a stock sort to minimize bugs.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Any work you can do beforehand to reduce the complexity of the sort is worthwhile.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>If a one-time pass over your data simplifies the comparisons and reduces the sort from O(n log n) to O(n), you will almost certainly come out ahead.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Think about the locality of reference of the sort algorithm and the data you expect it to run on.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>There are fewer alternatives for searches than for sorting.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>If the search is time-critical, a binary search or hash table lookup is almost always best, but as with sorting, you must keep locality in mind.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A linear search through a small array can be faster than a binary search through a data structure with a lot of pointers that causes page faults or cache misses.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>MFC and Class Libraries</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The Microsoft Foundation Classes (MFC) can greatly simplify writing code.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>When writing time-critical code, you should be aware of the overhead inherent in some of the classes.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Examine the MFC code that your time-critical code uses to see if it meets your performance requirements.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The following list identifies MFC classes and functions you should be aware of:</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>MFC calls the C run-time library to allocate memory for a <bpt id="p1">[</bpt>CString<ept id="p1">](../../atl-mfc-shared/reference/cstringt-class.md)</ept> dynamically.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Generally speaking, <ph id="ph1">`CString`</ph> is as efficient as any other dynamically-allocated string.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>As with any dynamically allocated string, it has the overhead of dynamic allocation and release.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Often, a simple <ph id="ph1">`char`</ph> array on the stack can serve the same purpose and is faster.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Don't use a <ph id="ph1">`CString`</ph> to store a constant string.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`const char *`</ph> instead.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Any operation you perform with a <ph id="ph1">`CString`</ph> object has some overhead.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Using the run-time library <bpt id="p1">[</bpt>string functions<ept id="p1">](../../c-runtime-library/string-manipulation-crt.md)</ept> may be faster.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>A <bpt id="p1">[</bpt>CArray<ept id="p1">](../../mfc/reference/carray-class.md)</ept> provides flexibility that a regular array doesn't, but your program may not need that.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>If you know the specific limits for the array, you can use a global fixed array instead.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>If you use <ph id="ph1">`CArray`</ph>, use <ph id="ph2">`CArray::SetSize`</ph> to establish its size and specify the number of elements by which it grows when a reallocation is necessary.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Otherwise, adding elements can cause your array to be frequently reallocated and copied, which is inefficient and can fragment memory.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Also be aware that if you insert an item into an array, <ph id="ph1">`CArray`</ph> moves subsequent items in memory and may need to grow the array.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>These actions can cause cache misses and page faults.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>If you look through the code that MFC uses, you may see that you can write something more specific to your scenario to improve performance.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Since <ph id="ph1">`CArray`</ph> is a template, for example, you might provide <ph id="ph2">`CArray`</ph> specializations for specific types.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt>CList<ept id="p1">](../../mfc/reference/clist-class.md)</ept> is a doubly linked list, so element insertion is fast at the head, tail, and at a known position (<ph id="ph1">`POSITION`</ph>) in the list.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Looking up an element by value or index requires a sequential search, however, which can be slow if the list is long.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>If your code does not require a doubly linked list you may want to reconsider using <ph id="ph1">`CList`</ph>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Using a singly linked list saves the overhead of updating an additional pointer for all operations as well as the memory for that pointer.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The additional memory is not great, but it is another opportunity for cache misses or page faults.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>This function can generate many calls and access a lot of memory in different data areas, leading to bad locality of reference.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>It is useful for a debug build (in an ASSERT call, for example), but try to avoid using it in a release build.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Use <ph id="ph1">`PreTranslateMessage`</ph> when a particular tree of windows needs different keyboard accelerators or when you must insert message handling into the message pump.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>alters MFC dispatch messages.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>If you override <ph id="ph1">`PreTranslateMessage`</ph>, do so only at the level needed.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>For example, it is not necessary to override <ph id="ph1">`CMainFrame::PreTranslateMessage`</ph> if you are interested only in messages going to children of a particular view.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Override <ph id="ph1">`PreTranslateMessage`</ph> for the view class instead.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Do not circumvent the normal dispatch path by using <ph id="ph1">`PreTranslateMessage`</ph> to handle any message sent to any window.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>window procedures<ept id="p1">](../../mfc/registering-window-classes.md)</ept> and MFC message maps for that purpose.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Idle events can occur at times you do not expect, such as between <ph id="ph1">`WM_KEYDOWN`</ph> and <ph id="ph2">`WM_KEYUP`</ph> events.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Timers may be a more efficient way to trigger your code.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Do not force <ph id="ph1">`OnIdle`</ph> to be called repeatedly by generating false messages or by always returning <ph id="ph2">`TRUE`</ph> from an override of <ph id="ph3">`OnIdle`</ph>, which would never allow your thread to sleep.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Again, a timer or a separate thread might be more appropriate.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Shared Libraries</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Code reuse is desirable.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>However, if you are going to use someone else's code, you should make sure you know exactly what it does in those cases where performance is critical to you.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The best way to understand this is by stepping through the source code or by measuring with tools such as PView or Performance Monitor.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>Heaps</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Use multiple heaps with discretion.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Additional heaps created with <ph id="ph1">`HeapCreate`</ph> and <ph id="ph2">`HeapAlloc`</ph> let you manage and then dispose of a related set of allocations.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Don't commit too much memory.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>If you're using multiple heaps, pay special attention to the amount of memory that is initially committed.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Instead of multiple heaps, you can use helper functions to interface between your code and the default heap.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Helper functions facilitate custom allocation strategies that can improve the performance of your application.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>For example, if you frequently perform small allocations, you may want to localize these allocations to one part of the default heap.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>You can allocate a large block of memory and then use a helper function to suballocate from that block.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>If you do this, you will not have additional heaps with unused memory because the allocation is coming out of the default heap.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>In some cases, however, using the default heap can reduce locality of reference.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Use Process Viewer, Spy++, or Performance Monitor to measure the effects of moving objects from heap to heap.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Measure your heaps so you can account for every allocation on the heap.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Use the C run-time <bpt id="p1">[</bpt>debug heap routines<ept id="p1">](/visualstudio/debugger/crt-debug-heap-details)</ept> to checkpoint and dump your heap.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>You can read the output into a spreadsheet program like Microsoft Excel and use pivot tables to view the results.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Note the total number, size, and distribution of allocations.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Compare these with the size of working sets.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Also look at the clustering of related-sized objects.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>You can also use the performance counters to monitor memory usage.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Threads</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>For background tasks, effective idle handling of events may be faster than using threads.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>It's easier to understand locality of reference in a single-threaded program.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A good rule of thumb is to use a thread only if an operating system notification that you block on is at the root of the background work.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Threads are the best solution in such a case because it is impractical to block a main thread on an event.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>Threads also present communication problems.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>You must manage the communication link between your threads, with a list of messages or by allocating and using shared memory.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Managing the communication link usually requires synchronization to avoid race conditions and deadlock problems.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>This complexity can easily turn into bugs and performance problems.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Idle Loop Processing<ept id="p1">](../../mfc/idle-loop-processing.md)</ept> and <bpt id="p2">[</bpt>Multithreading<ept id="p2">](../../parallel/multithreading-support-for-older-code-visual-cpp.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Small Working Set</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Smaller working sets mean better locality of reference, fewer page faults, and more cache hits.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The process working set is the closest metric the operating system directly provides for measuring locality of reference.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>To set the upper and lower limits of the working set, use <bpt id="p1">[</bpt>SetProcessWorkingSetSize<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms683226.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>To get the upper and lower limits of the working set, use <bpt id="p1">[</bpt>GetProcessWorkingSetSize<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/ms686234.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>To view the size of the working set, use Spy++.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Optimizing Your Code</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>