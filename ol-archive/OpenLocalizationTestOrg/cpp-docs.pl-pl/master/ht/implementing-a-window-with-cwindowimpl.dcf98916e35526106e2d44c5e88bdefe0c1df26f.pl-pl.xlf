<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ca4d7d80a1dc9883cd2aeb13242f6959c0cb88aa</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\atl\implementing-a-window-with-cwindowimpl.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0d72e34058bbcefb17e25df257eea0ad9ce184b0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c0aad75b6587d1f8faa361a64d8fd6205c5e5bef</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Implementing a Window with CWindowImpl | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Implementing a Window with CWindowImpl</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>To implement a window, derive a class from <ph id="ph1">`CWindowImpl`</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>In your derived class, declare a message map and the message handler functions.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>You can now use your class in three different ways:</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Create a window based on a new Windows class</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Superclass an existing Windows class</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Subclass an existing window</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Creating a Window Based on a New Windows Class</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>contains the <bpt id="p1">[</bpt>DECLARE_WND_CLASS<ept id="p1">](http://msdn.microsoft.com/library/55247a72-fb9e-4bde-87f3-747c08076971)</ept> macro to declare Windows class information.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This macro implements the <ph id="ph1">`GetWndClassInfo`</ph> function, which uses <bpt id="p1">[</bpt>CWndClassInfo<ept id="p1">](../atl/reference/cwndclassinfo-class.md)</ept> to define the information of a new Windows class.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">`CWindowImpl::Create`</ph> is called, this Windows class is registered and a new window is created.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>passes <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept> to the <ph id="ph1">`DECLARE_WND_CLASS`</ph> macro, which means ATL will generate a Windows class name.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>To specify your own name, pass a string to <ph id="ph1">`DECLARE_WND_CLASS`</ph> in your <ph id="ph2">`CWindowImpl`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Following is an example of a class that implements a window based on a new Windows class:</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#64</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>To create a window, create an instance of <ph id="ph1">`CMyWindow`</ph> and then call the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To override the default Windows class information, implement the <ph id="ph1">`GetWndClassInfo`</ph> method in your derived class by setting the <ph id="ph2">`CWndClassInfo`</ph> members to the appropriate values.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Superclassing an Existing Windows Class</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>DECLARE_WND_SUPERCLASS<ept id="p1">](http://msdn.microsoft.com/library/650337b6-4973-41e5-8c36-55f90327bdcd)</ept> macro allows you to create a window that superclasses an existing Windows class.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Specify this macro in your <ph id="ph1">`CWindowImpl`</ph>-derived class.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Like any other ATL window, messages are handled by a message map.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>When you use <ph id="ph1">`DECLARE_WND_SUPERCLASS`</ph>, a new Windows class will be registered.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This new class will be the same as the existing class you specify, but will replace the window procedure with <ph id="ph1">`CWindowImpl::WindowProc`</ph> (or with your function that overrides this method).</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Following is an example of a class that superclasses the standard Edit class:</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>NVC_ATL_Windowing#65</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>To create the superclassed Edit window, create an instance of <ph id="ph1">`CMyEdit`</ph> and then call the <bpt id="p1">**</bpt>Create<ept id="p1">**</ept> method.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Subclassing an Existing Window</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>To subclass an existing window, derive a class from <ph id="ph1">`CWindowImpl`</ph> and declare a message map, as in the two previous cases.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Note, however, that you do not specify any Windows class information, since you will subclass an already existing window.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Instead of calling <bpt id="p1">**</bpt>Create<ept id="p1">**</ept>, call <ph id="ph1">`SubclassWindow`</ph> and pass it the handle to the existing window you want to subclass.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Once the window is subclassed, it will use <ph id="ph1">`CWindowImpl::WindowProc`</ph> (or your function that overrides this method) to direct messages to the message map.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>To detach a subclassed window from your object, call <ph id="ph1">`UnsubclassWindow`</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The window's original window procedure will then be restored.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Implementing a Window</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>