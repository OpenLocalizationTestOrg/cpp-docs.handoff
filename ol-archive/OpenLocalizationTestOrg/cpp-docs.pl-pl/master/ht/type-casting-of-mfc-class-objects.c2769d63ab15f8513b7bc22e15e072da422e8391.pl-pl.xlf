<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">bccc76c43a9921d06d062e43ad5f5ad9ee7e19c0</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\mfc\reference\type-casting-of-mfc-class-objects.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">03f087fe38b8442a80d3f24683911b6b150b878a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99f6c7136ee53da4f3c4ce2472f8c71fed9318eb</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Type Casting of MFC Class Objects | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Type Casting of MFC Class Objects</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Type casting macros provide a way to cast a given pointer to a pointer that points to an object of specific class, with or without checking that the cast is legal.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>The following table lists the MFC type casting macros.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Macros That Cast Pointers to MFC Class Objects</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>DYNAMIC_DOWNCAST</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Casts a pointer to a pointer to a class object while checking to see if the cast is legal.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>STATIC_DOWNCAST</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Casts a pointer to an object from one class to a pointer of a related type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>In a debug build, causes an <bpt id="p1">**</bpt>ASSERT<ept id="p1">**</ept> if the object is not a "kind of" the target type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>DYNAMIC_DOWNCAST</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Provides a handy way to cast a pointer to a pointer to a class object while checking to see if the cast is legal.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The name of a class.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>A pointer to be cast to a pointer to an object of type <ph id="ph1">`class`</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The macro will cast the <ph id="ph1">`pointer`</ph> parameter to a pointer to an object of the <ph id="ph2">`class`</ph> parameter's type.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the object referenced by the pointer is a "kind of" the identified class, the macro returns the appropriate pointer.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>If it is not a legal cast, the macro returns <bpt id="p1">**</bpt>NULL<ept id="p1">**</ept>.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>STATIC_DOWNCAST</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Casts <bpt id="p1">*</bpt>pobject<ept id="p1">*</ept> to a pointer to a <bpt id="p2">*</bpt>class_name<ept id="p2">*</ept> object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>class_name</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The name of the class being cast to.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>pobject</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The pointer to be cast to a pointer to a <bpt id="p1">*</bpt>class_name<ept id="p1">*</ept> object.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><bpt id="p1">*</bpt>pobject<ept id="p1">*</ept> must either be <bpt id="p2">**</bpt>NULL<ept id="p2">**</ept>, or point to an object of a class which is derived directly, or indirectly, from <bpt id="p3">*</bpt>class_name<ept id="p3">*</ept>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>In builds of your application with the <bpt id="p1">**</bpt>_DEBUG<ept id="p1">**</ept> preprocessor symbol defined, the macro will <bpt id="p2">**</bpt>ASSERT<ept id="p2">**</ept> if <bpt id="p3">*</bpt>pobject<ept id="p3">*</ept> is not <bpt id="p4">**</bpt>NULL<ept id="p4">**</ept>, or if it points to an object that is not a "kind of" the class specified in the <bpt id="p5">*</bpt>class_name<ept id="p5">*</ept> parameter (see <bpt id="p6">[</bpt>CObject::IsKindOf<ept id="p6">](../../mfc/reference/cobject-class.md#cobject__iskindof)</ept>).</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In non- <bpt id="p1">**</bpt>_DEBUG<ept id="p1">**</ept> builds, the macro performs the cast without any type checking.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The class specified in the <bpt id="p1">*</bpt>class_name<ept id="p1">*</ept> parameter must be derived from <ph id="ph1">`CObject`</ph> and must use the <ph id="ph2">`DECLARE_DYNAMIC`</ph> and <ph id="ph3">`IMPLEMENT_DYNAMIC`</ph>, the <ph id="ph4">`DECLARE_DYNCREATE`</ph> and <ph id="ph5">`IMPLEMENT_DYNCREATE`</ph>, or the <ph id="ph6">`DECLARE_SERIAL`</ph> and <ph id="ph7">`IMPLEMENT_SERIAL`</ph> macros as explained in the article <bpt id="p2">[</bpt>CObject Class: Deriving a Class from CObject<ept id="p2">](../../mfc/deriving-a-class-from-cobject.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>For example, you might cast a pointer to <ph id="ph1">`CMyDoc`</ph>, called <ph id="ph2">`pMyDoc`</ph>, to a pointer to <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept> using this expression:</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>NVC_MFCDocView#197</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`pMyDoc`</ph> does not point to an object derived directly or indirectly from <bpt id="p1">**</bpt>CDocument<ept id="p1">**</ept>, the macro will <bpt id="p2">**</bpt>ASSERT<ept id="p2">**</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Macros and Globals</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>