<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">abf7f16204b376a34845408dabbc6a0e2392c8ee</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\regex-functions.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3bd31ec133a2a1791ab3c41e721e346665e02d18</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0bc688a5392bc229545dd0e379ffc10c2a92b136</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>regex<ph id="ph1">&amp;gt;</ph> functions | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>regex<ph id="ph1">&amp;gt;</ph> functions</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>regex_match Function</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>regex_replace Function</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>regex_search Function</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>swap Function</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>regex_match Function</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Tests whether a regular expression matches the entire target string.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>The iterator type for submatches.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>For common cases this one of string::const_iterator, wstring::const_iterator, const char* or const wchar_t<ph id="ph1">\*</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>The match results allocator class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The type of elements to match.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>For common cases this is string, wstring, char* or wchar_t<ph id="ph1">\*</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Traits class for elements.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The regular expression allocator class.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The string traits class.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The string allocator class.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Flags for matches.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Beginning of sequence to match.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>End of sequence to match.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The match results.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Corresponds to Elem type: <bpt id="p1">[</bpt>smatch<ept id="p1">](../standard-library/regex-typedefs.md#smatch_typedef)</ept> for string, <bpt id="p2">[</bpt>wsmatch<ept id="p2">](../standard-library/regex-typedefs.md#wsmatch_typedef)</ept> for wstring, <bpt id="p3">[</bpt>cmatch<ept id="p3">](../standard-library/regex-typedefs.md#cmatch_typedef)</ept> for char* or <bpt id="p4">[</bpt>wcmatch<ept id="p4">](../standard-library/regex-typedefs.md#wcmatch_typedef)</ept> for wchar_t<ph id="ph1">\*</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Pointer to beginning of sequence to match.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If ptr is char*, then use cmatch and regex.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>If ptr is wchar_t<ph id="ph1">\*</ph> then use wcmatch and wregex.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The regular expression to match.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Type <ph id="ph1">`regex`</ph> for string and char*, or <ph id="ph2">`wregex`</ph> for wstring and wchar_t<ph id="ph3">\*</ph>.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>String to match.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Corresponds to the type of Elem.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Each template function returns true only if the entire operand sequence <ph id="ph1">`str`</ph> exactly matches the regular expression argument <ph id="ph2">`re`</ph>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>regex_search<ept id="p1">](../standard-library/regex-functions.md#regex_search_function)</ept> to match a substring within a target sequence and regex_iterator to find multiple matches.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The functions that take a <ph id="ph1">`match_results`</ph> object set its members to reflect whether the match succeeded and if so what the various capture groups in the regular expression captured.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The functions that take a <ph id="ph1">`match_results`</ph> object set its members to reflect whether the match succeeded and if so what the various capture groups in the regular expression captured.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>(1):</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>regex_replace Function</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Replaces matched regular expressions.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The iterator type for replacements.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>The iterator type for submatches.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Traits class for elements.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The regular expression allocator class.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The type of elements to match.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Flags for matches.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Beginning of sequence to match.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The format for replacements.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>End of sequence to match.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The output iterator.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The regular expression to match.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>String to match.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The first function constructs a <bpt id="p1">[</bpt>regex_iterator Class<ept id="p1">](../standard-library/regex-iterator-class.md)</ept> object <ph id="ph1">`iter(first, last, re, flags)`</ph> and uses it to split its input range <ph id="ph2">`[first, last)`</ph> into a series of subsequences <ph id="ph3">`T0M0T1M1...TN-1MN-1TN`</ph>, where <ph id="ph4">`Mn`</ph> is the <ph id="ph5">`nth`</ph> match detected by the iterator.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>If no matches are found, <ph id="ph1">`T0`</ph> is the entire input range and <ph id="ph2">`N`</ph> is zero.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`(flags &amp; format_first_only) != 0`</ph> only the first match is used, <ph id="ph2">`T1`</ph> is all of the input text that follows the match, and <ph id="ph3">`N`</ph> is 1.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For each <ph id="ph1">`i`</ph> in the range <ph id="ph2">`[0, N)`</ph>, if <ph id="ph3">`(flags &amp; format_no_copy) == 0`</ph> it copies the text in the range <ph id="ph4">`Ti`</ph> to the iterator <ph id="ph5">`out`</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>It then calls <ph id="ph1">`m.format(out, fmt, flags)`</ph>, where <ph id="ph2">`m`</ph> is the <ph id="ph3">`match_results`</ph> object returned by the iterator object <ph id="ph4">`iter`</ph> for the subsequence <ph id="ph5">`Mi`</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Finally, if <ph id="ph1">`(flags &amp; format_no_copy) == 0`</ph> it copies the text in the range <ph id="ph2">`TN`</ph> to the iterator <ph id="ph3">`out`</ph>.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The function returns <ph id="ph1">`out`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The second function constructs a local variable <ph id="ph1">`result`</ph> of type <ph id="ph2">`basic_string&lt;charT&gt;`</ph> and calls <ph id="ph3">`regex_replace(back_inserter(result), str.begin(), str.end(), re, fmt, flags)`</ph>.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>It returns <ph id="ph1">`result`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>regex_search Function</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Searches for a regular expression match.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The iterator type for submatches.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>The match results allocator class.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The type of elements to match.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Traits class for elements.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The regular expression allocator class.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The string traits class.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The string allocator class.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Flags for matches.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Beginning of sequence to match.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>End of sequence to match.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>The match results.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Pointer to beginning of sequence to match.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The regular expression to match.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>String to match.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Each template function returns true only if a search for its regular expression argument <ph id="ph1">`re`</ph> in its operand sequence succeeds.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The functions that take a <ph id="ph1">`match_results`</ph> object set its members to reflect whether the search succeeded and if so what the various capture groups in the regular expression captured.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>swap Function</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Swaps two basic_regex or match_results objects.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>The type of elements to match.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Traits class for elements.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The template functions swap the contents of their respective arguments in constant time and do not throw exceptions.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>regex&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>