<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">38de32e5f221dca8e1ac302c12040db6530aa2e4</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\build\troubleshooting-c-cpp-isolated-applications-and-side-by-side-assemblies.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8f7c97d9f2ccdb5686187c3f551e4d8b7d0f5e7a</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a1c796bd8cd59820e6242c012878be0c24b1104c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Troubleshooting C-C++ Isolated Applications and Side-by-side Assemblies | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Troubleshooting C/C++ Isolated Applications and Side-by-side Assemblies</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Loading a C/C++ application can fail if dependent libraries cannot be found.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>This article describes some common reasons why a C/C++ application fails to load, and suggests steps to resolve the problems.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>If an application fails to load because it has a manifest that specifies a dependency on a side-by-side assembly, and the assembly is not installed as a private assembly in the same folder as the executable nor in the native assembly cache in the %WINDIR%\WinSxS\ folder, one of the following error messages might be displayed, depending on the version of Windows on which you try to run the app.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>The application failed to initialize properly (0xc0000135).</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>This application has failed to start because the application configuration is incorrect.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Reinstalling the application may fix this problem.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The system cannot execute the specified program.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>If your application has no manifest and depends on a DLL that Windows can’t find in the typical search locations, an error message that resembles this one might be displayed:</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>This application has failed to start because <bpt id="p1">*</bpt>a required DLL<ept id="p1">*</ept> was not found.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Re-installing the application may fix this problem.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If your application is deployed on a computer that doesn't have Visual Studio, and it crashes with error messages that resemble the previous ones, check these things:</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Follow the steps that are described in <bpt id="p1">[</bpt>Understanding the Dependencies of a Visual C++ Application<ept id="p1">](../ide/understanding-the-dependencies-of-a-visual-cpp-application.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>The dependency walker can show most dependencies for an application or DLL.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>If you observe that some DLLs are missing, install them on the computer on which you are trying to run your application.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The operating system loader uses the application manifest to load assemblies that the application depends on.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The manifest can either be embedded in the binary as a resource, or installed as a separate file in the application folder.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>To check whether the manifest is embedded in the binary, open the binary in <ph id="ph1">[!INCLUDE[vsprvs](../assembler/masm/includes/vsprvs_md.md)]</ph> and look for RT_MANIFEST in its list of resources.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>If you can't find an embedded manifest, look in the application folder for a file that's named something like &lt;binary_name&gt;.<ph id="ph1">\&lt;</ph>extension&gt;.manifest.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>If your application depends on side-by-side assemblies and a manifest is not present, you have to ensure that the linker generates a manifest for your project.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Check the linker option <bpt id="p1">**</bpt>Generate manifest<ept id="p1">**</ept> in the <bpt id="p2">**</bpt>Project Properties<ept id="p2">**</ept> dialog box for the project.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>If the manifest is embedded in the binary, ensure that the ID of RT_MANIFEST is correct for this type of the binary.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>For more information about which resource ID to use, see <bpt id="p1">[</bpt>Using Side-by-Side Assemblies as a Resource (Windows)<ept id="p1">](http://msdn.microsoft.com/library/windows/desktop/aa376617.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>If the manifest is in a separate file, open it in an XML editor or text editor.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>For more information about manifests and rules for deployment, see <bpt id="p1">[</bpt>Manifests<ept id="p1">](http://msdn.microsoft.com/library/aa375365)</ept>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>If both an embedded manifest and a separate manifest file are present, the operating system loader uses the embedded manifest and ignores the separate file.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>However, on Windows XP, the opposite is true—the separate manifest file is used and the embedded manifest is ignored.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>We recommend that you embed a manifest in every DLL because external manifests are ignored when a DLL is loaded though a <ph id="ph1">`LoadLibrary`</ph> call.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>For more information, see <bpt id="p1">[</bpt>Assembly manifests<ept id="p1">](http://msdn.microsoft.com/library/aa374219)</ept>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Check that all assemblies that are enumerated in the manifest are correctly installed on the computer.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Each assembly is specified in the manifest by its name, version number, and processor architecture.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>If your application depends on side-by-side assemblies, check that these assemblies are correctly installed on the computer so that the operating system loader can find them, as described in <bpt id="p1">[</bpt>Assembly Searching Sequence<ept id="p1">](http://msdn.microsoft.com/library/aa374224)</ept>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Remember that 64-bit assemblies cannot be loaded in 32-bit processes and cannot be executed on 32-bit operating systems.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Assume we have an application, appl.exe, that's built by using <ph id="ph1">[!INCLUDE[vcprvc](../build/includes/vcprvc_md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The application manifest either is embedded in appl.exe as the binary resource RT_MANIFEST, which has an ID equal to 1, or is stored as the separate file appl.exe.manifest.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The content of this manifest resembles this:</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>To the operating system loader, this manifest says that appl.exe depends on an assembly named Fabrikam.SxS.Library, version 2.0.20121.0, that's built for a 32-bit x86 processor architecture.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The dependent side-by-side assembly can be installed either as a shared assembly or as a private assembly.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The assembly manifest for a shared assembly is installed in the %WINDIR%\WinSxS\Manifests\ folder.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>It identifies the assembly and lists its contents—that is, the DLLs that are part of the assembly:</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Side-by-side assemblies can also use <bpt id="p1">[</bpt>publisher configuration files<ept id="p1">](http://msdn.microsoft.com/library/aa375682)</ept>—also known as policy files—to globally redirect applications and assemblies to use one version of a side-by-side assembly instead of another version of the same assembly.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>You can check the policies for a shared assembly in the %WINDIR%\WinSxS\Policies\ folder.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Here is an example policy file:</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>This policy file specifies that any application or assembly that asks for version 2.0.10000.0 of this assembly should instead use version 2.0.20121.0, which is the current version that's installed on the system.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>If a version of the assembly that's mentioned in the application manifest is specified in the policy file, the loader looks for a version of this assembly that's specified in the manifest in the %WINDIR%\WinSxS\ folder, and if this version is not installed, load fails.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>And if assembly version 2.0.20121.0 is not installed, load fails for applications that ask for assembly version 2.0.10000.0.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>However, the assembly can also be installed as a private side-by-side assembly in the installed application folder.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>If the operating system fails to find the assembly as a shared assembly, it looks for it as a private assembly, in the following order:</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Check the application folder for a manifest file that has the name <ph id="ph1">\&lt;</ph>assemblyName&gt;.manifest.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>In this example, the loader tries to find Fabrikam.SxS.Library.manifest in the folder that contains appl.exe.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>If it finds the manifest, the loader loads the assembly from the application folder.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>If the assembly is not found, load fails.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>Try to open the <ph id="ph1">\\</ph>&lt;assemblyName<ph id="ph2">\&gt;</ph>\ folder in the folder that contains appl.exe, and if <ph id="ph3">\\</ph>&lt;assemblyName<ph id="ph4">\&gt;</ph>\ exists, try to load a manifest file that has the name <ph id="ph5">\&lt;</ph>assemblyName&gt;.manifest from this folder.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>If the manifest is found, the loader loads the assembly from the <ph id="ph1">\\</ph>&lt;assemblyName<ph id="ph2">\&gt;</ph>\ folder.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>If the assembly is not found, load fails.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>For more information about how the loader searches for dependent assemblies, see <bpt id="p1">[</bpt>Assembly Searching Sequence<ept id="p1">](http://msdn.microsoft.com/library/aa374224)</ept>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>If the loader fails to find a dependent assembly as a private assembly, load fails and the message "The system cannot execute the specified program" is displayed.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>To resolve this error, make sure that dependent assemblies—and DLLs that are part of them—are installed on the computer as either private or shared assemblies.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Concepts of Isolated Applications and Side-by-side Assemblies</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Building C/C++ Isolated Applications and Side-by-side Assemblies</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>