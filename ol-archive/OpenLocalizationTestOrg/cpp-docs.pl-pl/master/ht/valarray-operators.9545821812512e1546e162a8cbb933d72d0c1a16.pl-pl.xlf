<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="pl-pl">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-787e512" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c2d2d523f8085db02336be1efc80f34b5cf62b27</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">docs\standard-library\valarray-operators.md</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39ada0543686fd5c51db0e5ed7a449a469a76335</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d9a314035c05b573e1d052fa4c8ed061d88c6488</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>valarray<ph id="ph1">&amp;gt;</ph> operators | Microsoft Docs</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>valarray<ph id="ph1">&amp;gt;</ph> operators</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>operator!=</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>operator%</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>operator*</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>operator+</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>operator-</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>operator/</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>operator==</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>operator^</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>[operator</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>](#operator_or)</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>[operator</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>](#operator_lor)</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>operator!=</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Tests whether the corresponding elements of two equally sized valarrays are unequal or whether all the elements of a valarray are unequal a specified value.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The first of the two valarrays whose elements are to be tested for inequality.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The second of the two valarrays whose elements are to be tested for inequality.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>A valarray of Boolean values, each of which is:</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the corresponding elements are unequal.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>false<ept id="p1">**</ept> if the corresponding elements are not unequal.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The first template operator returns an object of class <bpt id="p1">[</bpt>valarray<ph id="ph1">\&lt;</ph>bool&gt;<ept id="p1">](../standard-library/valarray-bool-class.md)</ept>, each of whose elements <ph id="ph2">`I`</ph> is <ph id="ph3">` left`</ph>[ <ph id="ph4">`I`</ph>] != <ph id="ph5">` right`</ph>[ <ph id="ph6">`I`</ph>].</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The second template operator stores in element <bpt id="p1">*</bpt>I  left<ept id="p1">*</ept>[ <ph id="ph1">`I`</ph>] != _ <bpt id="p2">*</bpt>Right<ept id="p2">*</ept>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The third template operator stores in element <bpt id="p1">*</bpt>I  left<ept id="p1">*</ept> != <ph id="ph1">` right`</ph>[ <ph id="ph2">`I`</ph>].</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>operator%</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Obtains the remainder of dividing the corresponding elements of two equally sized valarrays or of dividing a valarray by a specified value or of dividing a specified value by a valarray.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A value or valarray that serves as the dividend into which another value or valarray is to be divided.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>A value or valarray that serves as the divisor and that divides another value or valarray.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise remainders of <ph id="ph1">` left`</ph> divided by</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Obtains the bitwise <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the element type.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The first of the two valarrays whose respective elements are to be combined with the bitwise <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> or a specified value of the element type to be combined bitwise with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>The second of the two valarrays whose respective elements are to be combined with the bitwise <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> or a specified value of the element type to be combined bitwise with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise combination of the bitwise AND operation of <ph id="ph1">` left`</ph> and</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>A bitwise operation can only be used to manipulate bits in <ph id="ph1">`char`</ph> and <ph id="ph2">`int`</ph> data types and variants and not on <bpt id="p1">**</bpt>float<ept id="p1">**</ept>, <bpt id="p2">**</bpt>double<ept id="p2">**</ept>, <bpt id="p3">**</bpt>longdouble<ept id="p3">**</ept>, <ph id="ph3">`void``bool`</ph> or other, more complex data types.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The bitwise <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> has the same truth table as the logical <bpt id="p2">**</bpt>AND<ept id="p2">**</ept> but applies to the data type on the level of the individual bits.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">[</bpt>operator&amp;&amp;<ept id="p1">](../standard-library/valarray-operators.md#operator_amp__amp_)</ept> applies on an element level, counting all nonzero values as true, and the result is a valarray of Boolean values.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The bitwise <bpt id="p1">**</bpt>ANDoperator&amp;<ept id="p1">**</ept>, by contrast, can result in a valarray of values other than 0 or 1, depending on outcome of the bitwise operation.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>Obtains the logical <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the valarray's element type.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The first of the two valarrays whose respective elements are to be combined with the logical <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> or a specified value of the element type to be combined with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>The second of the two valarrays whose respective elements are to be combined with the logical <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> or a specified value of the element type to be combined with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are of type bool and are the element-wise combination of the logical <bpt id="p1">**</bpt>AND<ept id="p1">**</ept> operation of <ph id="ph1">` left`</ph> and</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The logical <bpt id="p1">**</bpt>ANDoperator&amp;&amp;<ept id="p1">**</ept> applies on an element level, counting all nonzero values as true, and the result is a valarray of Boolean values.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The bitwise version of <bpt id="p1">**</bpt>AND<ept id="p1">**</ept>, <bpt id="p2">[</bpt>operator&amp;,<ept id="p2">](../standard-library/valarray-operators.md#operator_amp_)</ept>, by contrast, can result in a valarray of values other than 0 or 1, depending on the outcome of the bitwise operation.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Tests whether the elements of one valarray are greater than the elements of an equally sized valarray or whether all the elements of a valarray are greater or less than a specified value.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The first of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The second of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>A valarray of Boolean values, each of which is:</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the <ph id="ph1">` left`</ph> element or value is greater than the corresponding <ph id="ph2">` right`</ph> element or value.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>false<ept id="p1">**</ept> if the <ph id="ph1">` left`</ph> element or value is not greater than the corresponding <ph id="ph2">` right`</ph> element or value.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>If the number of elements in two valarrays is not equal, the result is undefined.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Tests whether the elements of one valarray are greater than or equal to the elements of an equally sized valarray or whether all the elements of a valarray are greater than or equal to or less than or equal to a specified value.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>The first of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The second of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>A valarray of Boolean values, each of which is:</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the <ph id="ph1">` left`</ph> element or value is greater than or equal to the corresponding <ph id="ph2">` right`</ph> element or value.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>false<ept id="p1">**</ept> if the <ph id="ph1">` left`</ph> element or value is less than the corresponding <ph id="ph2">` right`</ph> element or value.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>If the number of elements in two valarrays is not equal, the result is undefined.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Right-shifts the bits for each element of a valarray a specified number of positions or by an element-wise amount specified by a second valarray.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The value to be shifted or the valarray whose elements are to be shifted.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The value indicating the amount of right shift or valarray whose elements indicate the element-wise amount of right shift.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>A valarray whose elements have been shifted right by the specified amount.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Signed numbers have their signs preserved.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Tests whether the elements of one valarray are less than the elements of an equally sized valarray or whether all the elements of a valarray are greater or less than a specified value.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The first of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>The second of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>A valarray of Boolean values, each of which is:</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the <ph id="ph1">` left`</ph> element or value is less than the corresponding <ph id="ph2">` right`</ph> element or value.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>false<ept id="p1">**</ept> if the <ph id="ph1">` left`</ph> element or value is not less than the corresponding <ph id="ph2">` right`</ph> element or value.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>If the number of elements two valarrays is not equal, the result is undefined.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Tests whether the elements of one valarray are less than or equal to the elements of an equally sized valarray or whether all the elements of a valarray are greater than or equal to or less than or equal to a specified value.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The first of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>The second of the two valarrays whose elements are to be compared or a specified value to be compared with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>A valarray of Boolean values, each of which is:</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the <ph id="ph1">` left`</ph> element or value is less than or equal to the corresponding <ph id="ph2">` right`</ph> element or value.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>false<ept id="p1">**</ept> if the <ph id="ph1">` left`</ph> element or value is greater than the corresponding <ph id="ph2">` right`</ph> element or value.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>If the number of elements two valarrays is not equal, the result is undefined.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>operator</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>Left shifts the bits for each element of a valarray a specified number of positions or by an element-wise amount specified by a second valarray.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>The value to be shifted or the valarray whose elements are to be shifted.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>The value indicating the amount of left shift or valarray whose elements indicate the element-wise amount of left shift.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>A valarray whose elements have been shifted left by the specified amount.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Signed numbers have their signs preserved.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>operator*</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Obtains the element-wise product between corresponding elements of two equally sized valarrays or of between a valarray a specified value.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The first of the two valarrays whose elements are to be multiplied or a specified value to be multiplied with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>The second of the two valarrays whose elements are to be multiplied or a specified value to be multiplied with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise product of <ph id="ph1">` left`</ph> and</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>operator+</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Obtains the element-wise sum between corresponding elements of two equally sized valarrays or of between a valarray a specified value.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>The first of the two valarrays whose elements are to be added or a specified value to be added with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The second of the two valarrays whose elements are to be added or a specified value to be added with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise sum of <ph id="ph1">` left`</ph> and</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>operator-</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Obtains the element-wise difference between corresponding elements of two equally sized valarrays or of between a valarray a specified value.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>A value or valarray that serves as the minuend from which other values or valarrays are to be subtracted in forming the difference.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>A value or valarray that serves as the subtrahend that is to be subtracted from other values or valarrays in forming the difference.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise difference of <ph id="ph1">` left`</ph> and</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The arithmetic terminology used in describing a subtraction:</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>difference = minuend - subtrahend</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>operator/</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Obtains the element-wise quotient between corresponding elements of two equally sized valarrays or of between a valarray a specified value.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>A value or valarray that serves as the dividend into which another value or valarray is to be divided in forming the quotient.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>A value or valarray that serves as the divisor and that divides another value or valarray in forming the quotient.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise quotient of <ph id="ph1">` left`</ph> divided by</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The arithmetic terminology used in describing a division:</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>quotient = dividend / divisor</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>operator==</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Tests whether the corresponding elements of two equally sized valarrays are equal or whether all the elements of a valarray are equal a specified value.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>The first of the two valarrays whose elements are to be tested for equality.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>The second of the two valarrays whose elements are to be tested for equality.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>A valarray of Boolean values, each of which is:</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>true<ept id="p1">**</ept> if the corresponding elements are equal.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>false<ept id="p1">**</ept> if the corresponding elements are not equal.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>The first template operator returns an object of class <bpt id="p1">[</bpt>valarray<ph id="ph1">\&lt;</ph>bool&gt;<ept id="p1">](../standard-library/valarray-bool-class.md)</ept>, each of whose elements <ph id="ph2">`I`</ph> is _ <bpt id="p2">*</bpt>Left<ept id="p2">*</ept>[ <ph id="ph3">`I`</ph>] == <ph id="ph4">\_</ph> <bpt id="p3">*</bpt>Right<ept id="p3">*</ept>[ <ph id="ph5">`I`</ph>].</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>The second template operator stores in element <ph id="ph1">`I`` left`</ph>[ <ph id="ph2">`I`</ph>] == <ph id="ph3">\_</ph> <bpt id="p1">*</bpt>Right<ept id="p1">*</ept>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The third template operator stores in element <ph id="ph1">`I`` left` == ` right`</ph>[ <ph id="ph2">`I`</ph>].</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>operator^</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Obtains the bitwise exclusive <ph id="ph1">`OR`</ph> ( <bpt id="p1">**</bpt>XOR<ept id="p1">**</ept>) between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the element type.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>The first of the two valarrays whose respective elements are to be combined with the bitwise <bpt id="p1">**</bpt>XOR<ept id="p1">**</ept> or a specified value of the element type to be combined bitwise with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>The second of the two valarrays whose respective elements are to be combined with the bitwise <bpt id="p1">**</bpt>XOR<ept id="p1">**</ept> or a specified value of the element type to be combined bitwise with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise combination of the bitwise <bpt id="p1">**</bpt>XOR<ept id="p1">**</ept> operation of <ph id="ph1">` left`</ph> and</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>A bitwise operation can only be used to manipulate bits in <ph id="ph1">`char`</ph> and <ph id="ph2">`int`</ph> data types and variants and not on <bpt id="p1">**</bpt>float<ept id="p1">**</ept>, <bpt id="p2">**</bpt>double<ept id="p2">**</ept>, <ph id="ph3">`long double`</ph>, <ph id="ph4">`void``bool`</ph> or other, more complex data types.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>The bitwise exclusive <ph id="ph1">`OR`</ph> ( <bpt id="p1">**</bpt>XOR<ept id="p1">**</ept>) has the following semantics: Given bits <bpt id="p2">*</bpt>b<ept id="p2">*</ept>1 and <bpt id="p3">*</bpt>b<ept id="p3">*</ept>2, <bpt id="p4">*</bpt>b<ept id="p4">*</ept>1 <bpt id="p5">**</bpt>XOR<ept id="p5">**</ept> <bpt id="p6">*</bpt>b<ept id="p6">*</ept>2 is <bpt id="p7">**</bpt>true<ept id="p7">**</ept> if exactly one of the bits is true; <bpt id="p8">**</bpt>false<ept id="p8">**</ept> if both bits are false or if both bits are true.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>operator&amp;#124;</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>Obtains the bitwise <ph id="ph1">`OR`</ph> between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the element type.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>The first of the two valarrays whose respective elements are to be combined with the bitwise <ph id="ph1">`OR`</ph> or a specified value of the element type to be combined bitwise with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>The second of the two valarrays whose respective elements are to be combined with the bitwise <ph id="ph1">`OR`</ph> or a specified value of the element type to be combined bitwise with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are the element-wise combination of the bitwise <ph id="ph1">`OR`</ph> operation of <ph id="ph2">` left`</ph> and</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>A bitwise operation can only be used to manipulate bits in <ph id="ph1">`char`</ph> and <ph id="ph2">`int`</ph> data types and variants and not on <bpt id="p1">**</bpt>float<ept id="p1">**</ept>, <bpt id="p2">**</bpt>double<ept id="p2">**</ept>, <bpt id="p3">**</bpt>longdouble<ept id="p3">**</ept>, <ph id="ph3">`void`</ph>, <ph id="ph4">`bool`</ph> or other, more complex data types.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>The bitwise OR has the same truth table as the logical <ph id="ph1">`OR`</ph>, but applies to the data type on the level of the individual bits.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Given bits <bpt id="p1">*</bpt>b<ept id="p1">*</ept>1 and <bpt id="p2">*</bpt>b<ept id="p2">*</ept>2, <bpt id="p3">*</bpt>b<ept id="p3">*</ept>1 <ph id="ph1">`OR`</ph> <bpt id="p4">*</bpt>b<ept id="p4">*</ept>2 is <bpt id="p5">**</bpt>true<ept id="p5">**</ept> if at least one of the bits is true or <bpt id="p6">**</bpt>false<ept id="p6">**</ept> if both bits are false.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>The logical <ph id="ph1">`OR`</ph><bpt id="p1">[</bpt>operator&amp;#124;&amp;#124;<ept id="p1">](../standard-library/valarray-operators.md#operator_lor)</ept> applies on an element level, counting all nonzero values as <bpt id="p2">**</bpt>true<ept id="p2">**</ept>, and the result is a valarray of Boolean values.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>The bitwise OR <ph id="ph1">`operator|`</ph>, by contrast, can result in a valarray of values other than 0 or 1, depending on the outcome of the bitwise operation.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>operator&amp;#124;&amp;#124;</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Obtains the logical <ph id="ph1">`OR`</ph> between corresponding elements of two equally sized valarrays or between a valarray and a specified value of the valarray element type.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Parameters</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>The first of the two valarrays whose respective elements are to be combined with the logical <ph id="ph1">`OR`</ph> or a specified value of the element type to be combined with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>The second of the two valarrays whose respective elements are to be combined with the logical <ph id="ph1">`OR`</ph> or a specified value of the element type to be combined with each element of a valarray.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Return Value</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>A valarray whose elements are of type <ph id="ph1">`bool`</ph> and are the element-wise combination of the logical OR operation of <ph id="ph2">` left`</ph> and</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Remarks</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>The logical <ph id="ph1">`OR``operator||`</ph> applies on an element level, counting all nonzero values as <bpt id="p1">**</bpt>true<ept id="p1">**</ept>, and the result is a valarray of Boolean values.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>The bitwise version of <ph id="ph1">`OR`</ph>, <bpt id="p1">[</bpt>operator&amp;#124;<ept id="p1">](../standard-library/valarray-operators.md#operator_or)</ept> by contrast, can result in a valarray of values other than 0 or 1, depending on outcome of the bitwise operation.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Example</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>See Also</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>valarray&gt;</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>